/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./JavaScript/Component/CameraTracker.js":
/*!***********************************************!*\
  !*** ./JavaScript/Component/CameraTracker.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Rectangle */ \"./JavaScript/GameBase/Class/Rectangle.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, Rectangle_1, GameComponentBase_1, Transform_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.CameraTrackerComponent = void 0;\r\n    class CameraTrackerComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.target = null;\r\n            this.cameraTransform = null;\r\n            this.fieldRange = new Rectangle_1.Rectangle(0, 0, 100, 100);\r\n        }\r\n        Setup(init) {\r\n            var _a, _b, _c;\r\n            this.setUpFlag = true;\r\n            const transform = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n            this.cameraTransform = transform;\r\n            if (init.fieldRange != undefined)\r\n                this.fieldRange = init.fieldRange;\r\n            if (init.targetName != undefined) {\r\n                const target = (_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.GetObject(init.targetName);\r\n                const transform = target === null || target === void 0 ? void 0 : target.GetComponent(Transform_1.TransformComponent);\r\n                this.target = transform;\r\n            }\r\n        }\r\n        Update() {\r\n            if (this.target == null || this.cameraTransform == null) {\r\n                return;\r\n            }\r\n            const anchor = this.cameraTransform.anchor;\r\n            this.cameraTransform.ChangeAnchor(new Point_1.Point2d(0.5, 0.5));\r\n            this.cameraTransform.globalPosition = this.target.globalPosition.copy;\r\n            this.cameraTransform.ChangeAnchor(new Point_1.Point2d(0, 0));\r\n            if (this.cameraTransform.size.width > this.fieldRange.widthLength) {\r\n                this.cameraTransform.globalPosition.x = this.fieldRange.startPoint.x + this.fieldRange.widthLength / 2 - this.cameraTransform.size.width / 2;\r\n            }\r\n            else if (this.cameraTransform.leftLine < this.fieldRange.startPoint.x) {\r\n                this.cameraTransform.leftLine = this.fieldRange.startPoint.x;\r\n            }\r\n            else if (this.cameraTransform.rightLine > this.fieldRange.endPoint.x) {\r\n                this.cameraTransform.rightLine = this.fieldRange.endPoint.x;\r\n            }\r\n            if (this.cameraTransform.size.height > this.fieldRange.heightLength) {\r\n                this.cameraTransform.globalPosition.y = this.fieldRange.startPoint.y + this.fieldRange.heightLength / 2 - this.cameraTransform.size.height / 2;\r\n            }\r\n            else if (this.cameraTransform.upLine < this.fieldRange.startPoint.y) {\r\n                this.cameraTransform.upLine = this.fieldRange.startPoint.y;\r\n            }\r\n            else if (this.cameraTransform.downLine > this.fieldRange.endPoint.y) {\r\n                this.cameraTransform.downLine = this.fieldRange.endPoint.y;\r\n            }\r\n            this.cameraTransform.ChangeAnchor(anchor);\r\n        }\r\n    }\r\n    exports.CameraTrackerComponent = CameraTrackerComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=CameraTracker.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/CameraTracker.js?");

/***/ }),

/***/ "./JavaScript/Component/Debuger.js":
/*!*****************************************!*\
  !*** ./JavaScript/Component/Debuger.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/System/InputManager */ \"./JavaScript/GameBase/System/InputManager.js\"), __webpack_require__(/*! ./GameMaster */ \"./JavaScript/Component/GameMaster.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Camera_1, Draw_1, DrawTextMultiline_1, DrawTextSingleline_1, GameComponentBase_1, Transform_1, InputManager_1, GameMaster_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.DebugerComponent = void 0;\r\n    class DebugerComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            if (init.displayElement instanceof HTMLElement) {\r\n                this.displayElement = init.displayElement;\r\n            }\r\n            this.setUpFlag = true;\r\n        }\r\n        Update() {\r\n            var _a, _b, _c;\r\n            if (this.displayElement == undefined) {\r\n                return;\r\n            }\r\n            this.displayElement.innerHTML = \"\";\r\n            this.displayElement.style.display = \"none\";\r\n            //オブジェクト\r\n            if (DebugerComponent.debugFlag[\"objectname\"] == true) {\r\n                this.displayElement.style.display = \"block\";\r\n                let text = \"オブジェクト名:<br>\";\r\n                const objects = this.parentObject.parentScene.GetAllObject();\r\n                for (let i = 0; i < objects.length; i++) {\r\n                    //何番目の子要素かを調べる\r\n                    const object = objects[i];\r\n                    let guidText1 = \"\";\r\n                    {\r\n                        let targetObject = object;\r\n                        while (targetObject.parentObject != null) {\r\n                            targetObject = targetObject.parentObject;\r\n                            if (guidText1 == \"\") {\r\n                                guidText1 = \"|_\";\r\n                            }\r\n                            else {\r\n                                guidText1 += \"_\";\r\n                            }\r\n                        }\r\n                    }\r\n                    //---\r\n                    text += `${guidText1}>(name:${object.name})(active:${object.active})<br>`;\r\n                    //コンポーネント\r\n                    if (DebugerComponent.debugFlag[\"componentname\"] == true) {\r\n                        for (let c = 0; c < object.components.length; c++) {\r\n                            const component = object.components[c];\r\n                            text += `__(name:${component.constructor.name})(active:${component.active})`;\r\n                            if (DebugerComponent.debugFlag[\"drawcomponent\"] && (component instanceof Draw_1.DrawComponent || component instanceof DrawTextSingleline_1.DrawTextSinglelineComponent || component instanceof DrawTextMultiline_1.DrawTextMultilineComponent)) {\r\n                                text += `(sortNumber:${component.sortNumber})`;\r\n                            }\r\n                            if (DebugerComponent.debugFlag[\"transformcomponent\"] == true && component instanceof Transform_1.TransformComponent) {\r\n                                text += `(position:[g/${component.globalPosition.x}, ${component.globalDrawStartPoint.y}][l/${component.localPosition.x}, ${component.localPosition.y}])<br>///(size:${component.size.width}, ${component.size.height})(absolute:${component.absolute})`;\r\n                            }\r\n                            if (DebugerComponent.debugFlag[\"drawtextcomponent\"] && (component instanceof DrawTextSingleline_1.DrawTextSinglelineComponent || component instanceof DrawTextMultiline_1.DrawTextMultilineComponent)) {\r\n                                text += `(fontSize:${component.fontSize})(fontFamily:${component.fontFamily})`;\r\n                            }\r\n                            text += \"<br>\";\r\n                        }\r\n                    }\r\n                    //---\r\n                }\r\n                this.displayElement.innerHTML = text;\r\n            }\r\n            if (DebugerComponent.debugFlag[\"drawaabb\"] == true) {\r\n                Camera_1.CameraComponent.drawAABB = true;\r\n            }\r\n            else {\r\n                Camera_1.CameraComponent.drawAABB = false;\r\n            }\r\n            if (DebugerComponent.debugFlag[\"maincameraname\"]) {\r\n                if (((_b = (_a = Camera_1.CameraComponent.mainCamera) === null || _a === void 0 ? void 0 : _a.parentObject) === null || _b === void 0 ? void 0 : _b.name) != null) {\r\n                    this.displayElement.innerHTML += `mainCameraName:${(_c = Camera_1.CameraComponent.mainCamera.parentObject) === null || _c === void 0 ? void 0 : _c.name}`;\r\n                }\r\n                else {\r\n                    this.displayElement.innerHTML += `mainCameraName:none`;\r\n                }\r\n            }\r\n            if (DebugerComponent.debugFlag[\"drawfloorstatus\"]) {\r\n                GameMaster_1.GameMasterComponent.drawFloorStatus = true;\r\n            }\r\n            else {\r\n                GameMaster_1.GameMasterComponent.drawFloorStatus = false;\r\n            }\r\n            if (DebugerComponent.debugFlag[\"keyStatus\"] == true) {\r\n                this.displayElement.innerHTML += \"キー情報<br>\";\r\n                this.displayElement.innerHTML += \"Enter:<br>\";\r\n                for (let key in InputManager_1.InputManager.instance.keyExitList) {\r\n                    if (InputManager_1.InputManager.instance.keyExitList[key] == true) {\r\n                        this.displayElement.innerHTML += `${key}<br>`;\r\n                    }\r\n                }\r\n                this.displayElement.innerHTML += \"Stay:<br>\";\r\n                for (let key in InputManager_1.InputManager.instance.keyPressList) {\r\n                    if (InputManager_1.InputManager.instance.keyPressList[key] == true) {\r\n                        this.displayElement.innerHTML += `${key}<br>`;\r\n                    }\r\n                }\r\n                this.displayElement.innerHTML += \"Exit:<br>\";\r\n                for (let key in InputManager_1.InputManager.instance.keyExitList) {\r\n                    if (InputManager_1.InputManager.instance.keyExitList[key] == true) {\r\n                        this.displayElement.innerHTML += `${key}<br>`;\r\n                    }\r\n                }\r\n                this.displayElement.innerHTML +\r\n                    `active:${InputManager_1.InputManager.instance.key_active}<br>` +\r\n                    `ok:${InputManager_1.InputManager.instance.key_ok}<br>` +\r\n                    `cansel:${InputManager_1.InputManager.instance.key_cansel}<br>` +\r\n                    `btn1:${InputManager_1.InputManager.instance.key_btn1}<br>` +\r\n                    `btn2:${InputManager_1.InputManager.instance.key_btn2}<br>` +\r\n                    `btn3:${InputManager_1.InputManager.instance.key_btn3}<br>` +\r\n                    `btn4:${InputManager_1.InputManager.instance.key_btn4}<br>` +\r\n                    `btn5:${InputManager_1.InputManager.instance.key_btn5}<br>`;\r\n            }\r\n        }\r\n        Move() {\r\n            if (this.displayElement != undefined) {\r\n                this.displayElement.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n    exports.DebugerComponent = DebugerComponent;\r\n    DebugerComponent.debugFlag = {\r\n        \"objectname\": false,\r\n        \"componentname\": false,\r\n        \"drawcomponent\": false,\r\n        \"transformcomponent\": false,\r\n        \"drawaabb\": false,\r\n        \"drawtextcomponent\": false,\r\n        \"maincameraname\": false,\r\n        \"drawfloorstatus\": false,\r\n        \"keyStatus\": false,\r\n    };\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Debuger.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/Debuger.js?");

/***/ }),

/***/ "./JavaScript/Component/Enemy.js":
/*!***************************************!*\
  !*** ./JavaScript/Component/Enemy.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ./GameMaster */ \"./JavaScript/Component/GameMaster.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, GameComponentBase_1, GameMaster_1, Aabb_1, Animation_1, Draw_1, ArrayController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.EnemyComponent = void 0;\r\n    class EnemyComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._position = new Point_1.Point2d(0, 0);\r\n            this.moveStatus = null;\r\n            this.speed = 1;\r\n            this.direction = \"left\";\r\n            this.selfDestruction = false;\r\n            this.beforeDestruction = false;\r\n            this._route = null;\r\n            this._routeCounter = 0;\r\n            this._type = \"none\";\r\n            this.turnDatas = [];\r\n        }\r\n        get position() {\r\n            return this._position;\r\n        }\r\n        get routeCounter() {\r\n            return this._routeCounter;\r\n        }\r\n        get route() {\r\n            return this._route;\r\n        }\r\n        get type() {\r\n            return this._type;\r\n        }\r\n        Setup(init) {\r\n            var _a, _b, _c, _d, _e;\r\n            this.setUpFlag = true;\r\n            const aabb = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Aabb_1.AabbComponent);\r\n            const gameMasterObj = (_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.GetObject(init.gameMasterObjName);\r\n            const gameMaster = gameMasterObj === null || gameMasterObj === void 0 ? void 0 : gameMasterObj.GetComponent(GameMaster_1.GameMasterComponent);\r\n            const anime = (_d = this.parentObject) === null || _d === void 0 ? void 0 : _d.GetComponent(Animation_1.AnimationComponent);\r\n            const draw = (_e = this.parentObject) === null || _e === void 0 ? void 0 : _e.GetComponent(Draw_1.DrawComponent);\r\n            this.aabb = aabb;\r\n            this.gameMaster = gameMaster;\r\n            this.anime = anime;\r\n            this.draw = draw;\r\n            this._type = init.enemyType;\r\n            this._route = init.route;\r\n            if (init.position != undefined)\r\n                this._position = init.position;\r\n            if (init.speed != undefined) {\r\n                this.speed = init.speed;\r\n            }\r\n        }\r\n        Start() {\r\n            this.setPosition();\r\n        }\r\n        Update() {\r\n            var _a, _b, _c;\r\n            if (this.selfDestruction == true) {\r\n                this.anime.loop = false;\r\n                const flag = this.anime.ChangeAnime(\"destruction\");\r\n                if (((_a = this.anime) === null || _a === void 0 ? void 0 : _a.loopFlag) == false || flag == false) {\r\n                    this.draw.active = false;\r\n                }\r\n                return;\r\n            }\r\n            if (this.moveStatus != null && this.selfDestruction == false) {\r\n                //移動\r\n                (_b = this.anime) === null || _b === void 0 ? void 0 : _b.ChangeAnime(\"work\");\r\n                switch (this.moveStatus.direction) {\r\n                    case \"up\":\r\n                        this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x, this.aabb.GlobalCenterPoint.y - this.moveStatus.speed);\r\n                        if (this.aabb.GlobalDrawStartPoint.y < this.moveStatus.line) {\r\n                            this.setPosition();\r\n                        }\r\n                        break;\r\n                    case \"down\":\r\n                        this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x, this.aabb.GlobalCenterPoint.y + this.moveStatus.speed);\r\n                        if (this.aabb.GlobalDrawStartPoint.y > this.moveStatus.line) {\r\n                            this.setPosition();\r\n                        }\r\n                        break;\r\n                    case \"left\":\r\n                        this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x - this.moveStatus.speed, this.aabb.GlobalCenterPoint.y);\r\n                        if (this.aabb.GlobalDrawStartPoint.x < this.moveStatus.line) {\r\n                            this.setPosition();\r\n                        }\r\n                        break;\r\n                    case \"right\":\r\n                        this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x + this.moveStatus.speed, this.aabb.GlobalCenterPoint.y);\r\n                        if (this.aabb.GlobalDrawStartPoint.x > this.moveStatus.line) {\r\n                            this.setPosition();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                (_c = this.anime) === null || _c === void 0 ? void 0 : _c.ChangeAnime(\"stand\");\r\n            }\r\n        }\r\n        setPosition() {\r\n            if (this.aabb != undefined) {\r\n                this.aabb.GlobalCenterPoint = new Point_1.Point2d(GameMaster_1.GameMasterComponent.gameRule.tileSize.width * this._position.x + GameMaster_1.GameMasterComponent.gameRule.tileSize.width / 2, GameMaster_1.GameMasterComponent.gameRule.tileSize.height * this._position.y + GameMaster_1.GameMasterComponent.gameRule.tileSize.height / 2);\r\n                this.moveStatus = null;\r\n            }\r\n        }\r\n        SaveTurnData() {\r\n            let destruction = false;\r\n            if (this.selfDestruction) {\r\n                if (this.beforeDestruction == false) {\r\n                    this.beforeDestruction = true;\r\n                }\r\n                else {\r\n                    destruction = true;\r\n                }\r\n            }\r\n            this.turnDatas.push({\r\n                direction: this.direction,\r\n                position: this.position.copy,\r\n                routeCount: this.routeCounter,\r\n                selfDestruction: destruction,\r\n            });\r\n        }\r\n        OnBack() {\r\n            if (this.turnDatas.length == 0) {\r\n                this.selfDestruction = true;\r\n                return;\r\n            }\r\n            const beforeTurnData = this.turnDatas[this.turnDatas.length - 1];\r\n            this.turnDatas = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.turnDatas, beforeTurnData);\r\n            if (beforeTurnData.selfDestruction == false) {\r\n                this.beforeDestruction = false;\r\n                this.draw.active = true;\r\n                this.selfDestruction = false;\r\n                this._position = beforeTurnData.position;\r\n                this.direction = beforeTurnData.direction;\r\n                this._routeCounter = beforeTurnData.routeCount;\r\n            }\r\n            this.setPosition();\r\n        }\r\n        Move() {\r\n            if (this.moveStatus == null && this.route != null && this.route.length > 0 && this.type != \"none\") {\r\n                //移動先が移動可能かを調べる\r\n                const direction = this.route[this.routeCounter];\r\n                let checkPoint = new Point_1.Point2d(this.position.x, this.position.y);\r\n                switch (direction) {\r\n                    case \"up\":\r\n                        checkPoint.y -= 1;\r\n                        break;\r\n                    case \"down\":\r\n                        checkPoint.y += 1;\r\n                        break;\r\n                    case \"left\":\r\n                        checkPoint.x -= 1;\r\n                        break;\r\n                    case \"right\":\r\n                        checkPoint.x += 1;\r\n                        break;\r\n                }\r\n                if (checkPoint.y < 0 || this.gameMaster.floorStatusList.length <= checkPoint.y ||\r\n                    checkPoint.x < 0 || this.gameMaster.floorStatusList[checkPoint.y].length <= checkPoint.x ||\r\n                    (this.type == \"bead\" && this.gameMaster.CheckCanMove(checkPoint, false, true) == false) ||\r\n                    (this.type == \"groundMonster\" && this.gameMaster.CheckCanMove(checkPoint, true, true) == false)) {\r\n                    if (this.type == \"bead\") {\r\n                        this.selfDestruction = true;\r\n                    }\r\n                    return;\r\n                }\r\n                //移動可能なら移動を行う\r\n                this._routeCounter++;\r\n                if (this.route.length <= this.routeCounter) {\r\n                    this._routeCounter = 0;\r\n                }\r\n                this._position = checkPoint;\r\n                const moveStatus = {\r\n                    direction: direction,\r\n                    line: 0,\r\n                    speed: this.speed,\r\n                };\r\n                switch (direction) {\r\n                    case \"up\":\r\n                        moveStatus.line = this.aabb.GlobalDrawStartPoint.y - GameMaster_1.GameMasterComponent.gameRule.tileSize.height;\r\n                        break;\r\n                    case \"down\":\r\n                        moveStatus.line = this.aabb.GlobalDrawStartPoint.y + GameMaster_1.GameMasterComponent.gameRule.tileSize.height;\r\n                        break;\r\n                    case \"left\":\r\n                        moveStatus.line = this.aabb.GlobalDrawStartPoint.x - GameMaster_1.GameMasterComponent.gameRule.tileSize.width;\r\n                        break;\r\n                    case \"right\":\r\n                        moveStatus.line = this.aabb.GlobalDrawStartPoint.x + GameMaster_1.GameMasterComponent.gameRule.tileSize.width;\r\n                        break;\r\n                }\r\n                this.moveStatus = moveStatus;\r\n            }\r\n        }\r\n    }\r\n    exports.EnemyComponent = EnemyComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Enemy.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/Enemy.js?");

/***/ }),

/***/ "./JavaScript/Component/Floor.js":
/*!***************************************!*\
  !*** ./JavaScript/Component/Floor.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ./GameMaster */ \"./JavaScript/Component/GameMaster.js\"), __webpack_require__(/*! ../GameBase/Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, Point_1, GameComponentBase_1, GlobalData_1, Aabb_1, Draw_1, Transform_1, GameMaster_1, ArrayController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.FloorComponent = void 0;\r\n    class FloorComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.status = \"stop\";\r\n            this.offset = new Point_1.Point2d(0, 0);\r\n            this.transform = null;\r\n            this.aabb = null;\r\n            this.movable = true;\r\n            this.ride = true;\r\n            this.gameMaster = null;\r\n            this.playerAABB = null;\r\n            this.enemyHoverEffect = new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tileLockEffect.png\");\r\n            this.moveEffect = new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/moveTile_effect.png\");\r\n            this.turnDatas = [];\r\n            //動いているとき\r\n            this.moveStatus = null;\r\n        }\r\n        Setup(init) {\r\n            var _a, _b;\r\n            this.setUpFlag = true;\r\n            this.pointNumber = init.pointNumber;\r\n            const transform = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n            this.transform = transform;\r\n            const aabb = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.GetComponent(Aabb_1.AabbComponent);\r\n            this.aabb = aabb;\r\n            this.gameMaster = init.gameMaster;\r\n            this.playerAABB = init.playerAabb;\r\n            if (this.parentObject) {\r\n                const obj = this.parentObject.GetChildObject(init.effectDrawName);\r\n                if (obj != null) {\r\n                    const effectDraw = obj.GetComponent(Draw_1.DrawComponent);\r\n                    this.effectDrawComponent = effectDraw;\r\n                }\r\n            }\r\n            if (init.movable)\r\n                this.movable = init.movable;\r\n            if (init.ride)\r\n                this.ride = init.ride;\r\n            if (init.offset)\r\n                this.offset = init.offset;\r\n        }\r\n        Update() {\r\n            //エフェクトの更新\r\n            if (this.pointNumber != undefined && this.status == \"move\") {\r\n                this.SetEffectImage(this.moveEffect);\r\n            }\r\n            else if (this.pointNumber != null && this.gameMaster.CheckPoint_Enemy(this.pointNumber, \"groundMonster\")) {\r\n                this.SetEffectImage(this.enemyHoverEffect);\r\n            }\r\n            else {\r\n                this.SetEffectImage(null);\r\n            }\r\n            if (this.moveStatus != null) {\r\n                let flag = false;\r\n                let sa = null;\r\n                //プレイヤーが上に乗っかているか\r\n                if (this.aabb != null &&\r\n                    this.playerAABB != null &&\r\n                    this.aabb.GlobalPoint_up <= this.playerAABB.GlobalCenterPoint.y &&\r\n                    this.aabb.GlobalPoint_down >= this.playerAABB.GlobalCenterPoint.y &&\r\n                    this.aabb.GlobalPoint_left <= this.playerAABB.GlobalCenterPoint.x &&\r\n                    this.aabb.GlobalPoint_right >= this.playerAABB.GlobalCenterPoint.x) {\r\n                    sa = new Point_1.Point2d(this.playerAABB.GlobalCenterPoint.x - this.aabb.GlobalPoint_left, this.playerAABB.GlobalCenterPoint.y - this.aabb.GlobalPoint_up);\r\n                }\r\n                //移動\r\n                switch (this.moveStatus.direction) {\r\n                    case \"up\":\r\n                        this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x, this.aabb.GlobalCenterPoint.y - this.moveStatus.speed);\r\n                        if (this.aabb.GlobalCenterPoint.y < this.moveStatus.line) {\r\n                            flag = true;\r\n                        }\r\n                        break;\r\n                    case \"down\":\r\n                        this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x, this.aabb.GlobalCenterPoint.y + this.moveStatus.speed);\r\n                        if (this.aabb.GlobalCenterPoint.y > this.moveStatus.line) {\r\n                            flag = true;\r\n                        }\r\n                        break;\r\n                    case \"left\":\r\n                        this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x - this.moveStatus.speed, this.aabb.GlobalCenterPoint.y);\r\n                        if (this.aabb.GlobalCenterPoint.x < this.moveStatus.line) {\r\n                            flag = true;\r\n                        }\r\n                        break;\r\n                    case \"right\":\r\n                        this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x + this.moveStatus.speed, this.aabb.GlobalCenterPoint.y);\r\n                        if (this.aabb.GlobalCenterPoint.x > this.moveStatus.line) {\r\n                            flag = true;\r\n                        }\r\n                        break;\r\n                }\r\n                if (flag) {\r\n                    this.gameMaster.PointSet();\r\n                }\r\n                //プレイヤーの位置を更新\r\n                if (sa != null) {\r\n                    this.playerAABB.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalPoint_left + sa.x, this.aabb.GlobalPoint_up + sa.y);\r\n                }\r\n            }\r\n        }\r\n        setPosition() {\r\n            this.aabb.GlobalCenterPoint = new Point_1.Point2d(GameMaster_1.GameMasterComponent.gameRule.tileSize.width * this.pointNumber.x + GameMaster_1.GameMasterComponent.gameRule.tileSize.width / 2, GameMaster_1.GameMasterComponent.gameRule.tileSize.height * this.pointNumber.y + GameMaster_1.GameMasterComponent.gameRule.tileSize.height / 2);\r\n            this.moveStatus = null;\r\n            this.gameMaster.floorStatusList[this.pointNumber.y][this.pointNumber.x] = \"standby\";\r\n            this.status = \"stop\";\r\n            this.SetEffectImage(null);\r\n        }\r\n        SaveTurnData() {\r\n            this.turnDatas.push({\r\n                pointNumber: this.pointNumber.copy,\r\n            });\r\n        }\r\n        OnBack() {\r\n            if (this.turnDatas.length == 0) {\r\n                return;\r\n            }\r\n            const beforeTurn = this.turnDatas[this.turnDatas.length - 1];\r\n            this.turnDatas = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.turnDatas, beforeTurn);\r\n            this.gameMaster.floorStatusList[this.pointNumber.y][this.pointNumber.x] = \"empty\";\r\n            this.pointNumber = beforeTurn.pointNumber;\r\n            this.setPosition();\r\n        }\r\n        moveFloor(direction, distance, speedPerSecond) {\r\n            let moveStatus = {\r\n                \"direction\": direction,\r\n                \"speed\": 0,\r\n                \"line\": 0,\r\n            };\r\n            switch (direction) {\r\n                case \"up\":\r\n                    this.pointNumber = new Point_1.Point2d(this.pointNumber.x, this.pointNumber.y - distance);\r\n                    moveStatus.line = this.aabb.GlobalCenterPoint.y - distance * GameMaster_1.GameMasterComponent.gameRule.tileSize.height;\r\n                    moveStatus.speed = GameMaster_1.GameMasterComponent.gameRule.tileSize.height / 60 * speedPerSecond;\r\n                    break;\r\n                case \"down\":\r\n                    this.pointNumber = new Point_1.Point2d(this.pointNumber.x, this.pointNumber.y + distance);\r\n                    moveStatus.line = this.aabb.GlobalCenterPoint.y + distance * GameMaster_1.GameMasterComponent.gameRule.tileSize.height;\r\n                    moveStatus.speed = GameMaster_1.GameMasterComponent.gameRule.tileSize.height / 60 * speedPerSecond;\r\n                    break;\r\n                case \"left\":\r\n                    this.pointNumber = new Point_1.Point2d(this.pointNumber.x - distance, this.pointNumber.y);\r\n                    moveStatus.line = this.aabb.GlobalCenterPoint.x - distance * GameMaster_1.GameMasterComponent.gameRule.tileSize.width;\r\n                    moveStatus.speed = GameMaster_1.GameMasterComponent.gameRule.tileSize.width / 60 * speedPerSecond;\r\n                    break;\r\n                case \"right\":\r\n                    this.pointNumber = new Point_1.Point2d(this.pointNumber.x + distance, this.pointNumber.y);\r\n                    moveStatus.line = this.aabb.GlobalCenterPoint.x + distance * GameMaster_1.GameMasterComponent.gameRule.tileSize.width;\r\n                    moveStatus.speed = GameMaster_1.GameMasterComponent.gameRule.tileSize.width / 60 * speedPerSecond;\r\n                    break;\r\n            }\r\n            this.status = \"move\";\r\n            this.moveStatus = moveStatus;\r\n            this.SetEffectImage(new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/moveTile_effect.png\"));\r\n        }\r\n        SetEffectImage(image) {\r\n            if (this.effectDrawComponent != undefined && this.effectDrawComponent.transform != null) {\r\n                this.effectDrawComponent.image = image;\r\n            }\r\n        }\r\n    }\r\n    exports.FloorComponent = FloorComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Floor.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/Floor.js?");

/***/ }),

/***/ "./JavaScript/Component/Fort.js":
/*!**************************************!*\
  !*** ./JavaScript/Component/Fort.js ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ./GameMaster */ \"./JavaScript/Component/GameMaster.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, GameComponentBase_1, GameMaster_1, DrawTextSingleline_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.FortComponent = void 0;\r\n    class FortComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.count = 0;\r\n            this.maxCount = 0;\r\n            this.direction = \"left\";\r\n            this._pointNumber = new Point_1.Point2d(0, 0);\r\n        }\r\n        get pointNumber() {\r\n            return this._pointNumber;\r\n        }\r\n        Setup(init) {\r\n            var _a, _b, _c;\r\n            this.setUpFlag = true;\r\n            const gameMasterObj = (_b = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.parentScene) === null || _b === void 0 ? void 0 : _b.GetObject(init.gameMasterObjName);\r\n            const gameMaster = gameMasterObj === null || gameMasterObj === void 0 ? void 0 : gameMasterObj.GetComponent(GameMaster_1.GameMasterComponent);\r\n            const text = (_c = this.parentObject) === null || _c === void 0 ? void 0 : _c.GetComponent(DrawTextSingleline_1.DrawTextSinglelineComponent);\r\n            this.gameMaster = gameMaster;\r\n            this.maxCount = init.count;\r\n            this.count = this.maxCount;\r\n            this._pointNumber = init.pointNumber;\r\n            this.direction = init.direction;\r\n            this.bead = init.bead;\r\n            this.text = text;\r\n            this.text.text = this.count.toString();\r\n        }\r\n        Action() {\r\n            var _a;\r\n            if (this.count > 0) {\r\n                this.count--;\r\n            }\r\n            if (this.count <= 0) {\r\n                //弾を発射可能かを調べる\r\n                let checkPoint = this.pointNumber.copy;\r\n                switch (this.direction) {\r\n                    case \"up\":\r\n                        checkPoint.y--;\r\n                        break;\r\n                    case \"down\":\r\n                        checkPoint.y++;\r\n                        break;\r\n                    case \"left\":\r\n                        checkPoint.x--;\r\n                        break;\r\n                    case \"right\":\r\n                        checkPoint.x++;\r\n                        break;\r\n                }\r\n                if (checkPoint.y < 0 || checkPoint.y >= this.gameMaster.floorStatusList.length ||\r\n                    checkPoint.x < 0 || checkPoint.x >= this.gameMaster.floorStatusList[checkPoint.y].length ||\r\n                    this.gameMaster.CheckPoint_Enemy(checkPoint, \"all\")) {\r\n                    return;\r\n                }\r\n                //弾を出現させる\r\n                if (this.bead != undefined && this.bead != null) {\r\n                    let workAnime = [];\r\n                    let standAnime = [];\r\n                    let destructionAnime = [];\r\n                    if (this.bead.anime.animes != undefined && this.bead.anime.animes[\"work\"] != undefined) {\r\n                        workAnime = this.bead.anime.animes[\"work\"];\r\n                    }\r\n                    if (this.bead.anime.animes != undefined && this.bead.anime.animes[\"stand\"] != undefined) {\r\n                        standAnime = this.bead.anime.animes[\"stand\"];\r\n                    }\r\n                    if (this.bead.anime.animes != undefined && this.bead.anime.animes[\"destruction\"] != undefined) {\r\n                        destructionAnime = this.bead.anime.animes[\"destruction\"];\r\n                    }\r\n                    (_a = this.gameMaster) === null || _a === void 0 ? void 0 : _a.CreateEnemy({\r\n                        animationLoopSpeed: this.bead.anime.loopTime_second != undefined ? this.bead.anime.loopTime_second : 1,\r\n                        animations: {\r\n                            \"work\": workAnime,\r\n                            \"stand\": standAnime,\r\n                            \"destruction\": destructionAnime,\r\n                        },\r\n                        enemyDirection: this.direction,\r\n                        enemyType: this.bead.enemy.enemyType,\r\n                        route: this.bead.enemy.route,\r\n                        moveSpeed: this.bead.enemy.speed ? this.bead.enemy.speed : 1,\r\n                        point: checkPoint,\r\n                    });\r\n                }\r\n                this.count = this.maxCount;\r\n            }\r\n            this.text.text = this.count.toString();\r\n        }\r\n        OnBack() {\r\n            this.count++;\r\n            if (this.count > this.maxCount) {\r\n                this.count = 1;\r\n            }\r\n            this.text.text = this.count.toString();\r\n        }\r\n    }\r\n    exports.FortComponent = FortComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Fort.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/Fort.js?");

/***/ }),

/***/ "./JavaScript/Component/GameMaster.js":
/*!********************************************!*\
  !*** ./JavaScript/Component/GameMaster.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Rectangle */ \"./JavaScript/GameBase/Class/Rectangle.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../GameBase/System/InputManager */ \"./JavaScript/GameBase/System/InputManager.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Other/DrawEffect */ \"./JavaScript/GameBase/Other/DrawEffect.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ./PlayerController */ \"./JavaScript/Component/PlayerController.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ./Enemy */ \"./JavaScript/Component/Enemy.js\"), __webpack_require__(/*! ./Fort */ \"./JavaScript/Component/Fort.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ./Floor */ \"./JavaScript/Component/Floor.js\"), __webpack_require__(/*! ../Object/Enemy */ \"./JavaScript/Object/Enemy.js\"), __webpack_require__(/*! ../Object/Fort */ \"./JavaScript/Object/Fort.js\"), __webpack_require__(/*! ../Object/Floor */ \"./JavaScript/Object/Floor.js\"), __webpack_require__(/*! ../Object/Wall */ \"./JavaScript/Object/Wall.js\"), __webpack_require__(/*! ../Object/Reslut */ \"./JavaScript/Object/Reslut.js\"), __webpack_require__(/*! ../GameBase/Game/Object/ImageDisplay */ \"./JavaScript/GameBase/Game/Object/ImageDisplay.js\"), __webpack_require__(/*! ../Object/ImmovableFloor */ \"./JavaScript/Object/ImmovableFloor.js\"), __webpack_require__(/*! ./CameraTracker */ \"./JavaScript/Component/CameraTracker.js\"), __webpack_require__(/*! ../Other/GameRuleList */ \"./JavaScript/Other/GameRuleList.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/System/SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../Other/SaveData */ \"./JavaScript/Other/SaveData.js\"), __webpack_require__(/*! ../Object/PauseDisplay */ \"./JavaScript/Object/PauseDisplay.js\"), __webpack_require__(/*! ./Pouse */ \"./JavaScript/Component/Pouse.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, Point_1, Rectangle_1, Size_1, GameComponentBase_1, GlobalData_1, InputManager_1, Animation_1, DrawEffect_1, Aabb_1, PlayerController_1, Camera_1, Enemy_1, Fort_1, Transform_1, Floor_1, Enemy_2, Fort_2, Floor_2, Wall_1, Reslut_1, ImageDisplay_1, ImmovableFloor_1, CameraTracker_1, GameRuleList_1, Draw_1, Color_1, SceneManager_1, DrawTextMultiline_1, SaveData_1, PauseDisplay_1, Pouse_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameMasterComponent = void 0;\r\n    class GameMasterComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            //画像セット\r\n            this.tileImageList = {\r\n                \"tile_0\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/noMoveTile.png\"),\r\n                \"tile_1\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/moveTile.bmp\"),\r\n                \"tile_2\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/wall.png\"),\r\n                \"scope_move\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidWork.png\"),\r\n                \"scope_skill\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidSkill.png\"),\r\n                \"guidArrow-up\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowStraight.png\"),\r\n                \"guidArrow-down\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowStraight.png\", { up: 0, down: 0, left: 0, right: 0 }, 180),\r\n                \"guidArrow-left\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowStraight.png\", { up: 0, down: 0, left: 0, right: 0, }, 270),\r\n                \"guidArrow-right\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowStraight.png\", { up: 0, down: 0, left: 0, right: 0 }, 90),\r\n                \"guidArrow-upleft\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowCurve.png\", { up: 0, down: 0, left: 0, right: 0 }, 270),\r\n                \"guidArrow-upright\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowCurve.png\"),\r\n                \"guidArrow-downleft\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowCurve.png\", { up: 0, down: 0, left: 0, right: 0 }, 180),\r\n                \"guidArrow-downright\": new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowCurve.png\", { up: 0, down: 0, left: 0, right: 0 }, 90),\r\n            };\r\n            this.maxGuidListCount = 10;\r\n            //ステージ要素\r\n            this.floorStatusList = [[\"empty\"]];\r\n            this.floorList = [];\r\n            this.enemys = [];\r\n            this.forts = [];\r\n            this.enemyPoints = [];\r\n            //プレイヤー\r\n            this.playerController = null;\r\n            //スコア\r\n            this.numberOfMoves = 0;\r\n        }\r\n        Setup(init) {\r\n            var _a;\r\n            this.setUpFlag = true;\r\n            let movePossibleData = [];\r\n            for (let y = 0; y < GameMasterComponent.gameRule.tileData.length; y++) {\r\n                movePossibleData[y] = [];\r\n                for (let x = 0; x < GameMasterComponent.gameRule.tileData[y].length; x++) {\r\n                    if (GameMasterComponent.gameRule.tileData[y][x] && (GameMasterComponent.gameRule.tileData[y][x] == 1 || GameMasterComponent.gameRule.tileData[y][x] == 3)) {\r\n                        movePossibleData[y][x] = \"standby\";\r\n                    }\r\n                    else if (GameMasterComponent.gameRule.tileData[y][x] == 2) {\r\n                        movePossibleData[y][x] = \"wall\";\r\n                    }\r\n                    else {\r\n                        movePossibleData[y][x] = \"empty\";\r\n                    }\r\n                }\r\n            }\r\n            this.floorStatusList = movePossibleData;\r\n            for (let i = 0; i < GameMasterComponent.gameRule.enemys.length; i++) {\r\n                const enemyData = GameMasterComponent.gameRule.enemys[i];\r\n                const enemy = new Enemy_2.EnemyObject(\"enemy\", {\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        position: ((_a = enemyData.enemy.position) === null || _a === void 0 ? void 0 : _a.copy) != undefined ? enemyData.enemy.position.copy : new Point_1.Point2d(0, 0),\r\n                        gameMasterObjName: this.parentObject.name,\r\n                        speed: enemyData.enemy.speed,\r\n                        enemyType: enemyData.enemy.enemyType,\r\n                        route: enemyData.enemy.route,\r\n                    },\r\n                    aabb: enemyData.aabb,\r\n                    anime: enemyData.anime,\r\n                    draw: enemyData.draw,\r\n                    transform: enemyData.transform,\r\n                });\r\n                this.enemys.push(enemy);\r\n            }\r\n            for (let i = 0; i < GameMasterComponent.gameRule.forts.length; i++) {\r\n                const fort = new Fort_2.FortObject(\"fort\", GameMasterComponent.gameRule.forts[i]);\r\n                this.forts.push(fort);\r\n            }\r\n            if (init.tileImageList != undefined)\r\n                this.tileImageList = init.tileImageList;\r\n            if (init.scopeImage_move != undefined) {\r\n                init.scopeImage_move.size = GameMasterComponent.gameRule.tileSize;\r\n                this.tileImageList[\"scope_move\"] = init.scopeImage_move;\r\n            }\r\n            else {\r\n                this.tileImageList[\"scope_move\"].size = GameMasterComponent.gameRule.tileSize;\r\n            }\r\n            if (init.scopeImage_skill != undefined) {\r\n                init.scopeImage_skill.size = GameMasterComponent.gameRule.tileSize;\r\n                this.tileImageList[\"scope_skill\"] = init.scopeImage_skill;\r\n            }\r\n            else {\r\n                this.tileImageList[\"scope_skill\"].size = GameMasterComponent.gameRule.tileSize;\r\n            }\r\n            this.EnemyFunction((enemy) => {\r\n                var _a;\r\n                const transform = (_a = enemy.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n                transform.size = new Size_1.Size(GameMasterComponent.gameRule.tileSize.width * 0.8, GameMasterComponent.gameRule.tileSize.height * 0.8);\r\n            });\r\n            this.tileImageList[\"guidArrow-up\"].size = GameMasterComponent.gameRule.tileSize;\r\n            this.tileImageList[\"guidArrow-down\"].size = GameMasterComponent.gameRule.tileSize;\r\n            this.tileImageList[\"guidArrow-left\"].size = GameMasterComponent.gameRule.tileSize;\r\n            this.tileImageList[\"guidArrow-right\"].size = GameMasterComponent.gameRule.tileSize;\r\n            this.tileImageList[\"guidArrow-upleft\"].size = GameMasterComponent.gameRule.tileSize;\r\n            this.tileImageList[\"guidArrow-upright\"].size = GameMasterComponent.gameRule.tileSize;\r\n            this.tileImageList[\"guidArrow-downleft\"].size = GameMasterComponent.gameRule.tileSize;\r\n            this.tileImageList[\"guidArrow-downright\"].size = GameMasterComponent.gameRule.tileSize;\r\n        }\r\n        Start() {\r\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\r\n            if (GameMasterComponent.gameRule == null) {\r\n                alert(\"エラー\\n\\rステージのデータがない\");\r\n                return;\r\n            }\r\n            //カメラ設定\r\n            const camera = this.parentObject.parentScene.GetObject(\"mainCamera\");\r\n            const cameraTracker = camera.GetComponent(CameraTracker_1.CameraTrackerComponent);\r\n            cameraTracker.fieldRange = new Rectangle_1.Rectangle(0, -100, GameMasterComponent.gameRule.tileSize.width * GameMasterComponent.gameRule.tileData[0].length, GameMasterComponent.gameRule.tileSize.height * GameMasterComponent.gameRule.tileData.length);\r\n            //プレイヤー設定\r\n            const player = this.parentObject.parentScene.GetObject(\"player\");\r\n            const playerController = player.GetComponent(PlayerController_1.PlayerControllerComponent);\r\n            const playerAabb = player.GetComponent(Aabb_1.AabbComponent);\r\n            this.playerController = playerController;\r\n            playerAabb.GlobalCenterPoint = new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * GameMasterComponent.gameRule.startPoint.x + GameMasterComponent.gameRule.tileSize.width / 2, GameMasterComponent.gameRule.tileSize.height * GameMasterComponent.gameRule.startPoint.y + GameMasterComponent.gameRule.tileSize.height / 2);\r\n            playerController.movePattern = GameMasterComponent.gameRule.playerMoveMethods;\r\n            playerController.skills = GameMasterComponent.gameRule.playerSkills;\r\n            //床・壁\r\n            for (let y = 0; y < GameMasterComponent.gameRule.tileData.length; y++) {\r\n                for (let x = 0; x < GameMasterComponent.gameRule.tileData[y].length; x++) {\r\n                    switch (GameMasterComponent.gameRule.tileData[y][x]) {\r\n                        case 1: //床\r\n                            {\r\n                                const floor = new Floor_2.FloorObject(\"floor\", {\r\n                                    transform: {\r\n                                        type: Transform_1.TransformComponent,\r\n                                        size: new Size_1.Size(GameMasterComponent.gameRule.tileSize.width, GameMasterComponent.gameRule.tileSize.height * 1.5),\r\n                                    },\r\n                                    aabb: {\r\n                                        type: Aabb_1.AabbComponent,\r\n                                        offset: new Point_1.Point2d(0, GameMasterComponent.gameRule.tileSize.height * -(1.5 / 6)),\r\n                                        size: new Size_1.Size(GameMasterComponent.gameRule.tileSize.width, GameMasterComponent.gameRule.tileSize.height),\r\n                                    },\r\n                                    draw: {\r\n                                        type: Draw_1.DrawComponent,\r\n                                        sortName: \"floor\",\r\n                                        image: this.getTileImage(\"tile_1\"),\r\n                                    },\r\n                                    floor: {\r\n                                        type: Floor_1.FloorComponent,\r\n                                        effectDrawName: \"effect\",\r\n                                        gameMaster: this,\r\n                                        pointNumber: new Point_1.Point2d(x, y),\r\n                                        playerAabb: playerAabb,\r\n                                        offset: new Point_1.Point2d(x, y),\r\n                                        movable: true,\r\n                                    }\r\n                                });\r\n                                (_b = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.parentScene) === null || _b === void 0 ? void 0 : _b.AddObject(floor);\r\n                                const aabb = floor.GetComponent(Aabb_1.AabbComponent);\r\n                                aabb.GlobalDrawStartPoint = new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * x, GameMasterComponent.gameRule.tileSize.height * y);\r\n                                const floorCom = floor.GetComponent(Floor_1.FloorComponent);\r\n                                this.floorList.push(floorCom);\r\n                            }\r\n                            break;\r\n                        case 2: //壁\r\n                            {\r\n                                const wall = new Wall_1.WallObject(\"wall\", {\r\n                                    transform: {\r\n                                        type: Transform_1.TransformComponent,\r\n                                        size: GameMasterComponent.gameRule.tileSize,\r\n                                        anchor: new Point_1.Point2d(0, 0),\r\n                                        position: new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * x, GameMasterComponent.gameRule.tileSize.height * y),\r\n                                    },\r\n                                    draw: {\r\n                                        type: Draw_1.DrawComponent,\r\n                                        sortName: \"floor\",\r\n                                        image: this.getTileImage(\"tile_2\"),\r\n                                    },\r\n                                    aabb: {\r\n                                        type: Aabb_1.AabbComponent,\r\n                                        size: GameMasterComponent.gameRule.tileSize,\r\n                                        offset: new Point_1.Point2d(0, 0),\r\n                                    }\r\n                                });\r\n                                (_d = (_c = this.parentObject) === null || _c === void 0 ? void 0 : _c.parentScene) === null || _d === void 0 ? void 0 : _d.AddObject(wall);\r\n                            }\r\n                            break;\r\n                        case 3: //不動床\r\n                            {\r\n                                const floor = new ImmovableFloor_1.ImmovableFloor(\"doNotMoveFloor\", {\r\n                                    transform: {\r\n                                        type: Transform_1.TransformComponent,\r\n                                        size: new Size_1.Size(GameMasterComponent.gameRule.tileSize.width, GameMasterComponent.gameRule.tileSize.height * 1.5),\r\n                                    },\r\n                                    aabb: {\r\n                                        type: Aabb_1.AabbComponent,\r\n                                        offset: new Point_1.Point2d(0, GameMasterComponent.gameRule.tileSize.height * -(1.5 / 6)),\r\n                                        size: new Size_1.Size(GameMasterComponent.gameRule.tileSize.width, GameMasterComponent.gameRule.tileSize.height),\r\n                                    },\r\n                                    draw: {\r\n                                        type: Draw_1.DrawComponent,\r\n                                        sortName: \"floor\",\r\n                                        image: this.getTileImage(\"tile_0\"),\r\n                                    },\r\n                                    floor: {\r\n                                        type: Floor_1.FloorComponent,\r\n                                        effectDrawName: \"effect\",\r\n                                        gameMaster: this,\r\n                                        pointNumber: new Point_1.Point2d(x, y),\r\n                                        playerAabb: playerAabb,\r\n                                        offset: new Point_1.Point2d(x, y),\r\n                                        movable: false,\r\n                                    }\r\n                                });\r\n                                (_f = (_e = this.parentObject) === null || _e === void 0 ? void 0 : _e.parentScene) === null || _f === void 0 ? void 0 : _f.AddObject(floor);\r\n                                const aabb = floor.GetComponent(Aabb_1.AabbComponent);\r\n                                aabb.GlobalDrawStartPoint = new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * x, GameMasterComponent.gameRule.tileSize.height * y);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            //砲台\r\n            for (let i = 0; i < this.forts.length; i++) {\r\n                const fort = this.forts[i];\r\n                const fort_fort = fort.GetComponent(Fort_1.FortComponent);\r\n                const fort_aabb = fort.GetComponent(Aabb_1.AabbComponent);\r\n                const fort_transform = fort.GetComponent(Transform_1.TransformComponent);\r\n                (_h = (_g = this.parentObject) === null || _g === void 0 ? void 0 : _g.parentScene) === null || _h === void 0 ? void 0 : _h.AddObject(fort);\r\n                fort_transform.size = new Size_1.Size(GameMasterComponent.gameRule.tileSize.width, GameMasterComponent.gameRule.tileSize.height * 1.5);\r\n                fort_aabb.offset = new Point_1.Point2d(0, GameMasterComponent.gameRule.tileSize.height * (1.5 / 6));\r\n                fort_aabb.size = GameMasterComponent.gameRule.tileSize;\r\n                fort_aabb.GlobalDrawStartPoint = new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * fort_fort.pointNumber.x, GameMasterComponent.gameRule.tileSize.height * fort_fort.pointNumber.y);\r\n                this.floorStatusList[fort_fort.pointNumber.y][fort_fort.pointNumber.x] = \"wall\";\r\n                const ImageDisplay = new ImageDisplay_1.ImageDisplayObject(\"fortLowerPart\", {\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"underFloor\",\r\n                        image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/fort_bottom.png\"),\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(GameMasterComponent.gameRule.tileSize.width, GameMasterComponent.gameRule.tileSize.height * 1.5),\r\n                        position: new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * fort_fort.pointNumber.x, GameMasterComponent.gameRule.tileSize.height * (fort_fort.pointNumber.y + 1)),\r\n                    }\r\n                });\r\n                (_k = (_j = this.parentObject) === null || _j === void 0 ? void 0 : _j.parentScene) === null || _k === void 0 ? void 0 : _k.AddObject(ImageDisplay);\r\n            }\r\n            //敵\r\n            for (let i = 0; i < this.enemys.length; i++) {\r\n                this.enemyPoints.push(this.enemys[i].GetComponent(Enemy_1.EnemyComponent));\r\n                (_m = (_l = this.parentObject) === null || _l === void 0 ? void 0 : _l.parentScene) === null || _m === void 0 ? void 0 : _m.AddObject(this.enemys[i]);\r\n            }\r\n            //ポーズ画面\r\n            const pauseDisplay = new PauseDisplay_1.PauseDisplayObject(\"pause\", {\r\n                pause: {\r\n                    type: Pouse_1.PauseComponent,\r\n                    gameMaster: this,\r\n                },\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    anchor: new Point_1.Point2d(0, 0),\r\n                    position: new Point_1.Point2d(0, 0),\r\n                    size: new Size_1.Size(800, 500),\r\n                    absolute: true,\r\n                }\r\n            }, false);\r\n            const pauseTextObj = pauseDisplay.GetChildObject(\"stageText\");\r\n            const pauseText = pauseTextObj === null || pauseTextObj === void 0 ? void 0 : pauseTextObj.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            pauseText.text = GameMasterComponent.gameRule.description;\r\n            this.pauseDisplay = pauseDisplay;\r\n            (_p = (_o = this.parentObject) === null || _o === void 0 ? void 0 : _o.parentScene) === null || _p === void 0 ? void 0 : _p.AddObject(pauseDisplay);\r\n            //ルール\r\n            (_q = GameMasterComponent.gameRule) === null || _q === void 0 ? void 0 : _q.Start(this);\r\n        }\r\n        Update() {\r\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\r\n            if (GameMasterComponent.drawFloorStatus == true && Camera_1.CameraComponent.mainCamera != null) {\r\n                for (let y = 0; y < this.floorStatusList.length; y++) {\r\n                    for (let x = 0; x < this.floorStatusList[y].length; x++) {\r\n                        let image = document.createElement(\"canvas\");\r\n                        let color = null;\r\n                        switch (this.floorStatusList[y][x]) {\r\n                            case \"reservation\":\r\n                                color = \"rgba(0, 255, 100, 0.5)\";\r\n                                break;\r\n                            case \"standby\":\r\n                                color = \"rgba(0, 100, 255, 0.5)\";\r\n                                break;\r\n                            case \"wall\":\r\n                                color = \"rgba(100, 100, 100, 0.5)\";\r\n                                break;\r\n                        }\r\n                        if (color != null) {\r\n                            image.width = GameMasterComponent.gameRule.tileSize.width;\r\n                            image.height = GameMasterComponent.gameRule.tileSize.height;\r\n                            const ctx = image.getContext(\"2d\");\r\n                            ctx.fillStyle = color;\r\n                            ctx.fillRect(0, 0, image.width, image.height);\r\n                            Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                                drawComponent: null,\r\n                                drawPoint: new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * x, GameMasterComponent.gameRule.tileSize.height * y),\r\n                                image: image,\r\n                                sortName: \"guid-bottom\",\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                const tileSize = GameMasterComponent.gameRule.tileSize;\r\n                for (let i = 0; i < this.enemyPoints.length; i++) {\r\n                    if (this.enemyPoints[i].selfDestruction == false) {\r\n                        Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                            drawComponent: null,\r\n                            drawPoint: new Point_1.Point2d((tileSize.width * this.enemyPoints[i].position.x + tileSize.width / 2) - (tileSize.width * 0.8 / 2), (tileSize.height * this.enemyPoints[i].position.y + tileSize.height / 2) - (tileSize.height * 0.8 / 2)),\r\n                            image: ImageBase_1.ImageBase.GetColorImage(new Size_1.Size(tileSize.width * 0.8, tileSize.height * 0.8), new Color_1.Color(255, 50, 50, 0.5)).drawImage,\r\n                            sortName: \"guid-top\",\r\n                        });\r\n                    }\r\n                }\r\n                Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                    drawComponent: null,\r\n                    drawPoint: new Point_1.Point2d((tileSize.width * this.playerController.point.x + tileSize.width / 2) - (tileSize.width * 0.8 / 2), (tileSize.height * this.playerController.point.y + tileSize.height / 2) - (tileSize.height * 0.8 / 2)),\r\n                    image: ImageBase_1.ImageBase.GetColorImage(new Size_1.Size(tileSize.width * 0.8, tileSize.height * 0.8), new Color_1.Color(200, 200, 200, 0.8)).drawImage,\r\n                    sortName: \"guid-top\",\r\n                });\r\n            }\r\n            //一時停止画面を表示するか\r\n            if (InputManager_1.InputManager.instance.getKeyStatus(\"down\", \"Escape\") == true) {\r\n                if (this.pauseDisplay != undefined) {\r\n                    this.pauseDisplay.active = true;\r\n                    this.GameStop();\r\n                }\r\n                else {\r\n                    SceneManager_1.SceneManager.instance.RemoveScene(1);\r\n                }\r\n                return;\r\n            }\r\n            //敵の移動ルートを描画\r\n            for (let i = 0; i < this.enemyPoints.length; i++) {\r\n                const route = this.enemyPoints[i].route;\r\n                if (route != null && this.enemyPoints[i].selfDestruction == false) {\r\n                    let point = new Point_1.Point2d(this.enemyPoints[i].position.x, this.enemyPoints[i].position.y);\r\n                    let routeIndex = this.enemyPoints[i].routeCounter;\r\n                    for (let n = 0; n < this.maxGuidListCount; n++) {\r\n                        let image;\r\n                        switch (route[routeIndex]) {\r\n                            case \"up\":\r\n                                point.y--;\r\n                                if (routeIndex + 1 >= route.length || route[routeIndex + 1] == \"up\" || route[routeIndex + 1] == \"down\") {\r\n                                    image = this.tileImageList[\"guidArrow-down\"];\r\n                                }\r\n                                else if (route[routeIndex + 1] == \"left\") {\r\n                                    image = this.tileImageList[\"guidArrow-downleft\"];\r\n                                }\r\n                                else if (route[routeIndex + 1] == \"right\") {\r\n                                    image = this.tileImageList[\"guidArrow-downright\"];\r\n                                }\r\n                                break;\r\n                            case \"down\":\r\n                                point.y++;\r\n                                if (routeIndex + 1 >= route.length || route[routeIndex + 1] == \"up\" || route[routeIndex + 1] == \"down\") {\r\n                                    image = this.tileImageList[\"guidArrow-up\"];\r\n                                }\r\n                                else if (route[routeIndex + 1] == \"left\") {\r\n                                    image = this.tileImageList[\"guidArrow-upleft\"];\r\n                                }\r\n                                else if (route[routeIndex + 1] == \"right\") {\r\n                                    image = this.tileImageList[\"guidArrow-upright\"];\r\n                                }\r\n                                break;\r\n                            case \"left\":\r\n                                point.x--;\r\n                                if (routeIndex + 1 >= route.length || route[routeIndex + 1] == \"left\" || route[routeIndex + 1] == \"right\") {\r\n                                    image = this.tileImageList[\"guidArrow-right\"];\r\n                                }\r\n                                else if (route[routeIndex + 1] == \"up\") {\r\n                                    image = this.tileImageList[\"guidArrow-upright\"];\r\n                                }\r\n                                else if (route[routeIndex + 1] == \"down\") {\r\n                                    image = this.tileImageList[\"guidArrow-downright\"];\r\n                                }\r\n                                break;\r\n                            case \"right\":\r\n                                point.x++;\r\n                                if (routeIndex + 1 >= route.length || route[routeIndex + 1] == \"left\" || route[routeIndex + 1] == \"right\") {\r\n                                    image = this.tileImageList[\"guidArrow-left\"];\r\n                                }\r\n                                else if (route[routeIndex + 1] == \"up\") {\r\n                                    image = this.tileImageList[\"guidArrow-upleft\"];\r\n                                }\r\n                                else if (route[routeIndex + 1] == \"down\") {\r\n                                    image = this.tileImageList[\"guidArrow-downleft\"];\r\n                                }\r\n                                break;\r\n                        }\r\n                        routeIndex++;\r\n                        if (routeIndex >= route.length) {\r\n                            routeIndex = 0;\r\n                        }\r\n                        if (this.CheckCanMove(point, false, true) == false ||\r\n                            (point.x == this.enemyPoints[i].position.x && point.y == this.enemyPoints[i].position.y)) {\r\n                            break;\r\n                        }\r\n                        (_a = Camera_1.CameraComponent.mainCamera) === null || _a === void 0 ? void 0 : _a.AddPictureData({\r\n                            drawComponent: null,\r\n                            drawPoint: new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * point.x, GameMasterComponent.gameRule.tileSize.height * point.y),\r\n                            image: image.drawImage,\r\n                            sortName: \"guid-bottom\",\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            //プレイヤーの移動方法のマスを表示\r\n            const playerPosition = (_b = this.playerController) === null || _b === void 0 ? void 0 : _b.onFloorNumber;\r\n            if (playerPosition) {\r\n                const floorList_move = (_c = this.playerController) === null || _c === void 0 ? void 0 : _c.GetMoveFloorList();\r\n                const floorList_skill = (_d = this.playerController) === null || _d === void 0 ? void 0 : _d.GetSkillFloorList();\r\n                if (floorList_move && (InputManager_1.InputManager.instance.key_btn3 == \"none\" || InputManager_1.InputManager.instance.key_btn3 == \"end\")) {\r\n                    const startPoint = new Point_1.Point2d(playerPosition.x - (floorList_move[0].length - 1) / 2, playerPosition.y - (floorList_move.length - 1) / 2);\r\n                    for (let y = 0; y < floorList_move.length; y++) {\r\n                        for (let x = 0; x < floorList_move[y].length; x++) {\r\n                            if (floorList_move[y][x] != 0) {\r\n                                (_e = Camera_1.CameraComponent.mainCamera) === null || _e === void 0 ? void 0 : _e.AddPictureData({\r\n                                    \"image\": this.tileImageList[\"scope_move\"].drawImage,\r\n                                    \"sortName\": \"guid-bottom\",\r\n                                    \"drawPoint\": new Point_1.Point2d((startPoint.x + x) * GameMasterComponent.gameRule.tileSize.width, (startPoint.y + y) * GameMasterComponent.gameRule.tileSize.height),\r\n                                    \"drawComponent\": null,\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (floorList_skill && (InputManager_1.InputManager.instance.key_btn3 == \"begin\" || InputManager_1.InputManager.instance.key_btn3 == \"stay\")) {\r\n                    const startPoint = new Point_1.Point2d(playerPosition.x - (floorList_skill[0].length - 1) / 2, playerPosition.y - (floorList_skill.length - 1) / 2);\r\n                    for (let y = 0; y < floorList_skill.length; y++) {\r\n                        for (let x = 0; x < floorList_skill[y].length; x++) {\r\n                            if (floorList_skill[y][x] != 0) {\r\n                                (_f = Camera_1.CameraComponent.mainCamera) === null || _f === void 0 ? void 0 : _f.AddPictureData({\r\n                                    \"image\": this.tileImageList[\"scope_skill\"].drawImage,\r\n                                    \"sortName\": \"guid-bottom\",\r\n                                    \"drawPoint\": new Point_1.Point2d((startPoint.x + x) * GameMasterComponent.gameRule.tileSize.width, (startPoint.y + y) * GameMasterComponent.gameRule.tileSize.height),\r\n                                    \"drawComponent\": null,\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //---\r\n            //敵と重なっているか\r\n            for (let i = 0; i < this.enemyPoints.length; i++) {\r\n                if (this.enemyPoints[i].selfDestruction == true) {\r\n                    continue;\r\n                }\r\n                let rideFloor = undefined;\r\n                for (let n = 0; n < this.floorList.length; n++) {\r\n                    if (this.floorList[n].parentObject == ((_g = this.playerController) === null || _g === void 0 ? void 0 : _g.onFloor)) {\r\n                        rideFloor = this.floorList[n];\r\n                        break;\r\n                    }\r\n                }\r\n                if ((rideFloor == undefined || rideFloor.status == \"stop\") &&\r\n                    ((_h = this.playerController) === null || _h === void 0 ? void 0 : _h.moveStatus) == null &&\r\n                    this.enemyPoints[i].selfDestruction == false &&\r\n                    this.enemyPoints[i].position.x == ((_j = this.playerController) === null || _j === void 0 ? void 0 : _j.point.x) && this.enemyPoints[i].position.y == this.playerController.point.y) {\r\n                    this.GameOver();\r\n                }\r\n            }\r\n            //ルール\r\n            (_k = GameMasterComponent.gameRule) === null || _k === void 0 ? void 0 : _k.Update(this);\r\n            if ((_l = GameMasterComponent.gameRule) === null || _l === void 0 ? void 0 : _l.CheckGameClear(this)) {\r\n                this.GameClear();\r\n            }\r\n        }\r\n        Call() {\r\n            const leftButtonElement = document.getElementById(\"inputButton_left\");\r\n            const rightButtonElement = document.getElementById(\"inputButton_right\");\r\n            const exitButtonElement = document.getElementById(\"inputButton_exit\");\r\n            const onBackButton = document.getElementById(\"inputButton_onBack\");\r\n            if (leftButtonElement != null) {\r\n                leftButtonElement.style.display = \"block\";\r\n            }\r\n            if (rightButtonElement != null) {\r\n                rightButtonElement.style.display = \"block\";\r\n            }\r\n            if (exitButtonElement != null) {\r\n                exitButtonElement.style.display = \"block\";\r\n            }\r\n            if (onBackButton != null) {\r\n                onBackButton.style.display = \"block\";\r\n            }\r\n        }\r\n        Move() {\r\n            const leftButtonElement = document.getElementById(\"inputButton_left\");\r\n            const rightButtonElement = document.getElementById(\"inputButton_right\");\r\n            const exitButtonElement = document.getElementById(\"inputButton_exit\");\r\n            const onBackButton = document.getElementById(\"inputButton_onBack\");\r\n            if (leftButtonElement != null) {\r\n                leftButtonElement.style.display = \"none\";\r\n            }\r\n            if (rightButtonElement != null) {\r\n                rightButtonElement.style.display = \"none\";\r\n            }\r\n            if (exitButtonElement != null) {\r\n                exitButtonElement.style.display = \"none\";\r\n            }\r\n            if (onBackButton != null) {\r\n                onBackButton.style.display = \"block\";\r\n            }\r\n        }\r\n        getTileImage(keyName) {\r\n            if (this.tileImageList[keyName]) {\r\n                return this.tileImageList[keyName].copy;\r\n            }\r\n            else {\r\n                return ImageBase_1.ImageBase.noImage;\r\n            }\r\n        }\r\n        moveTiles(centerPoint, moveFloorList, direction, length, speedParSecend) {\r\n            var _a, _b, _c, _d;\r\n            if (moveFloorList.length == 0 || moveFloorList[0].length == 0) {\r\n                return 0;\r\n            }\r\n            //対象の床を取得\r\n            let targetFloor = [];\r\n            if (moveFloorList.length % 2 == 0 || moveFloorList[0].length % 2 == 0) {\r\n                console.log(\"GameMaster->MoveTiles\\n移動に使うタイルリストの形式が正しくない\");\r\n            }\r\n            const arrayStartPoint = new Point_1.Point2d(centerPoint.x - (moveFloorList.length - 1) / 2, centerPoint.y - (moveFloorList[0].length - 1) / 2);\r\n            for (let y = 0; y < moveFloorList.length; y++) {\r\n                for (let x = 0; x < moveFloorList[y].length; x++) {\r\n                    if (moveFloorList[y][x] != 0) {\r\n                        const targetPoint = new Point_1.Point2d(x + arrayStartPoint.x, y + arrayStartPoint.y);\r\n                        if (targetPoint.y >= 0 &&\r\n                            targetPoint.y <= this.floorStatusList.length - 1 &&\r\n                            targetPoint.x >= 0 &&\r\n                            targetPoint.x <= this.floorStatusList[targetPoint.y].length - 1 &&\r\n                            this.floorStatusList[targetPoint.y][targetPoint.x] == \"standby\" &&\r\n                            !this.CheckPoint_Enemy(targetPoint, \"groundMonster\")) {\r\n                            for (let i = 0; i < this.floorList.length; i++) {\r\n                                const floor = this.floorList[i];\r\n                                if (((_a = floor.pointNumber) === null || _a === void 0 ? void 0 : _a.x) == targetPoint.x && ((_b = floor.pointNumber) === null || _b === void 0 ? void 0 : _b.y) == targetPoint.y && floor.movable == true) {\r\n                                    targetFloor.push(floor);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //---\r\n            //どの位移動できるかを調べる\r\n            let move = length;\r\n            for (let i = 0; i < targetFloor.length; i++) {\r\n                const floor = targetFloor[i];\r\n                if (floor.pointNumber == null) {\r\n                    move = 0;\r\n                    break;\r\n                }\r\n                for (let n = 0; n < length; n++) {\r\n                    let checkPoint = new Point_1.Point2d(floor.pointNumber.x, floor.pointNumber.y);\r\n                    switch (direction) {\r\n                        case \"up\":\r\n                            checkPoint.y -= n + 1;\r\n                            break;\r\n                        case \"down\":\r\n                            checkPoint.y += n + 1;\r\n                            break;\r\n                        case \"left\":\r\n                            checkPoint.x -= n + 1;\r\n                            break;\r\n                        case \"right\":\r\n                            checkPoint.x += n + 1;\r\n                            break;\r\n                    }\r\n                    //調べるポイントが動かす予定の床ならスキップ\r\n                    let flag = false;\r\n                    for (let index = 0; index < targetFloor.length; index++) {\r\n                        if (((_c = targetFloor[index].pointNumber) === null || _c === void 0 ? void 0 : _c.x) == checkPoint.x && ((_d = targetFloor[index].pointNumber) === null || _d === void 0 ? void 0 : _d.y) == checkPoint.y) {\r\n                            flag = true;\r\n                        }\r\n                    }\r\n                    //---\r\n                    //調べるポイントが移動できないなら移動量を減らす\r\n                    if (flag == false &&\r\n                        (checkPoint.y < 0 ||\r\n                            checkPoint.y > this.floorStatusList.length - 1 ||\r\n                            checkPoint.x < 0 ||\r\n                            checkPoint.x > this.floorStatusList[0].length ||\r\n                            this.floorStatusList[checkPoint.y][checkPoint.x] != \"empty\")) {\r\n                        if (move > n) {\r\n                            move = n;\r\n                        }\r\n                        break;\r\n                    }\r\n                    //---\r\n                    //プレイヤーが敵とぶつからないか\r\n                    let playerCheckPoint = new Point_1.Point2d(this.playerController.point.x, this.playerController.point.y);\r\n                    switch (direction) {\r\n                        case \"up\":\r\n                            playerCheckPoint.y--;\r\n                            break;\r\n                        case \"down\":\r\n                            playerCheckPoint.y++;\r\n                            break;\r\n                        case \"left\":\r\n                            playerCheckPoint.x--;\r\n                            break;\r\n                        case \"right\":\r\n                            playerCheckPoint.x++;\r\n                            break;\r\n                    }\r\n                    if (this.CheckPoint_Enemy(playerCheckPoint, \"all\") == true) {\r\n                        if (move > n) {\r\n                            move = n;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (move == 0 || targetFloor.length == 0) {\r\n                return 0;\r\n            }\r\n            //---\r\n            this.Action();\r\n            //書き換え・指示\r\n            //-移動前のマスのステータスを[empty]にする\r\n            for (let i = 0; i < targetFloor.length; i++) {\r\n                const floor = targetFloor[i];\r\n                if (floor.pointNumber == null) {\r\n                    continue;\r\n                }\r\n                this.floorStatusList[floor.pointNumber.y][floor.pointNumber.x] = \"empty\";\r\n            }\r\n            //-移動後のマスのステータスを[reservation]にする\r\n            for (let i = 0; i < targetFloor.length; i++) {\r\n                //floorStatusListの情報を修正する\r\n                const floor = targetFloor[i];\r\n                if (floor.pointNumber == null) {\r\n                    continue;\r\n                }\r\n                let checkPoint = new Point_1.Point2d(floor.pointNumber.x, floor.pointNumber.y);\r\n                switch (direction) {\r\n                    case \"up\":\r\n                        checkPoint.y -= move;\r\n                        break;\r\n                    case \"down\":\r\n                        checkPoint.y += move;\r\n                        break;\r\n                    case \"left\":\r\n                        checkPoint.x -= move;\r\n                        break;\r\n                    case \"right\":\r\n                        checkPoint.x += move;\r\n                        break;\r\n                }\r\n                this.floorStatusList[checkPoint.y][checkPoint.x] = \"reservation\";\r\n                //---\r\n                //床を移動させる\r\n                floor.moveFloor(direction, move, speedParSecend);\r\n            }\r\n            //---\r\n            switch (direction) {\r\n                case \"up\":\r\n                    this.playerController.point.y -= move;\r\n                    break;\r\n                case \"down\":\r\n                    this.playerController.point.y += move;\r\n                    break;\r\n                case \"left\":\r\n                    this.playerController.point.x -= move;\r\n                    break;\r\n                case \"right\":\r\n                    this.playerController.point.x += move;\r\n                    break;\r\n            }\r\n            return move;\r\n        }\r\n        AddEnemy(enemy) {\r\n            var _a, _b;\r\n            this.enemys.push(enemy);\r\n            this.enemyPoints.push(enemy.GetComponent(Enemy_1.EnemyComponent));\r\n            (_b = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.parentScene) === null || _b === void 0 ? void 0 : _b.AddObject(enemy);\r\n        }\r\n        CreateEnemy({ point, animations, animationLoopSpeed, enemyDirection, moveSpeed, enemyType, route }) {\r\n            if (this.setUpFlag == true) {\r\n                const enemy = new Enemy_2.EnemyObject(\"enemy\", {\r\n                    aabb: {\r\n                        type: Aabb_1.AabbComponent,\r\n                        size: GameMasterComponent.gameRule.tileSize,\r\n                    },\r\n                    anime: {\r\n                        type: Animation_1.AnimationComponent,\r\n                        animes: animations,\r\n                        loop: true,\r\n                        loopTime_second: animationLoopSpeed,\r\n                    },\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: enemyType,\r\n                        route: route,\r\n                        position: point,\r\n                        speed: moveSpeed,\r\n                        gameMasterObjName: this.parentObject.name,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(GameMasterComponent.gameRule.tileSize.width * point.x, GameMasterComponent.gameRule.tileSize.height * point.x),\r\n                        size: GameMasterComponent.gameRule.tileSize,\r\n                    },\r\n                });\r\n                const enemyComponent = enemy.GetComponent(Enemy_1.EnemyComponent);\r\n                enemyComponent.direction = enemyDirection;\r\n                this.AddEnemy(enemy);\r\n            }\r\n        }\r\n        DeleteEnemy_Point(point) {\r\n            for (let i = 0; i < this.enemyPoints.length; i++) {\r\n                if (this.enemyPoints[i].position.x == point.x && this.enemyPoints[i].position.y == point.y) {\r\n                    this.enemyPoints[i].selfDestruction = true;\r\n                }\r\n            }\r\n        }\r\n        EnemyMove() {\r\n            this.EnemyFunction((enemy) => {\r\n                enemy.Move();\r\n            });\r\n        }\r\n        PointSet() {\r\n            var _a;\r\n            (_a = this.playerController) === null || _a === void 0 ? void 0 : _a.setPosition();\r\n            for (let i = 0; i < this.enemyPoints.length; i++) {\r\n                this.enemyPoints[i].setPosition();\r\n            }\r\n            for (let i = 0; i < this.floorList.length; i++) {\r\n                this.floorList[i].setPosition();\r\n            }\r\n        }\r\n        Action() {\r\n            this.EnemyFunction((enemy) => {\r\n                enemy.SaveTurnData();\r\n                enemy.Move();\r\n            });\r\n            for (let i = 0; i < this.floorList.length; i++) {\r\n                this.floorList[i].SaveTurnData();\r\n            }\r\n            for (let i = 0; i < this.forts.length; i++) {\r\n                const fort = this.forts[i].GetComponent(Fort_1.FortComponent);\r\n                fort.Action();\r\n            }\r\n            this.numberOfMoves++;\r\n        }\r\n        OnBack() {\r\n            var _a;\r\n            if (this.numberOfMoves == 0) {\r\n                return;\r\n            }\r\n            this.numberOfMoves--;\r\n            for (let i = 0; i < this.enemyPoints.length; i++) {\r\n                this.enemyPoints[i].OnBack();\r\n            }\r\n            for (let i = 0; i < this.floorList.length; i++) {\r\n                this.floorList[i].OnBack();\r\n            }\r\n            for (let i = 0; i < this.forts.length; i++) {\r\n                const fort = this.forts[i].GetComponent(Fort_1.FortComponent);\r\n                fort.OnBack();\r\n            }\r\n            (_a = this.playerController) === null || _a === void 0 ? void 0 : _a.OnBack();\r\n        }\r\n        CheckPoint_Enemy(point, type) {\r\n            let flag = false;\r\n            this.EnemyFunction((enemy) => {\r\n                if ((type == \"all\" || enemy.type == type) &&\r\n                    enemy.selfDestruction == false &&\r\n                    enemy.position.x == point.x && enemy.position.y == point.y) {\r\n                    flag = true;\r\n                }\r\n            });\r\n            return flag;\r\n        }\r\n        EnemyFunction(func) {\r\n            for (let i = 0; i < this.enemys.length; i++) {\r\n                const checkEnemyComponent = this.enemys[i].GetComponent(Enemy_1.EnemyComponent);\r\n                if (checkEnemyComponent != null) {\r\n                    const enemyComponent = checkEnemyComponent;\r\n                    func(enemyComponent);\r\n                }\r\n            }\r\n        }\r\n        CheckThereTile(centerPoint, tileList) {\r\n            let flag = true;\r\n            const arrayStartPoint = new Point_1.Point2d(centerPoint.x - (tileList.length - 1) / 2, centerPoint.y - (tileList[0].length - 1) / 2);\r\n            for (let y = 0; y < tileList.length; y++) {\r\n                for (let x = 0; x < tileList[y].length; x++) {\r\n                    if (tileList[y][x] == 1) {\r\n                        const targetPoint = new Point_1.Point2d(x + arrayStartPoint.x, y + arrayStartPoint.y);\r\n                        if (!(targetPoint.y >= 0 &&\r\n                            targetPoint.y <= this.floorStatusList.length - 1 &&\r\n                            targetPoint.x >= 0 &&\r\n                            targetPoint.x <= this.floorStatusList[targetPoint.y].length - 1 &&\r\n                            this.CheckPoint_Enemy(targetPoint, \"groundMonster\") == false &&\r\n                            this.floorStatusList[targetPoint.y][targetPoint.x] == \"standby\")) {\r\n                            flag = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return flag;\r\n        }\r\n        CheckCanMove(point, NeedAFloor, enemy) {\r\n            var _a;\r\n            //場外でないか\r\n            if (point.y < 0 || this.floorStatusList.length <= point.y || point.x < 0 || this.floorStatusList[0].length <= point.x) {\r\n                //console.log(\"場外\");\r\n                return false;\r\n            }\r\n            //床が移動可能か\r\n            if (NeedAFloor == true && this.floorStatusList[point.y][point.x] != \"standby\") {\r\n                //console.log(\"床がない\");\r\n                return false;\r\n            }\r\n            else if (this.floorStatusList[point.y][point.x] == \"wall\") {\r\n                //console.log(\"先が壁\");\r\n                return false;\r\n            }\r\n            //敵キャラと当たるか\r\n            for (let i = 0; i < this.enemyPoints.length; i++) {\r\n                if (this.enemyPoints[i].selfDestruction == false && this.enemyPoints[i].position.x == point.x && this.enemyPoints[i].position.y == point.y) {\r\n                    //console.log(\"敵と衝突\");\r\n                    return false;\r\n                }\r\n            }\r\n            //プレイヤーと当たるか\r\n            if (enemy == true) {\r\n                return true;\r\n            }\r\n            if (point.x == ((_a = this.playerController) === null || _a === void 0 ? void 0 : _a.point.x) && point.y == this.playerController.point.y) {\r\n                //console.log(\"プレイヤーと衝突\");\r\n                return false;\r\n            }\r\n            //移動可能\r\n            return true;\r\n        }\r\n        GameStop() {\r\n            if (this.playerController != null) {\r\n                this.playerController.active = false;\r\n            }\r\n            this.active = false;\r\n        }\r\n        GameRestart() {\r\n            if (this.playerController != null) {\r\n                this.playerController.active = true;\r\n            }\r\n            this.active = true;\r\n        }\r\n        SetResultDisplay(text) {\r\n            var _a, _b, _c, _d, _e, _f, _g;\r\n            this.GameStop();\r\n            const canvas = document.createElement(\"canvas\");\r\n            canvas.width = ((_b = (_a = Camera_1.CameraComponent.mainCamera) === null || _a === void 0 ? void 0 : _a.transform) === null || _b === void 0 ? void 0 : _b.size.width) ? Camera_1.CameraComponent.mainCamera.transform.size.width : 1;\r\n            canvas.height = ((_d = (_c = Camera_1.CameraComponent.mainCamera) === null || _c === void 0 ? void 0 : _c.transform) === null || _d === void 0 ? void 0 : _d.size.height) ? Camera_1.CameraComponent.mainCamera.transform.size.height : 1;\r\n            const cameraSize = ((_e = Camera_1.CameraComponent.mainCamera) === null || _e === void 0 ? void 0 : _e.transform) ? Camera_1.CameraComponent.mainCamera.transform.size : new Size_1.Size(1, 1);\r\n            const background = new ImageDisplay_1.ImageDisplayObject(\"background\", {\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    size: cameraSize,\r\n                    position: new Point_1.Point2d(0, 0),\r\n                    anchor: new Point_1.Point2d(0, 0),\r\n                    absolute: true,\r\n                },\r\n                draw: {\r\n                    type: Draw_1.DrawComponent,\r\n                    sortName: \"UI\",\r\n                    image: new ImageBase_1.ImageBase(canvas),\r\n                    effect: [\r\n                        new DrawEffect_1.DrawEffect_color(2, new Color_1.Color(50, 50, 50, 0), new Color_1.Color(50, 50, 50, 1.0)),\r\n                    ]\r\n                },\r\n            });\r\n            const result = new Reslut_1.ResultObject(\"resultDisplay\", {\r\n                draw: {\r\n                    type: Draw_1.DrawComponent,\r\n                    sortName: \"UI\",\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                },\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    position: new Point_1.Point2d(cameraSize.width / 2, cameraSize.height / 2),\r\n                    size: new Size_1.Size(500, 350),\r\n                    anchor: new Point_1.Point2d(0.5, 0.5),\r\n                    absolute: true,\r\n                },\r\n            });\r\n            //テキストを設定する\r\n            const textObj = result.GetChildObject(\"resultText\");\r\n            const textObj_text = textObj === null || textObj === void 0 ? void 0 : textObj.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            textObj_text.text = text;\r\n            (_g = (_f = this.parentObject) === null || _f === void 0 ? void 0 : _f.parentScene) === null || _g === void 0 ? void 0 : _g.AddObjects([\r\n                background,\r\n                result,\r\n            ]);\r\n        }\r\n        GameClear() {\r\n            //前の情報を取得\r\n            let beforeScore = 0;\r\n            if (SaveData_1.SaveData.instance.scoreList[GameMasterComponent.gameRule.name] != undefined) {\r\n                beforeScore = SaveData_1.SaveData.instance.scoreList[GameMasterComponent.gameRule.name].process;\r\n            }\r\n            SaveData_1.SaveData.instance.AddScore(GameMasterComponent.gameRule.name, this.numberOfMoves);\r\n            const text = `ゲームクリア\\n` +\r\n                `スコア:${this.numberOfMoves}${this.numberOfMoves < beforeScore ? \"[新記録]\" : \"\"}\\n`;\r\n            this.SetResultDisplay(text);\r\n        }\r\n        GameOver() {\r\n            this.SetResultDisplay(\"ゲームオーバー\");\r\n        }\r\n    }\r\n    exports.GameMasterComponent = GameMasterComponent;\r\n    //デバッグ\r\n    GameMasterComponent.drawFloorStatus = false;\r\n    //ルール(設定用)\r\n    GameMasterComponent.gameRule = GameRuleList_1.gameRuleList[0];\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameMaster.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/GameMaster.js?");

/***/ }),

/***/ "./JavaScript/Component/Grounding.js":
/*!*******************************************!*\
  !*** ./JavaScript/Component/Grounding.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Function/Math */ \"./JavaScript/GameBase/Function/Math.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ./PlayerController */ \"./JavaScript/Component/PlayerController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, Math_1, GameComponentBase_1, Aabb_1, PlayerController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GroundingComponent = void 0;\r\n    class GroundingComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.groundTagList = [];\r\n            this.aabb = null;\r\n            this.playerController = null;\r\n            this.beforePoint = {\r\n                \"upLeft\": new Point_1.Point2d(0, 0),\r\n                \"upRight\": new Point_1.Point2d(0, 0),\r\n                \"downRight\": new Point_1.Point2d(0, 0),\r\n                \"downLeft\": new Point_1.Point2d(0, 0),\r\n            };\r\n            this.radingFloor = null;\r\n        }\r\n        Setup(init) {\r\n            var _a, _b;\r\n            this.setUpFlag = true;\r\n            const aabb = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Aabb_1.AabbComponent);\r\n            const playerController = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.GetComponent(PlayerController_1.PlayerControllerComponent);\r\n            this.aabb = aabb;\r\n            this.playerController = playerController;\r\n            this.groundTagList = init.groundTagList;\r\n        }\r\n        Update() {\r\n            var _a, _b;\r\n            if (!((_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.parentScene) || !this.aabb) {\r\n                return;\r\n            }\r\n            //-床オブジェクトを取得\r\n            let groundList = [];\r\n            if (((_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) != null) {\r\n                for (let i = 0; i < this.parentObject.parentScene.objects.length; i++) {\r\n                    const obj = this.parentObject.parentScene.objects[i];\r\n                    for (let n = 0; n < this.groundTagList.length; n++) {\r\n                        if (obj.tag.includes(this.groundTagList[n])) {\r\n                            const component = obj.GetComponent(Aabb_1.AabbComponent);\r\n                            if (component) {\r\n                                const aabb = component;\r\n                                groundList.push(aabb);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let bottomGround = null;\r\n            //自分がいる床を取得\r\n            for (let i = 0; i < groundList.length; i++) {\r\n                const aabb = groundList[i];\r\n                if (aabb.GlobalPoint_up <= this.aabb.GlobalCenterPoint.y &&\r\n                    aabb.GlobalPoint_down >= this.aabb.GlobalCenterPoint.y &&\r\n                    aabb.GlobalPoint_left <= this.aabb.GlobalCenterPoint.x &&\r\n                    aabb.GlobalPoint_right >= this.aabb.GlobalCenterPoint.x) {\r\n                    bottomGround = aabb;\r\n                }\r\n            }\r\n            let groundUpdateFlag = true;\r\n            let groundOverFlag = false;\r\n            //-今床の上にいるか\r\n            for (let i = 1; i <= 4; i++) {\r\n                //各頂点を順番に取得(左上,右上,右下,左下)\r\n                let targetPoint;\r\n                let beforeTargetPoint;\r\n                switch (i) {\r\n                    case 1: //左上\r\n                        targetPoint = new Point_1.Point2d(this.aabb.GlobalPoint_left, this.aabb.GlobalPoint_up);\r\n                        beforeTargetPoint = this.beforePoint[\"upLeft\"];\r\n                        break;\r\n                    case 2: //右上\r\n                        targetPoint = new Point_1.Point2d(this.aabb.GlobalPoint_right, this.aabb.GlobalPoint_up);\r\n                        beforeTargetPoint = this.beforePoint[\"upRight\"];\r\n                        break;\r\n                    case 3: //右下\r\n                        targetPoint = new Point_1.Point2d(this.aabb.GlobalPoint_right, this.aabb.GlobalPoint_down);\r\n                        beforeTargetPoint = this.beforePoint[\"downRight\"];\r\n                        break;\r\n                    case 4: //左下\r\n                        targetPoint = new Point_1.Point2d(this.aabb.GlobalPoint_left, this.aabb.GlobalPoint_down);\r\n                        beforeTargetPoint = this.beforePoint[\"downLeft\"];\r\n                        break;\r\n                    default: //左上\r\n                        targetPoint = new Point_1.Point2d(this.aabb.GlobalPoint_left, this.aabb.GlobalPoint_up);\r\n                        beforeTargetPoint = this.beforePoint[\"upLeft\"];\r\n                        break;\r\n                }\r\n                //頂点が外に出ていないかを調べる\r\n                let flag = false; //true=出ていない\r\n                for (let i = 0; i < groundList.length; i++) {\r\n                    const aabb = groundList[i];\r\n                    if (aabb.GlobalPoint_left <= targetPoint.x && targetPoint.x <= aabb.GlobalPoint_right &&\r\n                        aabb.GlobalPoint_up <= targetPoint.y && targetPoint.y <= aabb.GlobalPoint_down) {\r\n                        flag = true;\r\n                    }\r\n                }\r\n                if (flag) {\r\n                    groundUpdateFlag = false;\r\n                    continue;\r\n                }\r\n                groundOverFlag = true;\r\n                //頂点を基準に押し戻す\r\n                //-方向\r\n                const direction = new Point_1.Point2d(0, 0);\r\n                const sa = new Point_1.Point2d(beforeTargetPoint.x - targetPoint.x, beforeTargetPoint.y - targetPoint.y);\r\n                if (sa.x == 0) {\r\n                    direction.x = 0;\r\n                }\r\n                else if (sa.x > 0) {\r\n                    direction.x = 1;\r\n                }\r\n                else {\r\n                    direction.x = -1;\r\n                }\r\n                if (sa.y == 0) {\r\n                    direction.y = 0;\r\n                }\r\n                else if (sa.y > 0) {\r\n                    direction.y = 1;\r\n                }\r\n                else {\r\n                    direction.y = -1;\r\n                }\r\n                //-押し戻す先のオブジェクトを検索\r\n                let overlapFloorsX = null;\r\n                let overlapFloorsY = null;\r\n                for (let i = 0; i < groundList.length; i++) {\r\n                    const targetGround = groundList[i];\r\n                    //x軸\r\n                    if ((direction.x == 1 && targetGround.GlobalPoint_left >= targetPoint.x) ||\r\n                        (direction.x == -1 && targetGround.GlobalPoint_right <= targetPoint.x)) {\r\n                        if (targetGround.GlobalPoint_up < targetPoint.y && targetPoint.y < targetGround.GlobalPoint_down) {\r\n                            if (overlapFloorsX == null) {\r\n                                overlapFloorsX = direction.x == 1 ? targetGround.GlobalPoint_left : targetGround.GlobalPoint_right;\r\n                            }\r\n                            else {\r\n                                if ((direction.x == 1 && (0, Math_1.GetNumberBetween)(targetPoint.x, targetGround.GlobalPoint_left) < (0, Math_1.GetNumberBetween)(targetPoint.x, overlapFloorsX)) ||\r\n                                    (direction.x == -1 && (0, Math_1.GetNumberBetween)(targetPoint.x, targetGround.GlobalPoint_right) < (0, Math_1.GetNumberBetween)(targetPoint.x, overlapFloorsX))) {\r\n                                    overlapFloorsX = direction.x == 1 ? targetGround.GlobalPoint_left : targetGround.GlobalPoint_right;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //y軸\r\n                    if ((direction.y == 1 && targetGround.GlobalPoint_up >= targetPoint.y) ||\r\n                        (direction.y == -1 && targetGround.GlobalPoint_down <= targetPoint.y)) {\r\n                        if (targetGround.GlobalPoint_left < targetPoint.x && targetPoint.x < targetGround.GlobalPoint_right) {\r\n                            if (overlapFloorsY == null) {\r\n                                overlapFloorsY = direction.y == 1 ? targetGround.GlobalPoint_up : targetGround.GlobalPoint_down;\r\n                            }\r\n                            else {\r\n                                if (direction.y == 1 && (0, Math_1.GetNumberBetween)(targetPoint.y, targetGround.GlobalPoint_up) < (0, Math_1.GetNumberBetween)(targetPoint.y, overlapFloorsY) ||\r\n                                    direction.y == -1 && (0, Math_1.GetNumberBetween)(targetPoint.y, targetGround.GlobalPoint_down) < (0, Math_1.GetNumberBetween)(targetPoint.y, overlapFloorsY)) {\r\n                                    overlapFloorsY = direction.y == 1 ? targetGround.GlobalPoint_up : targetGround.GlobalPoint_down;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (overlapFloorsX != null &&\r\n                    (0, Math_1.GetNumberBetween)(targetPoint.x, beforeTargetPoint.x) < (0, Math_1.GetNumberBetween)(targetPoint.x, overlapFloorsX)) {\r\n                    overlapFloorsX = null;\r\n                }\r\n                if (overlapFloorsY != null &&\r\n                    (0, Math_1.GetNumberBetween)(targetPoint.y, beforeTargetPoint.y) < (0, Math_1.GetNumberBetween)(targetPoint.y, overlapFloorsY)) {\r\n                    overlapFloorsY = null;\r\n                }\r\n                //-押し戻し方を決める\r\n                if ((overlapFloorsX != null && overlapFloorsY == null) ||\r\n                    ((overlapFloorsX && overlapFloorsY) &&\r\n                        ((0, Math_1.GetNumberBetween)(targetPoint.x, overlapFloorsX) > (0, Math_1.GetNumberBetween)(targetPoint.y, overlapFloorsY)))) {\r\n                    switch (i) {\r\n                        case 1:\r\n                        case 4:\r\n                            this.aabb.GlobalPoint_left = overlapFloorsX;\r\n                            break;\r\n                        case 2:\r\n                        case 3:\r\n                            this.aabb.GlobalPoint_right = overlapFloorsX;\r\n                            break;\r\n                    }\r\n                }\r\n                else if ((overlapFloorsX == null && overlapFloorsY != null) ||\r\n                    (overlapFloorsX && overlapFloorsY)) {\r\n                    switch (i) {\r\n                        case 1:\r\n                        case 2:\r\n                            this.aabb.GlobalPoint_up = overlapFloorsY;\r\n                            break;\r\n                        case 3:\r\n                        case 4:\r\n                            this.aabb.GlobalPoint_down = overlapFloorsY;\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.radingFloor) {\r\n                        switch (i) {\r\n                            case 1:\r\n                                this.aabb.GlobalPoint_up = this.radingFloor.GlobalPoint_up;\r\n                                this.aabb.GlobalPoint_left = this.radingFloor.GlobalPoint_left;\r\n                                break;\r\n                            case 2:\r\n                                this.aabb.GlobalPoint_up = this.radingFloor.GlobalPoint_up;\r\n                                this.aabb.GlobalPoint_right = this.radingFloor.GlobalPoint_right;\r\n                                break;\r\n                            case 3:\r\n                                this.aabb.GlobalPoint_down = this.radingFloor.GlobalPoint_down;\r\n                                this.aabb.GlobalPoint_right = this.radingFloor.GlobalPoint_right;\r\n                                break;\r\n                            case 4:\r\n                                this.aabb.GlobalPoint_down = this.radingFloor.GlobalPoint_down;\r\n                                this.aabb.GlobalPoint_left = this.radingFloor.GlobalPoint_left;\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (groundUpdateFlag && bottomGround != null) {\r\n                this.radingFloor = bottomGround;\r\n            }\r\n            if (groundOverFlag == true) {\r\n                this.playerController.setPosition();\r\n            }\r\n            //前の位置を取得\r\n            this.beforePoint[\"upLeft\"] = new Point_1.Point2d(this.aabb.GlobalPoint_left, this.aabb.GlobalPoint_up).copy;\r\n            this.beforePoint[\"upRight\"] = new Point_1.Point2d(this.aabb.GlobalPoint_right, this.aabb.GlobalPoint_up).copy;\r\n            this.beforePoint[\"downRight\"] = new Point_1.Point2d(this.aabb.GlobalPoint_right, this.aabb.GlobalPoint_down).copy;\r\n            this.beforePoint[\"downLeft\"] = new Point_1.Point2d(this.aabb.GlobalPoint_left, this.aabb.GlobalPoint_down).copy;\r\n        }\r\n    }\r\n    exports.GroundingComponent = GroundingComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Grounding.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/Grounding.js?");

/***/ }),

/***/ "./JavaScript/Component/OneAnimation.js":
/*!**********************************************!*\
  !*** ./JavaScript/Component/OneAnimation.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Animation_1, GameComponentBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.OneAnimationComponent = void 0;\r\n    class OneAnimationComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            var _a;\r\n            this.setUpFlag = true;\r\n            this.anime = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Animation_1.AnimationComponent);\r\n            this.anime.SetAnimation(init.animation);\r\n            this.anime.loopTime_second = init.animationSecond;\r\n        }\r\n        Update() {\r\n            var _a, _b, _c;\r\n            if (((_a = this.anime) === null || _a === void 0 ? void 0 : _a.loopFlag) == false) {\r\n                (_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.DeleteObject(this.parentObject);\r\n            }\r\n        }\r\n    }\r\n    exports.OneAnimationComponent = OneAnimationComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=OneAnimation.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/OneAnimation.js?");

/***/ }),

/***/ "./JavaScript/Component/PlayerController.js":
/*!**************************************************!*\
  !*** ./JavaScript/Component/PlayerController.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/System/InputManager */ \"./JavaScript/GameBase/System/InputManager.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ./Floor */ \"./JavaScript/Component/Floor.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ./GameMaster */ \"./JavaScript/Component/GameMaster.js\"), __webpack_require__(/*! ../Object/OneAnimation */ \"./JavaScript/Object/OneAnimation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ./OneAnimation */ \"./JavaScript/Component/OneAnimation.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../GameBase/Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, GameComponentBase_1, InputManager_1, Aabb_1, Floor_1, Transform_1, Animation_1, GameMaster_1, OneAnimation_1, Draw_1, OneAnimation_2, ImageBase_1, GlobalData_1, ArrayController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.PlayerControllerComponent = void 0;\r\n    class PlayerControllerComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            //位置・サイズ・速度\r\n            this.point = new Point_1.Point2d(0, 0);\r\n            this.aabb = new Aabb_1.AabbComponent();\r\n            this.moveSpeed = 0.5;\r\n            this.moveStatus = null;\r\n            //乗っている床\r\n            this.onFloor = null;\r\n            this.onNumber = null;\r\n            //スキル\r\n            this.movePattern = [];\r\n            this.skills = [];\r\n            this.direction = \"right\";\r\n            this.movePattern_count = 0;\r\n            this.skills_count = 0;\r\n            this.powerUpList = [];\r\n            //他\r\n            this.gameMaster = null;\r\n            this.turnDatas = [];\r\n        }\r\n        get onFloorNumber() {\r\n            return this.onNumber;\r\n        }\r\n        Setup(init) {\r\n            var _a, _b, _c, _d;\r\n            this.setUpFlag = true;\r\n            const aabb = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Aabb_1.AabbComponent);\r\n            const animation = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.GetComponent(Animation_1.AnimationComponent);\r\n            this.aabb = aabb;\r\n            this.animation = animation;\r\n            const gameMasterObj = (_d = (_c = this.parentObject) === null || _c === void 0 ? void 0 : _c.parentScene) === null || _d === void 0 ? void 0 : _d.GetObject(init.gameMasterObjName);\r\n            const gameMaster = gameMasterObj === null || gameMasterObj === void 0 ? void 0 : gameMasterObj.GetComponent(GameMaster_1.GameMasterComponent);\r\n            this.gameMaster = gameMaster;\r\n            this.point = init.point;\r\n            if (init.moveMethod)\r\n                this.movePattern = init.moveMethod;\r\n            if (init.moveSpeed)\r\n                this.moveSpeed = init.moveSpeed;\r\n            if (init.skills)\r\n                this.skills = init.skills;\r\n        }\r\n        Update() {\r\n            var _a, _b, _c, _d, _e, _f, _g, _h;\r\n            //1つ戻す\r\n            if (InputManager_1.InputManager.instance.key_btn5 == \"begin\") {\r\n                (_a = this.gameMaster) === null || _a === void 0 ? void 0 : _a.OnBack();\r\n            }\r\n            //スキル・移動方法切り替え\r\n            if (InputManager_1.InputManager.instance.key_btn1 == \"begin\") {\r\n                this.movePattern_count++;\r\n                if (this.movePattern_count >= this.movePattern.length) {\r\n                    this.movePattern_count = 0;\r\n                }\r\n            }\r\n            if (InputManager_1.InputManager.instance.key_btn2 == \"begin\") {\r\n                this.skills_count++;\r\n                if (this.skills_count >= this.skills.length) {\r\n                    this.skills_count = 0;\r\n                }\r\n            }\r\n            //スキルor移動\r\n            if (InputManager_1.InputManager.instance.key_active == \"begin\" && this.gameMaster != null) {\r\n                if (InputManager_1.InputManager.instance.key_btn3 == \"begin\" || InputManager_1.InputManager.instance.key_btn3 == \"stay\") {\r\n                    //スキル\r\n                    const skill = this.GetSkill();\r\n                    if (this.onFloorNumber != null && this.onFloorNumber != undefined && skill != null && skill != undefined) {\r\n                        if (this.gameMaster.CheckThereTile(this.onFloorNumber, skill.getFormation(this.direction))) {\r\n                            this.SaveTurnData();\r\n                            skill.skill(this);\r\n                            this.gameMaster.Action();\r\n                            this.gameMaster.PointSet();\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    //移動\r\n                    const moveMethod = this.GetMoveMethod();\r\n                    if (this.moveStatus == null && this.onFloorNumber != null && moveMethod && this.CheckMobileFloor(this.onFloorNumber.x, this.onFloorNumber.y)) {\r\n                        const powerUp_pushSpeed = this.GetPowerUpStatus(\"pushSpeed\") != null ? this.GetPowerUpStatus(\"pushSpeed\").value : 3;\r\n                        const powerUp_pushPower = this.GetPowerUpStatus(\"pushPower\") != null ? this.GetPowerUpStatus(\"pushPower\").value : 1;\r\n                        this.SaveTurnData();\r\n                        const moveLength = this.gameMaster.moveTiles(this.onFloorNumber, moveMethod.getFormation(this.direction), this.direction, powerUp_pushPower, powerUp_pushSpeed);\r\n                        if (moveLength > 0) {\r\n                            //パワーアップ状態の更新\r\n                            let powerUpList = [];\r\n                            for (let i = 0; i < this.powerUpList.length; i++) {\r\n                                this.powerUpList[i].limitCount--;\r\n                                if (this.powerUpList[i].limitCount > 0) {\r\n                                    powerUpList.push(this.powerUpList[i]);\r\n                                }\r\n                            }\r\n                            this.powerUpList = powerUpList;\r\n                        }\r\n                        else {\r\n                            this.turnDatas = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.turnDatas, this.turnDatas[this.turnDatas.length - 1]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //乗っているものを取得\r\n            this.onFloor = null;\r\n            this.onNumber = null;\r\n            if ((_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) {\r\n                for (let i = 0; i < ((_d = (_c = this.parentObject) === null || _c === void 0 ? void 0 : _c.parentScene) === null || _d === void 0 ? void 0 : _d.objects.length); i++) {\r\n                    const obj = this.parentObject.parentScene.objects[i];\r\n                    const component = obj.GetComponent(Aabb_1.AabbComponent);\r\n                    const component2 = obj.GetComponent(Floor_1.FloorComponent);\r\n                    if (component && component2) {\r\n                        const aabb = component;\r\n                        const floor = component2;\r\n                        if (aabb.GlobalPoint_up < this.aabb.GlobalCenterPoint.y && this.aabb.GlobalCenterPoint.y < aabb.GlobalPoint_down &&\r\n                            aabb.GlobalPoint_left < this.aabb.GlobalCenterPoint.x && this.aabb.GlobalCenterPoint.x < aabb.GlobalPoint_right) {\r\n                            this.onFloor = obj;\r\n                            if (floor.pointNumber) {\r\n                                this.onNumber = floor.pointNumber;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //移動\r\n            if (this.onFloorNumber == null ||\r\n                this.gameMaster.floorStatusList[this.onFloorNumber.y][this.onFloorNumber.x] == \"standby\") {\r\n                if (this.moveStatus != null) {\r\n                    const powerUp = this.GetPowerUpStatus(\"moveSpeed\") != null ? this.GetPowerUpStatus(\"moveSpeed\").value : 0;\r\n                    switch (this.moveStatus.direction) {\r\n                        case \"up\":\r\n                            this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x, this.aabb.GlobalCenterPoint.y - (this.moveStatus.speed + powerUp));\r\n                            if (this.aabb.GlobalCenterPoint.y <= this.moveStatus.line) {\r\n                                (_e = this.gameMaster) === null || _e === void 0 ? void 0 : _e.PointSet();\r\n                            }\r\n                            break;\r\n                        case \"down\":\r\n                            this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x, this.aabb.GlobalCenterPoint.y + (this.moveStatus.speed + powerUp));\r\n                            if (this.aabb.GlobalCenterPoint.y >= this.moveStatus.line) {\r\n                                (_f = this.gameMaster) === null || _f === void 0 ? void 0 : _f.PointSet();\r\n                            }\r\n                            break;\r\n                        case \"left\":\r\n                            this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x - (this.moveStatus.speed + powerUp), this.aabb.GlobalCenterPoint.y);\r\n                            if (this.aabb.GlobalCenterPoint.x <= this.moveStatus.line) {\r\n                                (_g = this.gameMaster) === null || _g === void 0 ? void 0 : _g.PointSet();\r\n                            }\r\n                            break;\r\n                        case \"right\":\r\n                            this.aabb.GlobalCenterPoint = new Point_1.Point2d(this.aabb.GlobalCenterPoint.x + (this.moveStatus.speed + powerUp), this.aabb.GlobalCenterPoint.y);\r\n                            if (this.aabb.GlobalCenterPoint.x >= this.moveStatus.line) {\r\n                                (_h = this.gameMaster) === null || _h === void 0 ? void 0 : _h.PointSet();\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            //四方の入力(向き・移動-歩)\r\n            if (InputManager_1.InputManager.instance.up == true) {\r\n                this.Work(\"up\");\r\n            }\r\n            else if (InputManager_1.InputManager.instance.down == true) {\r\n                this.Work(\"down\");\r\n            }\r\n            else if (InputManager_1.InputManager.instance.left) {\r\n                this.Work(\"left\");\r\n            }\r\n            else if (InputManager_1.InputManager.instance.right) {\r\n                this.Work(\"right\");\r\n            }\r\n            //アニメーションの更新-止まる\r\n            if (this.animation != undefined && this.moveStatus == null) {\r\n                this.animation.ChangeAnime(this.direction + \"-stand\");\r\n            }\r\n        }\r\n        //移動\r\n        Work(direction) {\r\n            var _a, _b, _c;\r\n            //方向変更\r\n            this.direction = direction;\r\n            //方向から加算する値を決める\r\n            let addPoint;\r\n            switch (direction) {\r\n                case \"up\":\r\n                    addPoint = new Point_1.Point2d(0, -1);\r\n                    break;\r\n                case \"down\":\r\n                    addPoint = new Point_1.Point2d(0, 1);\r\n                    break;\r\n                case \"left\":\r\n                    addPoint = new Point_1.Point2d(-1, 0);\r\n                    break;\r\n                case \"right\":\r\n                    addPoint = new Point_1.Point2d(1, 0);\r\n                    break;\r\n                default:\r\n                    addPoint = new Point_1.Point2d(0, 0);\r\n                    break;\r\n            }\r\n            //移動情報の入れ物\r\n            let moveStatus = {\r\n                \"speed\": 0,\r\n                \"direction\": \"up\",\r\n                \"line\": 0,\r\n            };\r\n            if (\r\n            //移動禁止状態でないか\r\n            (InputManager_1.InputManager.instance.key_btn4 == \"end\" || InputManager_1.InputManager.instance.key_btn4 == \"none\") &&\r\n                (InputManager_1.InputManager.instance.key_btn3 == \"end\" || InputManager_1.InputManager.instance.key_btn3 == \"none\")) {\r\n                if (\r\n                //移動状態でないか\r\n                this.moveStatus == null &&\r\n                    (\r\n                    //床が移動可能な状態か\r\n                    this.onFloorNumber == null ||\r\n                        (((_a = this.gameMaster) === null || _a === void 0 ? void 0 : _a.floorStatusList[this.onFloorNumber.y][this.onFloorNumber.x]) == \"standby\" &&\r\n                            this.CheckMobileFloor(this.onFloorNumber.x + addPoint.x, this.onFloorNumber.y + addPoint.y) &&\r\n                            !((_b = this.gameMaster) === null || _b === void 0 ? void 0 : _b.CheckPoint_Enemy(new Point_1.Point2d(this.onFloorNumber.x + addPoint.x, this.onFloorNumber.y + addPoint.y), \"all\"))))) {\r\n                    this.SaveTurnData();\r\n                    //移動情報の設定\r\n                    if (direction == \"up\") {\r\n                        moveStatus.line = this.aabb.GlobalCenterPoint.y - GameMaster_1.GameMasterComponent.gameRule.tileSize.height;\r\n                    }\r\n                    else if (direction == \"down\") {\r\n                        moveStatus.line = this.aabb.GlobalCenterPoint.y + GameMaster_1.GameMasterComponent.gameRule.tileSize.height;\r\n                    }\r\n                    else if (direction == \"left\") {\r\n                        moveStatus.line = this.aabb.GlobalCenterPoint.x - GameMaster_1.GameMasterComponent.gameRule.tileSize.height;\r\n                    }\r\n                    else if (direction == \"right\") {\r\n                        moveStatus.line = this.aabb.GlobalCenterPoint.x + GameMaster_1.GameMasterComponent.gameRule.tileSize.height;\r\n                    }\r\n                    moveStatus.direction = direction;\r\n                    moveStatus.speed = GameMaster_1.GameMasterComponent.gameRule.tileSize.height / 60 * this.moveSpeed;\r\n                    if (this.animation != undefined)\r\n                        this.animation.ChangeAnime(`${direction}-work`);\r\n                    this.moveStatus = moveStatus;\r\n                    //位置更新\r\n                    this.point = new Point_1.Point2d(this.point.x + addPoint.x, this.point.y + addPoint.y);\r\n                    //パワーアップ状態の更新\r\n                    let powerUpList = [];\r\n                    for (let i = 0; i < this.powerUpList.length; i++) {\r\n                        this.powerUpList[i].limitCount--;\r\n                        if (this.powerUpList[i].limitCount > 0) {\r\n                            powerUpList.push(this.powerUpList[i]);\r\n                        }\r\n                    }\r\n                    this.powerUpList = powerUpList;\r\n                    //行動扱い\r\n                    (_c = this.gameMaster) === null || _c === void 0 ? void 0 : _c.Action();\r\n                }\r\n            }\r\n        }\r\n        //ターンごとの状態を記録する\r\n        SaveTurnData() {\r\n            let powerUpList = [];\r\n            for (let i = 0; i < this.powerUpList.length; i++) {\r\n                powerUpList.push({\r\n                    limitCount: this.powerUpList[i].limitCount,\r\n                    type: this.powerUpList[i].type,\r\n                    value: this.powerUpList[i].value,\r\n                });\r\n            }\r\n            this.turnDatas.push({\r\n                direction: this.direction,\r\n                point: this.point.copy,\r\n                powerUpList: powerUpList\r\n            });\r\n        }\r\n        //前のターンの状態に戻す\r\n        OnBack() {\r\n            if (this.turnDatas.length == 0) {\r\n                return;\r\n            }\r\n            const beforeTurn = this.turnDatas[this.turnDatas.length - 1];\r\n            this.turnDatas = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.turnDatas, beforeTurn);\r\n            this.point = beforeTurn.point;\r\n            this.direction = beforeTurn.direction;\r\n            this.powerUpList = beforeTurn.powerUpList;\r\n            this.setPosition();\r\n        }\r\n        //タイル番号から自身の位置を設定する\r\n        setPosition() {\r\n            const tileSize = GameMaster_1.GameMasterComponent.gameRule.tileSize;\r\n            this.aabb.GlobalCenterPoint = new Point_1.Point2d(tileSize.width * this.point.x + tileSize.width / 2, tileSize.height * this.point.y + tileSize.height / 2);\r\n            this.moveStatus = null;\r\n        }\r\n        //自分の位置番号から位置を設定する\r\n        SetPointPosition() {\r\n            const tileSize = GameMaster_1.GameMasterComponent.gameRule.tileSize;\r\n            this.aabb.GlobalCenterPoint = new Point_1.Point2d(tileSize.width * this.point.x + tileSize.width / 2, tileSize.height * this.point.y + tileSize.height / 2);\r\n        }\r\n        //選択中の移動方法を取得\r\n        GetMoveMethod() {\r\n            let moveMethod = null;\r\n            if (this.movePattern) {\r\n                moveMethod = this.movePattern[this.movePattern_count];\r\n                if (!moveMethod) {\r\n                    moveMethod = null;\r\n                }\r\n            }\r\n            return moveMethod;\r\n        }\r\n        //選択中のスキルを取得\r\n        GetSkill() {\r\n            let skill = null;\r\n            if (this.skills) {\r\n                skill = this.skills[this.skills_count];\r\n                if (!skill) {\r\n                    skill = null;\r\n                }\r\n            }\r\n            return skill;\r\n        }\r\n        //選択中の移動に使う床のリストをを向きを考慮して返す\r\n        GetMoveFloorList() {\r\n            const method = this.GetMoveMethod();\r\n            if (method != null) {\r\n                return method.getFormation(this.direction);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        //選択中のスキルに使う床のリストを向きを考慮して返す\r\n        GetSkillFloorList() {\r\n            const skill = this.GetSkill();\r\n            if (skill != null) {\r\n                return skill.getFormation(this.direction);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        //特定のポイントの床が動いていないかを\r\n        CheckMobileFloor(x, y) {\r\n            if (this.gameMaster == null || x < 0 || y < 0 || x >= this.gameMaster.floorStatusList[0].length || y >= this.gameMaster.floorStatusList.length) {\r\n                return false;\r\n            }\r\n            if (this.gameMaster.floorStatusList[y][x] == \"standby\") {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        //スキル関係\r\n        SetPowerUpStatus(type, value, limit) {\r\n            const powerUpStatus = {\r\n                \"type\": type,\r\n                \"value\": value,\r\n                \"limitCount\": limit,\r\n            };\r\n            let flag = true;\r\n            for (let i = 0; i < this.powerUpList.length; i++) {\r\n                if (this.powerUpList[i].type == type) {\r\n                    if (this.powerUpList[i].value < value ||\r\n                        (this.powerUpList[i].value == value && this.powerUpList[i].limitCount < limit)) {\r\n                        this.powerUpList[i] = powerUpStatus;\r\n                    }\r\n                    flag = false;\r\n                }\r\n            }\r\n            if (flag) {\r\n                this.powerUpList.push(powerUpStatus);\r\n            }\r\n        }\r\n        GetPowerUpStatus(type) {\r\n            for (let i = 0; i < this.powerUpList.length; i++) {\r\n                if (this.powerUpList[i].type == type) {\r\n                    return this.powerUpList[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        GetPowerUpTypes() {\r\n            let names = [];\r\n            for (let i = 0; i < this.powerUpList.length; i++) {\r\n                names.push(this.powerUpList[i].type);\r\n            }\r\n            return names;\r\n        }\r\n        RemovePowerUpStatus(type) {\r\n            let newList = [];\r\n            for (let i = 0; i < this.powerUpList.length; i++) {\r\n                if (this.powerUpList[i].type != type) {\r\n                    newList.push(this.powerUpList[i]);\r\n                }\r\n            }\r\n            this.powerUpList = newList;\r\n        }\r\n        RemoveAllPowerUpStatus() {\r\n            this.powerUpList = [];\r\n        }\r\n        DeleteEnemy(scope) {\r\n            var _a, _b, _c;\r\n            if (scope.length <= 0 || scope.length % 2 == 0 || scope[0].length % 2 == 0) {\r\n                console.log(\"渡された範囲が奇数の配列でない\");\r\n                return;\r\n            }\r\n            switch (this.direction) {\r\n                case \"up\":\r\n                    scope = (0, ArrayController_1.ArrayRotate_2d_left)(scope);\r\n                    break;\r\n                case \"down\":\r\n                    scope = (0, ArrayController_1.ArrayRotate_2d_right)(scope);\r\n                    break;\r\n                case \"left\":\r\n                    scope = (0, ArrayController_1.ArrayRotate_2d_left)(scope);\r\n                    scope = (0, ArrayController_1.ArrayRotate_2d_left)(scope);\r\n                    break;\r\n            }\r\n            const startPoint = new Point_1.Point2d(this.point.x - (scope[0].length - 1) / 2, this.point.y - (scope.length - 1) / 2);\r\n            for (let y = 0; y < scope.length; y++) {\r\n                for (let x = 0; x < scope[y].length; x++) {\r\n                    const checkPoint = new Point_1.Point2d(startPoint.x + x, startPoint.y + y);\r\n                    if (scope[y][x] != 0 &&\r\n                        0 <= checkPoint.y && checkPoint.y < this.gameMaster.floorStatusList.length &&\r\n                        0 <= checkPoint.x && checkPoint.x < this.gameMaster.floorStatusList[y].length) {\r\n                        (_a = this.gameMaster) === null || _a === void 0 ? void 0 : _a.DeleteEnemy_Point(checkPoint);\r\n                        const effect = new OneAnimation_1.OneAnimationObject(\"effect\", {\r\n                            transform: {\r\n                                type: Transform_1.TransformComponent,\r\n                                size: GameMaster_1.GameMasterComponent.gameRule.tileSize,\r\n                                anchor: new Point_1.Point2d(0, 0),\r\n                                position: new Point_1.Point2d(GameMaster_1.GameMasterComponent.gameRule.tileSize.width * checkPoint.x, GameMaster_1.GameMasterComponent.gameRule.tileSize.height * checkPoint.y),\r\n                            },\r\n                            anime: {\r\n                                type: Animation_1.AnimationComponent,\r\n                                loop: false,\r\n                            },\r\n                            draw: {\r\n                                type: Draw_1.DrawComponent,\r\n                                sortName: \"guid-top\",\r\n                            },\r\n                            oneAnime: {\r\n                                type: OneAnimation_2.OneAnimationComponent,\r\n                                animation: [\r\n                                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/breakEffect1.png\"),\r\n                                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/breakEffect2.png\"),\r\n                                ],\r\n                                animationSecond: 0.5,\r\n                            }\r\n                        });\r\n                        (_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.AddObject(effect);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Warp(length) {\r\n            var _a;\r\n            let addPoint;\r\n            switch (this.direction) {\r\n                case \"up\":\r\n                    addPoint = new Point_1.Point2d(0, -length);\r\n                    break;\r\n                case \"down\":\r\n                    addPoint = new Point_1.Point2d(0, length);\r\n                    break;\r\n                case \"left\":\r\n                    addPoint = new Point_1.Point2d(-length, 0);\r\n                    break;\r\n                case \"right\":\r\n                    addPoint = new Point_1.Point2d(length, 0);\r\n                    break;\r\n            }\r\n            const checkPoint = new Point_1.Point2d(this.point.x + addPoint.x, this.point.y + addPoint.y);\r\n            if (((_a = this.gameMaster) === null || _a === void 0 ? void 0 : _a.CheckCanMove(checkPoint, true, false)) == true) {\r\n                this.point = checkPoint;\r\n                this.SetPointPosition();\r\n            }\r\n        }\r\n    }\r\n    exports.PlayerControllerComponent = PlayerControllerComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=PlayerController.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/PlayerController.js?");

/***/ }),

/***/ "./JavaScript/Component/Pouse.js":
/*!***************************************!*\
  !*** ./JavaScript/Component/Pouse.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, GameComponentBase_1, Ui_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.PauseComponent = void 0;\r\n    class PauseComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            var _a;\r\n            this.setUpFlag = true;\r\n            this.gameMaster = init.gameMaster;\r\n            const restartingButtonObj = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetChildObject(\"restartingButton\");\r\n            this.restartingButton = restartingButtonObj === null || restartingButtonObj === void 0 ? void 0 : restartingButtonObj.GetComponent(Ui_1.UiComponent);\r\n        }\r\n        Start() {\r\n            if (this.restartingButton != undefined) {\r\n                this.restartingButton.clickEvent = (self) => {\r\n                    var _a;\r\n                    (_a = this.gameMaster) === null || _a === void 0 ? void 0 : _a.GameRestart();\r\n                    this.parentObject.active = false;\r\n                };\r\n            }\r\n        }\r\n    }\r\n    exports.PauseComponent = PauseComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Pouse.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/Pouse.js?");

/***/ }),

/***/ "./JavaScript/Component/ScoreDisplay.js":
/*!**********************************************!*\
  !*** ./JavaScript/Component/ScoreDisplay.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ./GameMaster */ \"./JavaScript/Component/GameMaster.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, DrawTextMultiline_1, GameComponentBase_1, GameMaster_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ScoreDisplayComponent = void 0;\r\n    class ScoreDisplayComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            var _a, _b, _c;\r\n            const drawText = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            this.text = drawText;\r\n            const gameMasterObj = (_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.GetObject(init.gameMasterObjName);\r\n            const gameMaster = gameMasterObj === null || gameMasterObj === void 0 ? void 0 : gameMasterObj.GetComponent(GameMaster_1.GameMasterComponent);\r\n            this.gameMaster = gameMaster;\r\n            this.setUpFlag = true;\r\n        }\r\n        Update() {\r\n            var _a;\r\n            this.text.text = `スコア\\n手数:${(_a = this.gameMaster) === null || _a === void 0 ? void 0 : _a.numberOfMoves}`;\r\n        }\r\n    }\r\n    exports.ScoreDisplayComponent = ScoreDisplayComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=ScoreDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/ScoreDisplay.js?");

/***/ }),

/***/ "./JavaScript/Component/SelectSkillDisplay.js":
/*!****************************************************!*\
  !*** ./JavaScript/Component/SelectSkillDisplay.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ./PlayerController */ \"./JavaScript/Component/PlayerController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, DrawTextMultiline_1, GameComponentBase_1, PlayerController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SelectSkillDisplayComponent = void 0;\r\n    class SelectSkillDisplayComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            var _a, _b, _c;\r\n            const text = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            this.text = text;\r\n            const playerObj = (_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.GetObject(init.playerObjName);\r\n            const player = playerObj === null || playerObj === void 0 ? void 0 : playerObj.GetComponent(PlayerController_1.PlayerControllerComponent);\r\n            this.player = player;\r\n            this.setUpFlag = true;\r\n        }\r\n        Update() {\r\n            const playerSkill = this.player.skills[this.player.skills_count];\r\n            if (playerSkill != undefined) {\r\n                this.text.text = `選択中のスキル\\n${this.player.skills_count}:${playerSkill.name}`;\r\n            }\r\n            else {\r\n                this.text.text = \"選択できるスキルが無い...\";\r\n            }\r\n        }\r\n    }\r\n    exports.SelectSkillDisplayComponent = SelectSkillDisplayComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SelectSkillDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/SelectSkillDisplay.js?");

/***/ }),

/***/ "./JavaScript/Component/SetStageInfo.js":
/*!**********************************************!*\
  !*** ./JavaScript/Component/SetStageInfo.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Function/DictionaryController */ \"./JavaScript/GameBase/Function/DictionaryController.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/System/SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ../Other/SaveData */ \"./JavaScript/Other/SaveData.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ./GameMaster */ \"./JavaScript/Component/GameMaster.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../Scene/GameSscene */ \"./JavaScript/Scene/GameSscene.js\"), __webpack_require__(/*! ../Object/StageInfoDisplay */ \"./JavaScript/Object/StageInfoDisplay.js\"), __webpack_require__(/*! ../Other/GameRule_normal */ \"./JavaScript/Other/GameRule_normal.js\"), __webpack_require__(/*! ../Other/GameRule_LineUp */ \"./JavaScript/Other/GameRule_LineUp.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, Size_1, DictionaryController_1, GameComponentBase_1, SceneManager_1, SaveData_1, Draw_1, DrawTextSingleline_1, DrawTextMultiline_1, GameMaster_1, Ui_1, GameSscene_1, StageInfoDisplay_1, GameRule_normal_1, GameRule_LineUp_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SetStageInfoComponent = void 0;\r\n    class SetStageInfoComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            const displayObj = this.parentObject;\r\n            const titleObj = displayObj === null || displayObj === void 0 ? void 0 : displayObj.GetChildObject(StageInfoDisplay_1.names_001.title);\r\n            const title = titleObj === null || titleObj === void 0 ? void 0 : titleObj.GetComponent(DrawTextSingleline_1.DrawTextSinglelineComponent);\r\n            const imageObj = displayObj === null || displayObj === void 0 ? void 0 : displayObj.GetChildObject(StageInfoDisplay_1.names_001.image);\r\n            const image = imageObj === null || imageObj === void 0 ? void 0 : imageObj.GetComponent(Draw_1.DrawComponent);\r\n            const textObj = displayObj === null || displayObj === void 0 ? void 0 : displayObj.GetChildObject(StageInfoDisplay_1.names_001.text);\r\n            const text = textObj === null || textObj === void 0 ? void 0 : textObj.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            const startButtonObj = displayObj === null || displayObj === void 0 ? void 0 : displayObj.GetChildObject(StageInfoDisplay_1.names_001.start);\r\n            const startButton = startButtonObj === null || startButtonObj === void 0 ? void 0 : startButtonObj.GetComponent(Ui_1.UiComponent);\r\n            const scoreTextObj = displayObj.GetChildObject(StageInfoDisplay_1.names_001.scoreText);\r\n            const scoreText = scoreTextObj === null || scoreTextObj === void 0 ? void 0 : scoreTextObj.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            this.infoDisplay = displayObj;\r\n            this.title = title;\r\n            this.image = image;\r\n            this.text = text;\r\n            this.startBtn = startButton;\r\n            this.setUpFlag = true;\r\n            this.scoreText = scoreText;\r\n            displayObj.active = false;\r\n        }\r\n        SetData(data) {\r\n            if (this.title != undefined) {\r\n                this.title.text = data.name;\r\n            }\r\n            if (this.text != undefined) {\r\n                this.text.text = data.description;\r\n            }\r\n            if (this.scoreText) {\r\n                const score = (0, DictionaryController_1.checkDictionaryKeys)(SaveData_1.SaveData.instance.scoreList, data.name) == true ? SaveData_1.SaveData.instance.scoreList[data.name].process : null;\r\n                const rank = score != null ? (score <= data.referencePoint.minimum ? (score <= data.referencePoint.height ? \"[高得点]\" : \"[平均点]\") : \"[未クリア]\") : \"\";\r\n                this.scoreText.text =\r\n                    `スコア : ${score != null ? score + \"手\" : \"none\"}${rank}\\n` +\r\n                        `基準点 : ${data.referencePoint.minimum}手\\n高得点 : ${data.referencePoint.height}手`;\r\n            }\r\n            if (this.startBtn != undefined) {\r\n                this.startBtn.clickEvent = (self) => {\r\n                    GameMaster_1.GameMasterComponent.gameRule = data;\r\n                    this.parentObject.active = false;\r\n                    SceneManager_1.SceneManager.instance.RemoveScene(1);\r\n                    SceneManager_1.SceneManager.instance.AddScene(new GameSscene_1.GameScene());\r\n                };\r\n            }\r\n            if (this.image != undefined) {\r\n                const canvas = document.createElement(\"canvas\");\r\n                const ctx = canvas.getContext(\"2d\");\r\n                canvas.width = this.image.image.width;\r\n                canvas.height = this.image.image.height;\r\n                ctx.fillStyle = \"black\";\r\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n                const size = new Size_1.Size(0, this.image.image.height / data.tileData.length);\r\n                let maxWidth = 0;\r\n                for (let i = 0; i < data.tileData.length; i++) {\r\n                    if (maxWidth == 0) {\r\n                        maxWidth = data.tileData[i].length;\r\n                    }\r\n                    else if (maxWidth < data.tileData[i].length) {\r\n                        maxWidth = data.tileData[i].length;\r\n                    }\r\n                }\r\n                size.width = this.image.image.width / maxWidth;\r\n                if (size.width > size.height) {\r\n                    size.width = size.height;\r\n                }\r\n                else if (size.height > size.width) {\r\n                    size.height = size.width;\r\n                }\r\n                const miniCanvas = document.createElement(\"canvas\");\r\n                const miniCtx = miniCanvas.getContext(\"2d\");\r\n                miniCanvas.width = size.width * maxWidth;\r\n                miniCanvas.height = size.height * data.tileData.length;\r\n                miniCtx.fillStyle = \"rgb(40, 40, 40)\";\r\n                miniCtx.strokeStyle = \"brack\";\r\n                miniCtx.fillRect(0, 0, canvas.width, canvas.height);\r\n                for (let y = 0; y < data.tileData.length; y++) {\r\n                    for (let x = 0; x < data.tileData[y].length; x++) {\r\n                        if (data.tileData[y][x] == 1) {\r\n                            miniCtx.fillStyle = \"white\";\r\n                        }\r\n                        else if (data.tileData[y][x] == 2) {\r\n                            miniCtx.fillStyle = \"black\";\r\n                        }\r\n                        else if (data.tileData[y][x] == 3) {\r\n                            miniCtx.fillStyle = \"gray\";\r\n                        }\r\n                        else {\r\n                            miniCtx.fillStyle = \"rgba(0, 0, 0, 0)\";\r\n                        }\r\n                        miniCtx.fillRect(size.width * x, size.height * y, size.width, size.height);\r\n                        miniCtx.strokeRect(size.width * x, size.height * y, size.width, size.height);\r\n                    }\r\n                }\r\n                //敵\r\n                miniCtx.fillStyle = \"yellow\";\r\n                for (let i = 0; i < data.enemys.length; i++) {\r\n                    const enemyPosition = data.enemys[i].enemy.position;\r\n                    if (enemyPosition != undefined) {\r\n                        miniCtx.beginPath();\r\n                        miniCtx.arc(size.width * enemyPosition.x + size.width / 2, size.height * enemyPosition.y + size.height / 2, (size.width >= size.height ? size.height : size.width) / 2, 0, Math.PI * 2);\r\n                        miniCtx.fill();\r\n                    }\r\n                }\r\n                //砲台\r\n                miniCtx.fillStyle = \"black\";\r\n                for (let i = 0; i < data.forts.length; i++) {\r\n                    const fortPosition = data.forts[i].fort.pointNumber;\r\n                    if (fortPosition != undefined) {\r\n                        miniCtx.beginPath();\r\n                        miniCtx.arc(size.width * fortPosition.x + size.width / 2, size.height * fortPosition.y + size.height / 2, (size.width >= size.height ? size.height : size.width) / 2, 0, Math.PI * 2);\r\n                        miniCtx.fill();\r\n                    }\r\n                }\r\n                //スタート・ゴール\r\n                miniCtx.font = `${size.width > size.height ? size.height : size.width}px Arial bold`;\r\n                miniCtx.textBaseline = \"middle\";\r\n                miniCtx.textAlign = \"center\";\r\n                miniCtx.fillStyle = \"blue\";\r\n                miniCtx.fillText(\"S\", size.width * data.startPoint.x + size.width / 2, size.height * data.startPoint.y + size.height / 2, size.width);\r\n                miniCtx.fillStyle = \"red\";\r\n                if (data instanceof GameRule_normal_1.GameRule_Normal) {\r\n                    const data_normal = data;\r\n                    miniCtx.fillText(\"G\", size.width * data_normal.goalPoint.x + size.width / 2, size.height * data_normal.goalPoint.y + size.height / 2, size.width);\r\n                }\r\n                else if (data instanceof GameRule_LineUp_1.GameRule_LineUp) {\r\n                    const data_lineup = data;\r\n                    for (let y = 0; y < data_lineup.goalPoints.length; y++) {\r\n                        for (let x = 0; x < data_lineup.goalPoints[y].length; x++) {\r\n                            const goalPoint = data_lineup.goalPoints[y][x];\r\n                            if (goalPoint != 0) {\r\n                                miniCtx.fillText(\"G\", size.width * x + size.width / 2, size.height * y + size.height / 2, size.width);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //全体\r\n                ctx.drawImage(miniCanvas, canvas.width / 2 - miniCanvas.width / 2, canvas.height / 2 - miniCanvas.height / 2);\r\n                this.image.image = new ImageBase_1.ImageBase(canvas);\r\n            }\r\n            if (this.infoDisplay != null) {\r\n                this.infoDisplay.active = true;\r\n            }\r\n        }\r\n    }\r\n    exports.SetStageInfoComponent = SetStageInfoComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SetStageInfo.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/SetStageInfo.js?");

/***/ }),

/***/ "./JavaScript/Component/SettingListCreater.js":
/*!****************************************************!*\
  !*** ./JavaScript/Component/SettingListCreater.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../Other/SettingList */ \"./JavaScript/Other/SettingList.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/ScrollBox */ \"./JavaScript/GameBase/Game/Component/ScrollBox.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, GameComponentBase_1, Button_1, SettingList_1, DrawTextSingleline_1, ScrollBox_1, Ui_1, Color_1, Transform_1, Draw_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SettingListCreaterComponent = void 0;\r\n    class SettingListCreaterComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            var _a;\r\n            this.setUpFlag = true;\r\n            const scrollBox = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(ScrollBox_1.ScrollBoxComponent);\r\n            this.scrollBox = scrollBox;\r\n        }\r\n        Start() {\r\n            var _a, _b;\r\n            let sortName = \"UI\";\r\n            if (this.scrollBox != undefined) {\r\n                const scrollBox_draw = (_a = this.scrollBox.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Draw_1.DrawComponent);\r\n                sortName = scrollBox_draw.sortName;\r\n            }\r\n            for (let i = 0; i < SettingList_1.settingItems.length; i++) {\r\n                const settingItem = SettingList_1.settingItems[i];\r\n                const button = new Button_1.ButtonObject(\"settingButton\", {\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: sortName,\r\n                        text: settingItem.text,\r\n                        backGroundColor: new Color_1.Color(200, 200, 200, 0.5),\r\n                        textAlign: \"center\",\r\n                        lineHeight: \"center\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: settingItem.click,\r\n                        update: settingItem.update,\r\n                        keyDownEvent: settingItem.keyDown,\r\n                        keyStayEvent: settingItem.keyStay,\r\n                        keyUpEvent: settingItem.keyUp,\r\n                        focusLineWidth: 5,\r\n                        hoverLineWidth: 5,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                    }\r\n                });\r\n                (_b = this.scrollBox) === null || _b === void 0 ? void 0 : _b.AddElement(button);\r\n            }\r\n        }\r\n    }\r\n    exports.SettingListCreaterComponent = SettingListCreaterComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SettingListCreater.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/SettingListCreater.js?");

/***/ }),

/***/ "./JavaScript/Component/StageListCreater.js":
/*!**************************************************!*\
  !*** ./JavaScript/Component/StageListCreater.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Function/DictionaryController */ \"./JavaScript/GameBase/Function/DictionaryController.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/Game/Component/ScrollBox */ \"./JavaScript/GameBase/Game/Component/ScrollBox.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../Other/GameRuleList */ \"./JavaScript/Other/GameRuleList.js\"), __webpack_require__(/*! ../Other/SaveData */ \"./JavaScript/Other/SaveData.js\"), __webpack_require__(/*! ./SetStageInfo */ \"./JavaScript/Component/SetStageInfo.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Color_1, Size_1, DictionaryController_1, Draw_1, DrawTextSingleline_1, GameComponentBase_1, ScrollBox_1, Transform_1, Ui_1, Button_1, GameRuleList_1, SaveData_1, SetStageInfo_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.StageListCreaterComponent = void 0;\r\n    class StageListCreaterComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            var _a, _b, _c;\r\n            this.setUpFlag = true;\r\n            const scrollBox = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(ScrollBox_1.ScrollBoxComponent);\r\n            this.scrollBox = scrollBox;\r\n            const stageInfoDisplay = (_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.GetObject(init.stageInfoDisplayObjName);\r\n            this.stageInfoDisplaySetter = stageInfoDisplay.GetComponent(SetStageInfo_1.SetStageInfoComponent);\r\n        }\r\n        Start() {\r\n            var _a, _b, _c;\r\n            let sortName = \"UI\";\r\n            const scrollBox_draw = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Draw_1.DrawComponent);\r\n            const transform = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.GetComponent(Transform_1.TransformComponent);\r\n            const buttonWidth = transform.size.width * 0.8;\r\n            sortName = scrollBox_draw.sortName;\r\n            for (let i = 0; i < GameRuleList_1.gameRuleList.length; i++) {\r\n                const rule = GameRuleList_1.gameRuleList[i];\r\n                const button = new Button_1.ButtonObject(\"stageSelectButton\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(buttonWidth, 40),\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"UI\",\r\n                        text: `${i + 1}:${(0, DictionaryController_1.checkDictionaryKeys)(SaveData_1.SaveData.instance.scoreList, rule.name) == true\r\n                            ? (SaveData_1.SaveData.instance.scoreList[rule.name].process <= rule.referencePoint.minimum\r\n                                ? (SaveData_1.SaveData.instance.scoreList[rule.name].process <= rule.referencePoint.height\r\n                                    ? \"[高]\"\r\n                                    : \"[平均]\")\r\n                                : \"[未]\")\r\n                            : \"[未]\"}${rule.name}`,\r\n                        textAlign: \"center\",\r\n                        lineHeight: \"center\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: (self) => {\r\n                            var _a;\r\n                            (_a = this.stageInfoDisplaySetter) === null || _a === void 0 ? void 0 : _a.SetData(rule);\r\n                        },\r\n                        hoverLineWidth: 5,\r\n                        focusLineWidth: 5,\r\n                    }\r\n                });\r\n                (_c = this.scrollBox) === null || _c === void 0 ? void 0 : _c.AddElement(button);\r\n            }\r\n        }\r\n    }\r\n    exports.StageListCreaterComponent = StageListCreaterComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=StageListCreater.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/StageListCreater.js?");

/***/ }),

/***/ "./JavaScript/Component/StatusDisplay.js":
/*!***********************************************!*\
  !*** ./JavaScript/Component/StatusDisplay.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ./PlayerController */ \"./JavaScript/Component/PlayerController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, DrawTextMultiline_1, GameComponentBase_1, PlayerController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.StatusDisplayComponent = void 0;\r\n    class StatusDisplayComponent extends GameComponentBase_1.GameComponentBase {\r\n        Setup(init) {\r\n            var _a, _b, _c;\r\n            this.text = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            const playerObj = (_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.GetObject(init.playerObjName);\r\n            this.player = playerObj === null || playerObj === void 0 ? void 0 : playerObj.GetComponent(PlayerController_1.PlayerControllerComponent);\r\n            this.setUpFlag = true;\r\n        }\r\n        Update() {\r\n            var _a;\r\n            const powerUpList = this.player.GetPowerUpTypes();\r\n            this.text.text = \"自身に働いている効果:\";\r\n            for (let i = 0; i < powerUpList.length; i++) {\r\n                const powerup = (_a = this.player) === null || _a === void 0 ? void 0 : _a.GetPowerUpStatus(powerUpList[i]);\r\n                if (powerup != null) {\r\n                    this.text.text += `\\n${powerUpList[i]}:${powerup.value}(残:${Math.floor(powerup.limitCount * 10) / 10})`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    exports.StatusDisplayComponent = StatusDisplayComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=StatusDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/StatusDisplay.js?");

/***/ }),

/***/ "./JavaScript/Component/TutorialSet.js":
/*!*********************************************!*\
  !*** ./JavaScript/Component/TutorialSet.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Color_1, ImageBase_1, Point_1, Size_1, Draw_1, DrawTextMultiline_1, DrawTextSingleline_1, GameComponentBase_1, Transform_1, Ui_1, Button_1, GlobalData_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.TutorialSetComponent = void 0;\r\n    class TutorialSetComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.tutorials = [];\r\n            this.pageCount = 0;\r\n        }\r\n        Setup(init) {\r\n            this.tutorials = init.tutorials;\r\n        }\r\n        Start() {\r\n            var _a, _b;\r\n            const backButtonObj = this.parentObject.GetChildObject(\"backButton\");\r\n            this.backButton = backButtonObj === null || backButtonObj === void 0 ? void 0 : backButtonObj.GetComponent(Ui_1.UiComponent);\r\n            const nextButtonObj = this.parentObject.GetChildObject(\"nextButton\");\r\n            this.nextButton = nextButtonObj === null || nextButtonObj === void 0 ? void 0 : nextButtonObj.GetComponent(Ui_1.UiComponent);\r\n            const imageDisplayObj = this.parentObject.GetChildObject(\"image\");\r\n            const textObj = this.parentObject.GetChildObject(\"text\");\r\n            this.imageDisplay = imageDisplayObj.GetComponent(Draw_1.DrawComponent);\r\n            this.textDisplay = textObj.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            if (this.tutorials[0] != undefined)\r\n                this.SetTutorialPage(0);\r\n            this.backButton.clickEvent = (self) => {\r\n                let buttonText = \"?\";\r\n                //一番最初のページなら閉じる\r\n                if (this.pageCount == 0) {\r\n                    this.parentObject.active = false;\r\n                    return;\r\n                }\r\n                //1つ前のページに戻る\r\n                this.pageCount--;\r\n                if (this.pageCount < 0) {\r\n                    this.pageCount = 0;\r\n                }\r\n                //ページ内容を設定\r\n                const tutorialPage = this.tutorials[this.pageCount];\r\n                if (tutorialPage != undefined) {\r\n                    this.SetTutorialPage(this.pageCount);\r\n                }\r\n            };\r\n            this.nextButton.clickEvent = (self) => {\r\n                let buttonText = \"?\";\r\n                //最後なら閉じる\r\n                if (this.pageCount == this.tutorials.length - 1) {\r\n                    this.parentObject.active = false;\r\n                    return;\r\n                }\r\n                //次のページに進む\r\n                this.pageCount++;\r\n                if (this.tutorials.length <= this.pageCount) {\r\n                    this.pageCount = this.tutorials.length - 1;\r\n                }\r\n                //ページを更新する\r\n                const tutorialPage = this.tutorials[this.pageCount];\r\n                if (tutorialPage != undefined) {\r\n                    this.SetTutorialPage(this.pageCount);\r\n                }\r\n            };\r\n            //チュートリアル表示ボタンをポーズ画面に追加\r\n            const pause = (_b = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.parentScene) === null || _b === void 0 ? void 0 : _b.GetObject(\"pause\");\r\n            const button = new Button_1.ButtonObject(\"tutorialDisplayButton\", {\r\n                darwTextSingle: {\r\n                    type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                    text: \"チュートリアルを表示\",\r\n                    sortName: \"frontUI\",\r\n                    fontColor: Color_1.Color.GetColor(\"white\"),\r\n                    textAlign: \"center\",\r\n                    backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                },\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    anchor: new Point_1.Point2d(0.5, 1),\r\n                    position: new Point_1.Point2d(400, 390),\r\n                    size: new Size_1.Size(300, 50),\r\n                },\r\n                ui: {\r\n                    type: Ui_1.UiComponent,\r\n                    clickEvent: (self) => {\r\n                        this.parentObject.active = true;\r\n                        this.SetTutorialPage(0);\r\n                    },\r\n                    focusLineWidth: 0,\r\n                    hoverLineWidth: 0,\r\n                }\r\n            });\r\n            pause === null || pause === void 0 ? void 0 : pause.AddChildObject(button);\r\n        }\r\n        SetTutorialPage(pageNumber) {\r\n            this.pageCount = pageNumber;\r\n            const pageData = this.tutorials[this.pageCount];\r\n            if (pageData == undefined) {\r\n                return;\r\n            }\r\n            if (pageData.image.size.width != this.imageDisplay.transform.size.width || pageData.image.size.height != this.imageDisplay.transform.size.height) {\r\n                pageData.image.size = this.imageDisplay.transform.size;\r\n            }\r\n            this.imageDisplay.image = pageData.image;\r\n            this.textDisplay.text = pageData.text;\r\n            if (this.pageCount == 0) {\r\n                this.backButton.draw.text = \"閉じる\";\r\n            }\r\n            else {\r\n                this.backButton.draw.text = \"<- 前\";\r\n            }\r\n            if (this.pageCount == this.tutorials.length - 1) {\r\n                this.nextButton.draw.text = \"閉じる\";\r\n            }\r\n            else {\r\n                this.nextButton.draw.text = \"次 ->\";\r\n            }\r\n        }\r\n        AddTutorialPage(tutorialPages) {\r\n            if (tutorialPages.length == 0) {\r\n                return;\r\n            }\r\n            const lastPage = this.tutorials.length;\r\n            this.tutorials = this.tutorials.concat(tutorialPages);\r\n            this.SetTutorialPage(lastPage);\r\n            this.parentObject.active = true;\r\n        }\r\n    }\r\n    exports.TutorialSetComponent = TutorialSetComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=TutorialSet.js.map\n\n//# sourceURL=webpack:///./JavaScript/Component/TutorialSet.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Class/Color.js":
/*!********************************************!*\
  !*** ./JavaScript/GameBase/Class/Color.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.Color = void 0;\r\n    class Color {\r\n        constructor(red, green, blue, alpha) {\r\n            this._red = 0;\r\n            this._green = 0;\r\n            this._blue = 0;\r\n            this._alpha = 255;\r\n            this.red = red;\r\n            this.green = green;\r\n            this.blue = blue;\r\n            if (alpha != undefined)\r\n                this.alpha = alpha;\r\n        }\r\n        static get none() {\r\n            return new Color(0, 0, 0, 0);\r\n        }\r\n        set red(value) {\r\n            if (value > 255)\r\n                this._red = 255;\r\n            else if (value < -255)\r\n                this._red = -255;\r\n            else\r\n                this._red = value;\r\n        }\r\n        get red() {\r\n            return this._red;\r\n        }\r\n        set green(value) {\r\n            if (value > 255)\r\n                this._green = 255;\r\n            else if (value < -255)\r\n                this._green = -255;\r\n            else\r\n                this._green = value;\r\n        }\r\n        get green() {\r\n            return this._green;\r\n        }\r\n        set blue(value) {\r\n            if (value > 255)\r\n                this._blue = 255;\r\n            else if (value < -255)\r\n                this._blue = 0;\r\n            else\r\n                this._blue = value;\r\n        }\r\n        get blue() {\r\n            return this._blue;\r\n        }\r\n        set alpha(value) {\r\n            if (value > 1.0)\r\n                this._alpha = 1.0;\r\n            else if (value < -1.0)\r\n                this._alpha = -1.0;\r\n            else\r\n                this._alpha = value;\r\n        }\r\n        get alpha() {\r\n            return this._alpha;\r\n        }\r\n        set colorName(value) {\r\n            value = value.replace(\" \", \"\");\r\n            if (colorNameList[value] != undefined) {\r\n                this.red = colorNameList[value].red;\r\n                this.green = colorNameList[value].green;\r\n                this.blue = colorNameList[value].blue;\r\n            }\r\n            else if (value.match(/rgb\\([0-9|.]{1,},[0-9|.]{1,},[0-9|.]{1,}\\)/)) {\r\n                value = value.replace(\"rgb(\", \"\");\r\n                value = value.replace(\")\", \"\");\r\n                const rgbList = value.split(\",\");\r\n                this.red = rgbList[0] != undefined ? Number(rgbList[0]) : this.red;\r\n                this.green = rgbList[1] != undefined ? Number(rgbList[1]) : this.green;\r\n                this.blue = rgbList[2] != undefined ? Number(rgbList[2]) : this.blue;\r\n            }\r\n            else if (value.match(/rgba\\([0-9|.]{1,},[0-9|.]{1,},[0-9|.]{1,},[0-9|.]{1,}\\)/)) {\r\n                value = value.replace(\"rgba(\", \"\");\r\n                value = value.replace(\")\", \"\");\r\n                const rgbaList = value.split(\",\");\r\n                this.red = rgbaList[0] != undefined ? Number(rgbaList[0]) : this.red;\r\n                this.green = rgbaList[1] != undefined ? Number(rgbaList[1]) : this.green;\r\n                this.blue = rgbaList[2] != undefined ? Number(rgbaList[2]) : this.blue;\r\n                this.alpha = rgbaList[3] != undefined ? Number(rgbaList[3]) : this.alpha;\r\n            }\r\n        }\r\n        GetRGBAtext() {\r\n            return `rgba(${this._red}, ${this._green}, ${this._blue}, ${this._alpha})`;\r\n        }\r\n        GetRGBtext() {\r\n            return `rgb(${this._red}, ${this._green}, ${this._blue})`;\r\n        }\r\n        get copy() {\r\n            return new Color(this.red, this.green, this.blue, this.alpha);\r\n        }\r\n        static GetColor(name, alpha) {\r\n            const color = new Color(0, 0, 0);\r\n            if (colorNameList[name] != undefined) {\r\n                color.red = colorNameList[name].red;\r\n                color.green = colorNameList[name].green;\r\n                color.blue = colorNameList[name].blue;\r\n                if (alpha != undefined) {\r\n                    color.alpha = alpha;\r\n                }\r\n            }\r\n            return color;\r\n        }\r\n    }\r\n    exports.Color = Color;\r\n    const colorNameList = {\r\n        \"black\": { red: 0, green: 0, blue: 0 },\r\n        \"white\": { red: 255, green: 255, blue: 255 },\r\n        \"red\": { red: 255, green: 0, blue: 0 },\r\n        \"green\": { red: 0, green: 255, blue: 0 },\r\n        \"blue\": { red: 0, green: 0, blue: 255 },\r\n    };\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Color.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Class/Color.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Class/CountDown.js":
/*!************************************************!*\
  !*** ./JavaScript/GameBase/Class/CountDown.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.CountUp = exports.CountDown = void 0;\r\n    class CountDown {\r\n        constructor(maxCount, loop) {\r\n            this._count = maxCount;\r\n            this._maxCount = maxCount;\r\n            this._loop = loop;\r\n        }\r\n        get count() {\r\n            return this._count;\r\n        }\r\n        get maxCount() {\r\n            return this._maxCount;\r\n        }\r\n        get loop() {\r\n            return this._loop;\r\n        }\r\n        set loop(value) {\r\n            this._loop = value;\r\n        }\r\n        Count() {\r\n            if (this._count > 0) {\r\n                this._count--;\r\n                return false;\r\n            }\r\n            else {\r\n                if (this._loop)\r\n                    this._count = this._maxCount;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    exports.CountDown = CountDown;\r\n    class CountUp {\r\n        constructor(maxCount, loop) {\r\n            this.countDown = new CountDown(maxCount, loop);\r\n        }\r\n        get count() {\r\n            return this.countDown.maxCount - this.countDown.count;\r\n        }\r\n        get maxCount() {\r\n            return this.countDown.maxCount;\r\n        }\r\n        get loop() {\r\n            return this.countDown.loop;\r\n        }\r\n        set loop(value) {\r\n            this.countDown.loop = value;\r\n        }\r\n        Count() {\r\n            if (this.countDown.Count()) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    exports.CountUp = CountUp;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=CountDown.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Class/CountDown.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Class/ImageBase.js":
/*!************************************************!*\
  !*** ./JavaScript/GameBase/Class/ImageBase.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../System/ImageManager */ \"./JavaScript/GameBase/System/ImageManager.js\"), __webpack_require__(/*! ./Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../../../Image/NoImg.bmp */ \"./Image/NoImg.bmp\"), __webpack_require__(/*! ../Function/SliceImage */ \"./JavaScript/GameBase/Function/SliceImage.js\"), __webpack_require__(/*! ./Color */ \"./JavaScript/GameBase/Class/Color.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageManager_1, Size_1, NoImg_bmp_1, SliceImage_1, Color_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ImageBase = void 0;\r\n    NoImg_bmp_1 = __importDefault(NoImg_bmp_1);\r\n    class ImageBase {\r\n        constructor(src, sliceList, rotate, initial) {\r\n            this.loadEvent = null;\r\n            //プロパティ\r\n            this.sliceList = null;\r\n            this._backgroundColor = null;\r\n            //プロパティ初期化\r\n            this.sorceURL = \"\";\r\n            this._size = new Size_1.Size(64, 64);\r\n            this._rotate = rotate != undefined ? rotate : 0;\r\n            if (sliceList)\r\n                this.sliceList = sliceList;\r\n            if (initial) {\r\n                const canvas = document.createElement(\"canvas\");\r\n                const ctx = canvas.getContext(\"2d\");\r\n                canvas.width = this.width;\r\n                canvas.height = this.height;\r\n                ctx.fillStyle = \"rgb(255, 0, 255)\";\r\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n                this._sorceImage = canvas;\r\n                this._drawImage = canvas;\r\n            }\r\n            else {\r\n                //画像要素初期化\r\n                this._sorceImage = ImageBase._noImage.drawImage;\r\n                this._drawImage = ImageBase._noImage.drawImage;\r\n                if (typeof (src) == \"string\") {\r\n                    if (ImageManager_1.ImageManager.instance.getImage(src).id != \"noImage\") {\r\n                        this.SetSorceImage(ImageManager_1.ImageManager.instance.getImage(src));\r\n                    }\r\n                    else {\r\n                        const imageEle = document.createElement(\"img\");\r\n                        imageEle.crossOrigin = \"Anonymous\";\r\n                        imageEle.src = src;\r\n                        this.sorceURL = src;\r\n                        imageEle.onload = () => {\r\n                            this.SetSorceImage(imageEle);\r\n                            ImageManager_1.ImageManager.instance.addImage(this._sorceImage, src);\r\n                            this.sorceURL = \"\";\r\n                            console.log(`${src} loaded`);\r\n                            if (this.loadEvent != null) {\r\n                                this.loadEvent();\r\n                            }\r\n                        };\r\n                    }\r\n                }\r\n                else if (src instanceof HTMLImageElement) {\r\n                    if (src.complete) {\r\n                        this.SetSorceImage(src);\r\n                    }\r\n                    else {\r\n                        src.onload = () => {\r\n                            this.SetSorceImage(src);\r\n                            if (this.loadEvent != null) {\r\n                                this.loadEvent();\r\n                            }\r\n                        };\r\n                    }\r\n                }\r\n                else if (src instanceof HTMLCanvasElement) {\r\n                    this.SetSorceImage(src);\r\n                }\r\n            }\r\n        }\r\n        static set noImage(value) { this._noImage = value; }\r\n        static get noImage() { return this._noImage.copy; }\r\n        get drawImage() {\r\n            return this._drawImage;\r\n        }\r\n        get size() {\r\n            return this._size;\r\n        }\r\n        set size(value) {\r\n            if (this.size.width != value.width || this.size.height != value.height) {\r\n                this._size = value;\r\n                this.SetImage();\r\n            }\r\n        }\r\n        set width(value) {\r\n            if (this.size.width != value) {\r\n                this._size.width = value;\r\n                this.SetImage();\r\n            }\r\n        }\r\n        get width() {\r\n            return this._size.width;\r\n        }\r\n        set height(value) {\r\n            if (this.size.height != value) {\r\n                this._size.height = value;\r\n                this.SetImage();\r\n            }\r\n        }\r\n        get height() {\r\n            return this._size.height;\r\n        }\r\n        get backgroundColor() {\r\n            return this._backgroundColor;\r\n        }\r\n        set backgroundColor(value) {\r\n            this._backgroundColor = value;\r\n            this.SetImage();\r\n        }\r\n        get rotate() {\r\n            return this._rotate;\r\n        }\r\n        set rotate(value) {\r\n            this._rotate = value;\r\n            this.SetImage();\r\n        }\r\n        //コピー\r\n        get copy() {\r\n            let ib;\r\n            if (this.sorceURL != \"\")\r\n                ib = new ImageBase(this.sorceURL, this.sliceList);\r\n            else\r\n                ib = new ImageBase(this.drawImage, this.sliceList);\r\n            ib.width = this.width;\r\n            ib.height = this.height;\r\n            return ib;\r\n        }\r\n        //ソース画像を渡す\r\n        SetSorceImage(image) {\r\n            if (image.width == 0 || image.height == 0) {\r\n                console.log(\"Error:\\r\\nImaegBase->SetSorceImage_Normal:渡された画像の幅が0だった\");\r\n                return;\r\n            }\r\n            //画像を調整\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            ctx.drawImage(image, 0, 0);\r\n            //sorceImageに設定\r\n            this._sorceImage = canvas;\r\n            this.SetImage();\r\n        }\r\n        SetImage() {\r\n            let newCanvas = document.createElement(\"canvas\");\r\n            newCanvas.width = this.width;\r\n            newCanvas.height = this.height;\r\n            const newCtx = newCanvas.getContext(\"2d\");\r\n            newCtx.imageSmoothingEnabled = false;\r\n            if (this.backgroundColor != null) {\r\n                newCtx.fillStyle = this.backgroundColor.GetRGBAtext();\r\n                newCtx.fillRect(0, 0, newCanvas.width, newCanvas.height);\r\n            }\r\n            if (this.sliceList != null) {\r\n                newCanvas = (0, SliceImage_1.sliceImage)(this._sorceImage, this.size, this.sliceList.up, this.sliceList.down, this.sliceList.left, this.sliceList.right);\r\n            }\r\n            else {\r\n                newCtx === null || newCtx === void 0 ? void 0 : newCtx.drawImage(this._sorceImage, 0, 0, this.width, this.height);\r\n            }\r\n            if (this.rotate != 0 && this.rotate % 360 != 0) {\r\n                this._drawImage = ImageBase.Rotate(newCanvas, this.rotate, false);\r\n            }\r\n            else {\r\n                this._drawImage = newCanvas;\r\n            }\r\n        }\r\n        //回転\r\n        static Rotate(image, degree, resize) {\r\n            if (resize == undefined) {\r\n                resize = true;\r\n            }\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            const canvasSize = Math.sqrt(image.width * image.width + image.height * image.height);\r\n            ctx.imageSmoothingEnabled = false;\r\n            ctx.imageSmoothingQuality = \"low\";\r\n            if (resize) {\r\n                canvas.width = canvasSize;\r\n                canvas.height = canvasSize;\r\n            }\r\n            else {\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n            }\r\n            ctx.translate(canvas.width / 2, canvas.height / 2);\r\n            ctx.rotate(degree * Math.PI / 180);\r\n            ctx.translate(-canvas.width / 2, -canvas.height / 2);\r\n            ctx.drawImage(image, (resize == true ? canvasSize : canvas.width) / 2 - image.width / 2, (resize == true ? canvasSize : canvas.height) / 2 - image.height / 2);\r\n            ctx.translate(canvas.width / 2, canvas.height / 2);\r\n            ctx.rotate(-degree * Math.PI / 180);\r\n            ctx.translate(-canvas.width / 2, -canvas.height / 2);\r\n            return canvas;\r\n        }\r\n        //HTMLImageElement要素をHTMLCanvasElement要素に変換する\r\n        static ImageToCanvas(image) {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            ctx.drawImage(image, 0, 0);\r\n            return canvas;\r\n        }\r\n        //NoImage画像をサイズを合わせて返す\r\n        static getNoImage(width, height) {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n            ctx.drawImage(this.noImage.drawImage, 0, 0, width, height);\r\n            ctx.imageSmoothingEnabled = false;\r\n            canvas.id = \"noImage\";\r\n            return canvas;\r\n        }\r\n        //単色の画像を返す\r\n        static GetColorImage(size, color) {\r\n            if (color instanceof Color_1.Color) {\r\n                color = color.GetRGBAtext();\r\n            }\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = size.width;\r\n            canvas.height = size.height;\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(0, 0, size.width, size.height);\r\n            const image = new ImageBase(canvas);\r\n            image.size = size;\r\n            return image;\r\n        }\r\n    }\r\n    exports.ImageBase = ImageBase;\r\n    ImageBase._noImage = new ImageBase(\"\", null, 0, true);\r\n    {\r\n        const image = document.createElement(\"img\");\r\n        image.src = NoImg_bmp_1.default;\r\n        image.onload = () => {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            ctx.drawImage(image, 0, 0);\r\n            const imageBase = new ImageBase(canvas);\r\n            ImageBase.noImage = imageBase;\r\n            console.log(\"ImageBaseのnoImage値の設定が完了した\");\r\n        };\r\n    }\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=ImageBase.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Class/ImageBase.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Class/Point.js":
/*!********************************************!*\
  !*** ./JavaScript/GameBase/Class/Point.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.Point2d = void 0;\r\n    class Point2d {\r\n        constructor(x, y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        AddVector(vector) {\r\n            this.x += vector.x;\r\n            this.y += vector.y;\r\n        }\r\n        MinusVector(vector) {\r\n            this.x -= vector.x;\r\n            this.y -= vector.y;\r\n        }\r\n        getAddPoint(point) {\r\n            const newPoint = new Point2d(this.x + point.x, this.y + point.y);\r\n            return newPoint;\r\n        }\r\n        getMinusPoint(point) {\r\n            const newPoint = new Point2d(this.x - point.x, this.y - point.y);\r\n            return newPoint;\r\n        }\r\n        static get zero() {\r\n            return new Point2d(0, 0);\r\n        }\r\n        get copy() {\r\n            return Object.assign(new Point2d(0, 0), this);\r\n        }\r\n    }\r\n    exports.Point2d = Point2d;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Point.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Class/Point.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Class/Rectangle.js":
/*!************************************************!*\
  !*** ./JavaScript/GameBase/Class/Rectangle.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Point */ \"./JavaScript/GameBase/Class/Point.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.Rectangle = void 0;\r\n    class Rectangle {\r\n        constructor(sx, sy, ex, ey) {\r\n            this.startPoint = new Point_1.Point2d(sx, sy);\r\n            this.endPoint = new Point_1.Point2d(ex, ey);\r\n        }\r\n        get heightLength() {\r\n            return this.endPoint.y - this.startPoint.y;\r\n        }\r\n        get widthLength() {\r\n            return this.endPoint.x - this.startPoint.x;\r\n        }\r\n        get copy() {\r\n            return new Rectangle(this.startPoint.x, this.startPoint.y, this.endPoint.x, this.endPoint.y);\r\n        }\r\n    }\r\n    exports.Rectangle = Rectangle;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Rectangle.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Class/Rectangle.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Class/Size.js":
/*!*******************************************!*\
  !*** ./JavaScript/GameBase/Class/Size.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.Size = void 0;\r\n    class Size {\r\n        constructor(w, h) {\r\n            this.width = w;\r\n            this.height = h;\r\n        }\r\n        get copy() {\r\n            return new Size(this.width, this.height);\r\n        }\r\n    }\r\n    exports.Size = Size;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Size.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Class/Size.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Class/Stack.js":
/*!********************************************!*\
  !*** ./JavaScript/GameBase/Class/Stack.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.Stack = void 0;\r\n    class Stack {\r\n        constructor(list) {\r\n            this.List = list;\r\n        }\r\n        Add(value) {\r\n            this.List.push(value);\r\n        }\r\n        Pop() {\r\n            if (this.List.length == 0)\r\n                return null;\r\n            let popValue = this.List.pop();\r\n            return popValue;\r\n        }\r\n        get length() {\r\n            return this.List.length;\r\n        }\r\n        get Top() {\r\n            if (this.List.length == 0)\r\n                return null;\r\n            else\r\n                return this.List[this.List.length - 1];\r\n        }\r\n        getElement(index) {\r\n            if (this.List[index]) {\r\n                return this.List[index];\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    exports.Stack = Stack;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Stack.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Class/Stack.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Class/Vector.js":
/*!*********************************************!*\
  !*** ./JavaScript/GameBase/Class/Vector.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.Vector2d = void 0;\r\n    class Vector2d {\r\n        constructor(x, y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        get length() {\r\n            return Math.sqrt(this.x * this.x + this.y * this.y);\r\n        }\r\n        get copy() {\r\n            return Object.assign(new Vector2d(0, 0), this);\r\n        }\r\n        static get zero() {\r\n            return new Vector2d(0, 0).copy;\r\n        }\r\n        normalize() {\r\n            const length = this.length;\r\n            if (this.x != 0)\r\n                this.x /= length;\r\n            if (this.y != 0)\r\n                this.y /= length;\r\n            return this.copy;\r\n        }\r\n        multiply(value) {\r\n            this.x *= value;\r\n            this.y *= value;\r\n            return this.copy;\r\n        }\r\n    }\r\n    exports.Vector2d = Vector2d;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Vector.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Class/Vector.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Function/ArrayController.js":
/*!*********************************************************!*\
  !*** ./JavaScript/GameBase/Function/ArrayController.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ArrayRotate_2d_right = exports.ArrayRotate_2d_left = exports.ArrayCtl_RemoveFirstElement = exports.ArrayCtl_RemoveLastElement = exports.ArrayCtl_RemoveElement = void 0;\r\n    //配列の要素を削除する\r\n    function ArrayCtl_RemoveElement(array, value) {\r\n        let newArray = new Array();\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (array[i] != value) {\r\n                newArray.push(array[i]);\r\n            }\r\n        }\r\n        return newArray;\r\n    }\r\n    exports.ArrayCtl_RemoveElement = ArrayCtl_RemoveElement;\r\n    function ArrayCtl_RemoveLastElement(array, count) {\r\n        if (count < 1 || array.length < count) {\r\n            return [];\r\n        }\r\n        let newArray = new Array();\r\n        for (let i = 0; i < array.length - count; i++) {\r\n            newArray.push(array[i]);\r\n        }\r\n        return newArray;\r\n    }\r\n    exports.ArrayCtl_RemoveLastElement = ArrayCtl_RemoveLastElement;\r\n    function ArrayCtl_RemoveFirstElement(array, count) {\r\n        if (count < 1 || array.length < count) {\r\n            return [];\r\n        }\r\n        let newArray = new Array();\r\n        for (let i = count; i < array.length; i++) {\r\n            newArray.push(array[i]);\r\n        }\r\n        return newArray;\r\n    }\r\n    exports.ArrayCtl_RemoveFirstElement = ArrayCtl_RemoveFirstElement;\r\n    //2次元配列を回転させる\r\n    function ArrayRotate_2d_left(array) {\r\n        const ROW = array.length;\r\n        const COL = array[0].length;\r\n        const col = COL - 1;\r\n        const a = []; //new Array(COL);\r\n        for (let c = 0; c < COL; c++) {\r\n            a[c] = []; //new Array(ROW);\r\n            for (let r = 0; r < ROW; r++) {\r\n                a[c][r] = array[r][col - c];\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    exports.ArrayRotate_2d_left = ArrayRotate_2d_left;\r\n    function ArrayRotate_2d_right(array) {\r\n        const ROW = array.length;\r\n        const COL = array[0].length;\r\n        const row = ROW - 1;\r\n        const a = []; //new Array(COL);\r\n        for (let c = 0; c < COL; c++) {\r\n            a[c] = []; //new Array(ROW);\r\n            for (let r = 0; r < ROW; r++) {\r\n                a[c][r] = array[row - r][c];\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    exports.ArrayRotate_2d_right = ArrayRotate_2d_right;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=ArrayController.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Function/ArrayController.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Function/DictionaryController.js":
/*!**************************************************************!*\
  !*** ./JavaScript/GameBase/Function/DictionaryController.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.checkDictionaryKeys = void 0;\r\n    function checkDictionaryKeys(dictionary, keyName) {\r\n        for (let key in dictionary) {\r\n            if (key == keyName) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    exports.checkDictionaryKeys = checkDictionaryKeys;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=DictionaryController.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Function/DictionaryController.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Function/Math.js":
/*!**********************************************!*\
  !*** ./JavaScript/GameBase/Function/Math.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GetNumberBetween = void 0;\r\n    function GetNumberBetween(a, b) {\r\n        let sa = 0;\r\n        if ((a > 0 && b < 0) || (a < 0 && b > 0)) {\r\n            sa = Math.abs(a) + Math.abs(b);\r\n        }\r\n        else {\r\n            sa = Math.abs(Math.abs(a) - Math.abs(b));\r\n        }\r\n        return sa;\r\n    }\r\n    exports.GetNumberBetween = GetNumberBetween;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Math.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Function/Math.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Function/SliceImage.js":
/*!****************************************************!*\
  !*** ./JavaScript/GameBase/Function/SliceImage.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.sliceImage = void 0;\r\n    function sliceImage(image, size, up, down, left, right) {\r\n        const createImage = document.createElement(\"canvas\");\r\n        const ctx = createImage.getContext(\"2d\");\r\n        createImage.width = size.width;\r\n        createImage.height = size.height;\r\n        if (image.width < right + left || image.height < up + down) {\r\n            //console.log(`sliceImage:切り取りサイズが元画像のサイズを超えた\\n元(w:${image.width}, h:${image.height})\\n切(w:${right + left}, h:${up + down})`);\r\n            ctx.drawImage(image, 0, 0, size.width, size.height);\r\n            return createImage;\r\n        }\r\n        if (size.width < right + left || size.height < up + down) {\r\n            //console.log(`sliceImage:切り取りサイズが完成画像サイズよりも大きい\\n元(w:${size.width}, h:${size.height})\\n切(w:${right + left}, h:${up + down})`);\r\n            ctx.drawImage(image, 0, 0, size.width, size.height);\r\n            return createImage;\r\n        }\r\n        //左上\r\n        ctx.drawImage(image, 0, 0, left, up, 0, 0, left, up);\r\n        //右上\r\n        ctx.drawImage(image, image.width - right, 0, right, up, createImage.width - right, 0, right, up);\r\n        //右下\r\n        ctx.drawImage(image, image.width - right, image.height - down, right, down, createImage.width - right, createImage.height - down, right, down);\r\n        //左下\r\n        ctx.drawImage(image, 0, image.height - down, left, down, 0, createImage.height - down, left, down);\r\n        //上\r\n        ctx.drawImage(image, left, 0, image.width - (right + left), up, left, 0, createImage.width - (right + left), up);\r\n        //下\r\n        ctx.drawImage(image, left, image.height - down, image.width - (right + left), down, left, createImage.height - (down), createImage.width - (right + left), down);\r\n        //右\r\n        ctx.drawImage(image, image.width - right, up, right, image.height - (up + down), createImage.width - right, up, right, createImage.height - (up + down));\r\n        //左\r\n        ctx.drawImage(image, 0, up, left, image.height - (up + down), 0, up, left, createImage.height - (up + down));\r\n        //中央\r\n        ctx.drawImage(image, left, up, image.width - (left + right), image.height - (up + down), left, up, createImage.width - (left + right), createImage.height - (up + down));\r\n        return createImage;\r\n    }\r\n    exports.sliceImage = sliceImage;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SliceImage.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Function/SliceImage.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/Aabb.js":
/*!****************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/Aabb.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../../Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ./GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ./Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, Size_1, GameComponentBase_1, Transform_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.AabbComponent = void 0;\r\n    class AabbComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.parentTransform = new Transform_1.TransformComponent();\r\n            this.offset = new Point_1.Point2d(0, 0);\r\n            this.size = new Size_1.Size(0, 0);\r\n        }\r\n        get GlobalDrawStartPoint() {\r\n            let point = new Point_1.Point2d(0, 0);\r\n            point.x = this.parentTransform.globalDrawStartPoint.x + this.parentTransform.size.width / 2 + this.offset.x - this.size.width / 2;\r\n            point.y = this.parentTransform.globalDrawStartPoint.y + this.parentTransform.size.height / 2 + this.offset.y - this.size.height / 2;\r\n            return point;\r\n        }\r\n        set GlobalDrawStartPoint(value) {\r\n            const anchor = this.parentTransform.anchor;\r\n            const point = new Point_1.Point2d(value.x + this.size.width / 2 - this.offset.x - this.parentTransform.size.width / 2, value.y + this.size.height / 2 - this.offset.y - this.parentTransform.size.height / 2);\r\n            this.parentTransform.ChangeAnchor(new Point_1.Point2d(0, 0));\r\n            this.parentTransform.globalPosition = point;\r\n            this.parentTransform.ChangeAnchor(anchor);\r\n        }\r\n        get GlobalCenterPoint() {\r\n            let point = this.GlobalDrawStartPoint;\r\n            point.x += this.size.width / 2;\r\n            point.y += this.size.height / 2;\r\n            return point;\r\n        }\r\n        set GlobalCenterPoint(value) {\r\n            const point = new Point_1.Point2d(value.x - this.size.width / 2, value.y - this.size.height / 2);\r\n            this.GlobalDrawStartPoint = point;\r\n        }\r\n        get GlobalPoint_up() {\r\n            return this.GlobalDrawStartPoint.y;\r\n        }\r\n        get GlobalPoint_down() {\r\n            return this.GlobalDrawStartPoint.y + this.size.height;\r\n        }\r\n        get GlobalPoint_left() {\r\n            return this.GlobalDrawStartPoint.x;\r\n        }\r\n        get GlobalPoint_right() {\r\n            return this.GlobalDrawStartPoint.x + this.size.width;\r\n        }\r\n        set GlobalPoint_up(value) {\r\n            this.GlobalDrawStartPoint = new Point_1.Point2d(this.GlobalDrawStartPoint.x, value);\r\n        }\r\n        set GlobalPoint_down(value) {\r\n            this.GlobalDrawStartPoint = new Point_1.Point2d(this.GlobalDrawStartPoint.x, value - this.size.height);\r\n        }\r\n        set GlobalPoint_left(value) {\r\n            this.GlobalDrawStartPoint = new Point_1.Point2d(value, this.GlobalDrawStartPoint.y);\r\n        }\r\n        set GlobalPoint_right(value) {\r\n            this.GlobalDrawStartPoint = new Point_1.Point2d(value - this.size.width, this.GlobalDrawStartPoint.y);\r\n        }\r\n        Setup(init) {\r\n            var _a;\r\n            this.setUpFlag = true;\r\n            const transform = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n            this.parentTransform = transform;\r\n            if (init.offset != undefined)\r\n                this.offset = init.offset;\r\n            if (init.size != undefined)\r\n                this.size = init.size;\r\n        }\r\n        Update() {\r\n        }\r\n    }\r\n    exports.AabbComponent = AabbComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Aabb.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/Aabb.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/Animation.js":
/*!*********************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/Animation.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ./Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, GameComponentBase_1, Draw_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.AnimationComponent = void 0;\r\n    class AnimationComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.anime = [];\r\n            this.animations = {};\r\n            this.nowFlameNumber = 0;\r\n            this.loopTime_second = 0;\r\n            this.nextFlameInterval = 0;\r\n            this.intervalCount = 0;\r\n            this.loop = true;\r\n            this.loopFlag = true;\r\n        }\r\n        Setup(init) {\r\n            var _a;\r\n            this.setUpFlag = true;\r\n            const draw = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Draw_1.DrawComponent);\r\n            this.draw = draw;\r\n            if (init.loop != undefined)\r\n                this.loop = init.loop;\r\n            if (init.loopTime_second != undefined)\r\n                this.loopTime_second = init.loopTime_second;\r\n            if (init.anime != undefined)\r\n                this.SetAnimation(init.anime);\r\n            if (init.animes != undefined)\r\n                this.animations = init.animes;\r\n        }\r\n        SetAnimation(anime) {\r\n            var _a;\r\n            this.anime = anime;\r\n            this.nowFlameNumber = 0;\r\n            this.intervalCount = 0;\r\n            this.nextFlameInterval = Math.floor(this.loopTime_second * 60 / anime.length);\r\n            this.loopFlag = true;\r\n            if (this.draw != undefined && ((_a = this.draw) === null || _a === void 0 ? void 0 : _a.image) != null && anime.length > 0) {\r\n                this.draw.image = anime[0];\r\n            }\r\n        }\r\n        ChangeAnime(animeName) {\r\n            const anime = this.animations[animeName];\r\n            if (anime == undefined) {\r\n                //console.log(`エラー:AnimationComponent/ChangeAnime\\n指定の名前のアニメーションが[${this.parentObject ? this.parentObject.name : \"---\"}->${this.constructor.name}]にない`);\r\n                return false;\r\n            }\r\n            if (this.anime == anime) {\r\n                return true;\r\n            }\r\n            this.SetAnimation(anime);\r\n            return true;\r\n        }\r\n        Update() {\r\n            if (this.loopFlag == false || this.anime.length == 0) {\r\n                this.loopFlag = false;\r\n                return;\r\n            }\r\n            this.intervalCount++;\r\n            if (this.intervalCount > this.nextFlameInterval) {\r\n                this.intervalCount = 0;\r\n                this.nowFlameNumber++;\r\n                if (this.nowFlameNumber >= this.anime.length) {\r\n                    if (this.loop) {\r\n                        this.nowFlameNumber = 0;\r\n                    }\r\n                    else {\r\n                        this.nowFlameNumber--;\r\n                        this.loopFlag = false;\r\n                    }\r\n                }\r\n            }\r\n            this.draw.image = this.anime[this.nowFlameNumber];\r\n        }\r\n    }\r\n    exports.AnimationComponent = AnimationComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Animation.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/Animation.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/Camera.js":
/*!******************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/Camera.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ./GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../../System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ./Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../../Class/Color */ \"./JavaScript/GameBase/Class/Color.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Aabb_1, GameComponentBase_1, GlobalData_1, Transform_1, Color_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.CameraComponent = void 0;\r\n    class CameraComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.transform = null;\r\n            this.backGroundColor = new Color_1.Color(50, 50, 50);\r\n            this._pictureDatas = [];\r\n            this.beforeDrawData = [];\r\n            this.backCanvas = document.createElement(\"canvas\");\r\n            this.backCtx = this.backCanvas.getContext(\"2d\");\r\n        }\r\n        get pictureDatas() { return this._pictureDatas; }\r\n        Setup(init) {\r\n            var _a;\r\n            this.setUpFlag = true;\r\n            const transform = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n            this.transform = transform;\r\n            if (init.drawAabb instanceof Boolean)\r\n                CameraComponent.drawAABB = init.drawAabb;\r\n        }\r\n        Start() {\r\n            if (this.transform) {\r\n                this.backCanvas.width = this.transform.size.width;\r\n                this.backCanvas.height = this.transform.size.height;\r\n            }\r\n            else {\r\n                this.backCanvas.width = GlobalData_1.GlobalData.instance.ScreenSize.width;\r\n                this.backCanvas.height = GlobalData_1.GlobalData.instance.ScreenSize.height;\r\n            }\r\n            CameraComponent.mainCamera = this;\r\n        }\r\n        Update() {\r\n            var _a, _b, _c;\r\n            if (this.transform == null) {\r\n                return;\r\n            }\r\n            this.backCtx.fillStyle = this.backGroundColor.GetRGBAtext();\r\n            this.backCtx.fillRect(0, 0, this.backCanvas.width, this.backCanvas.height);\r\n            GlobalData_1.GlobalData.instance.mainCtx.clearRect(0, 0, GlobalData_1.GlobalData.instance.ScreenSize.width, GlobalData_1.GlobalData.instance.ScreenSize.height);\r\n            //描画番号順に分ける\r\n            const sortList = {};\r\n            for (let i = 0; i < this.pictureDatas.length; i++) {\r\n                if (sortList[GlobalData_1.GlobalData.instance.sort_NameToNumber(this.pictureDatas[i].sortName)]) {\r\n                    sortList[GlobalData_1.GlobalData.instance.sort_NameToNumber(this.pictureDatas[i].sortName)].push(this.pictureDatas[i]);\r\n                }\r\n                else {\r\n                    sortList[GlobalData_1.GlobalData.instance.sort_NameToNumber(this.pictureDatas[i].sortName)] = [this.pictureDatas[i]];\r\n                }\r\n            }\r\n            //キーを昇順で並べたリストを生成\r\n            const keyList = [];\r\n            for (const key in sortList) {\r\n                keyList.push(Number(key));\r\n            }\r\n            keyList.sort((a, b) => { return a - b; });\r\n            //描画番号ごとに指定されたソートをして最終的な描画の順番を作る\r\n            let drawList = [];\r\n            for (let i = 0; i < keyList.length; i++) {\r\n                let pictureDataList = [];\r\n                for (let n = 0; n < sortList[keyList[i]].length; n++) {\r\n                    pictureDataList.push(sortList[keyList[i]][n]);\r\n                }\r\n                switch (GlobalData_1.GlobalData.instance.drawSortList[keyList[i]].sortType) {\r\n                    case \"character\":\r\n                        pictureDataList.sort((a, b) => {\r\n                            return b.drawPoint.y + b.image.height - a.drawPoint.y + a.image.height;\r\n                        });\r\n                        break;\r\n                    case \"aabbPoint\":\r\n                        pictureDataList.sort((a, b) => {\r\n                            if (a.drawComponent == null || b.drawComponent == null) {\r\n                                return 0;\r\n                            }\r\n                            const objA = a.drawComponent.parentObject;\r\n                            const objB = b.drawComponent.parentObject;\r\n                            if (objA == null || objB == null) {\r\n                                return 0;\r\n                            }\r\n                            let centerPointA;\r\n                            let centerPointB;\r\n                            const checkAabbA = objA.GetComponent(Aabb_1.AabbComponent);\r\n                            const chekcAabbB = objB.GetComponent(Aabb_1.AabbComponent);\r\n                            if (checkAabbA == null) {\r\n                                centerPointA = a.drawPoint;\r\n                            }\r\n                            else {\r\n                                centerPointA = checkAabbA.GlobalCenterPoint;\r\n                            }\r\n                            if (chekcAabbB == null) {\r\n                                centerPointB = b.drawPoint;\r\n                            }\r\n                            else {\r\n                                centerPointB = chekcAabbB.GlobalCenterPoint;\r\n                            }\r\n                            return centerPointA.y - centerPointB.y;\r\n                        });\r\n                        break;\r\n                }\r\n                for (let i = 0; i < pictureDataList.length; i++) {\r\n                    drawList.push(pictureDataList[i]);\r\n                }\r\n            }\r\n            for (let i = 0; i < this.beforeDrawData.length; i++) {\r\n                this.beforeDrawData[i].sortNumber = -1;\r\n            }\r\n            this.beforeDrawData = [];\r\n            for (let i = 0; i < drawList.length; i++) {\r\n                const drawComponent = drawList[i].drawComponent;\r\n                if (drawComponent != null) {\r\n                    drawComponent.sortNumber = drawList.length - 1 - i;\r\n                    this.beforeDrawData.push(drawComponent);\r\n                }\r\n            }\r\n            //描画\r\n            for (let i = 0; i < drawList.length; i++) {\r\n                const pd = drawList[i];\r\n                if (pd.image.width == 0 || pd.image.height == 0) {\r\n                    continue;\r\n                }\r\n                if (pd.drawPoint.x + pd.image.width > this.transform.leftLine &&\r\n                    pd.drawPoint.x < this.transform.rightLine &&\r\n                    pd.drawPoint.y + pd.image.height > this.transform.upLine &&\r\n                    pd.drawPoint.y < this.transform.downLine) {\r\n                    this.backCtx.drawImage(pd.image, Math.floor(-this.transform.leftLine + pd.drawPoint.x), Math.floor(-this.transform.upLine + pd.drawPoint.y));\r\n                }\r\n            }\r\n            //aabb描画\r\n            if (((_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.parentScene) && CameraComponent.drawAABB) {\r\n                for (let i = 0; i < ((_c = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.parentScene) === null || _c === void 0 ? void 0 : _c.GetAllActiveObject().length); i++) {\r\n                    let aabb = this.parentObject.parentScene.GetAllActiveObject()[i].GetComponent(Aabb_1.AabbComponent);\r\n                    if (aabb) {\r\n                        this.backCtx.fillStyle = \"rgba(255, 50, 50, 0.3)\";\r\n                        this.backCtx.fillRect(-this.transform.leftLine + aabb.GlobalDrawStartPoint.x, -this.transform.upLine + aabb.GlobalDrawStartPoint.y, aabb.size.width, aabb.size.height);\r\n                        this.backCtx.strokeStyle = \"rgb(0, 0, 0)\";\r\n                        this.backCtx.lineWidth = 2;\r\n                        this.backCtx.strokeRect(-this.transform.leftLine + aabb.GlobalDrawStartPoint.x, -this.transform.upLine + aabb.GlobalDrawStartPoint.y, aabb.size.width, aabb.size.height);\r\n                    }\r\n                }\r\n            }\r\n            //画面に映す\r\n            GlobalData_1.GlobalData.instance.mainCtx.drawImage(this.backCanvas, 0, 0, GlobalData_1.GlobalData.instance.ScreenSize.width, GlobalData_1.GlobalData.instance.ScreenSize.height);\r\n            this._pictureDatas = [];\r\n        }\r\n        AddPictureData(pictureData) {\r\n            this._pictureDatas.push(pictureData);\r\n        }\r\n        Call() {\r\n            CameraComponent.mainCamera = this;\r\n        }\r\n        SetScreenSize(size) {\r\n            if (this.transform)\r\n                this.transform.size = size;\r\n            this.backCanvas.width = size.width;\r\n            this.backCanvas.height = size.height;\r\n        }\r\n    }\r\n    exports.CameraComponent = CameraComponent;\r\n    CameraComponent.drawAABB = false;\r\n    CameraComponent.mainCamera = null;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Camera.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/Camera.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/Draw.js":
/*!****************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/Draw.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../../Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ./GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../../System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../../Other/DrawEffect */ \"./JavaScript/GameBase/Other/DrawEffect.js\"), __webpack_require__(/*! ./Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ./Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../../Class/Color */ \"./JavaScript/GameBase/Class/Color.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, Point_1, GameComponentBase_1, GlobalData_1, DrawEffect_1, Camera_1, Transform_1, Color_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.DrawComponent = void 0;\r\n    class DrawComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._image = null;\r\n            this._backgroundColor = new Color_1.Color(0, 0, 0, 0);\r\n            this.sortName = \"\";\r\n            this.transform = null;\r\n            this.sortNumber = -1;\r\n            this.effect = [];\r\n            this._beforeDrawPoint = new Point_1.Point2d(0, 0);\r\n        }\r\n        get image() { return this._image; }\r\n        set image(value) {\r\n            this._image = value;\r\n            if (this.transform && this._image != null) {\r\n                this._image.width = this.transform.size.width;\r\n                this._image.height = this.transform.size.height;\r\n            }\r\n        }\r\n        set backgroundColor(value) {\r\n            this._backgroundColor = value;\r\n            if (this.image) {\r\n                this.image.backgroundColor = value;\r\n            }\r\n        }\r\n        get backgroundColor() {\r\n            return this._backgroundColor;\r\n        }\r\n        get beforeDrawPoint() {\r\n            return this._beforeDrawPoint;\r\n        }\r\n        Setup(init) {\r\n            var _a, _b;\r\n            this.setUpFlag = true;\r\n            const transform = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n            this.transform = transform;\r\n            if (init.sortName != undefined) {\r\n                if (GlobalData_1.GlobalData.instance.sort_NameToNumber(init.sortName) == -1) {\r\n                    console.log(`${((_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.name) ? this.parentObject.name : \"---\"}オブジェクトのDrawでsortNameに[${init.sortName ? init.sortName : \"---\"}]が設定されたが、正しい値ではない`);\r\n                }\r\n                else {\r\n                    this.sortName = init.sortName;\r\n                }\r\n            }\r\n            if (init.image instanceof ImageBase_1.ImageBase)\r\n                this.image = init.image;\r\n            if (init.effect instanceof Array) {\r\n                for (let i = 0; i < init.effect.length; i++) {\r\n                    if (init.effect[i] instanceof DrawEffect_1.DrawEffect)\r\n                        this.effect.push(init.effect[i]);\r\n                }\r\n            }\r\n            if (init.backgroundColor instanceof Color_1.Color)\r\n                this.backgroundColor = init.backgroundColor;\r\n        }\r\n        Update() {\r\n            let effect = [];\r\n            for (let i = 0; i < this.effect.length; i++) {\r\n                this.effect[i].update(this);\r\n                if (this.effect[i].deleteFlag == false) {\r\n                    effect.push(this.effect[i]);\r\n                }\r\n            }\r\n            this.effect = effect;\r\n            if (this.image && this.transform.size != this.image.size) {\r\n                this.image.size = this.transform.size;\r\n            }\r\n            if (Camera_1.CameraComponent.mainCamera != null && this.transform != null && this.image != null) {\r\n                Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                    \"image\": this.image.drawImage,\r\n                    \"sortName\": this.sortName,\r\n                    \"drawPoint\": this.transform.globalDrawStartPoint,\r\n                    \"drawComponent\": this,\r\n                });\r\n                this._beforeDrawPoint = this.transform.globalDrawStartPoint;\r\n            }\r\n        }\r\n    }\r\n    exports.DrawComponent = DrawComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Draw.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/Draw.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/DrawTextMultiline.js":
/*!*****************************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/DrawTextMultiline.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ./Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ./DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../../Class/Size */ \"./JavaScript/GameBase/Class/Size.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, Transform_1, DrawTextSingleline_1, Size_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.DrawTextMultilineComponent = void 0;\r\n    class DrawTextMultilineComponent extends DrawTextSingleline_1.DrawTextSinglelineComponent {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._textHeight = true;\r\n            this.rowInterval = 0;\r\n            this.margin = new Size_1.Size(5, 5);\r\n        }\r\n        set textHeight(value) {\r\n            this._textHeight = value;\r\n        }\r\n        get textHeight() {\r\n            return this._textHeight;\r\n        }\r\n        get textRow() {\r\n            return this.text.split(\"\\n\").length;\r\n        }\r\n        Setup(init) {\r\n            var _a;\r\n            this.setUpFlag = true;\r\n            const transform = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n            this.transform = transform;\r\n            if (init.effect != undefined)\r\n                this.effect = init.effect;\r\n            if (init.backGroundColor != undefined)\r\n                this.backgroundColor = init.backGroundColor;\r\n            if (init.effect != undefined)\r\n                this.effect = init.effect;\r\n            if (init.backGroundColor != undefined)\r\n                this._backgroundColor = init.backGroundColor;\r\n            if (init.backgroundImage != undefined)\r\n                this._backgroundImage = init.backgroundImage;\r\n            if (init.fontColor != undefined)\r\n                this._fontColor = init.fontColor;\r\n            if (init.fontFamily != undefined)\r\n                this._fontFamily = init.fontFamily;\r\n            if (init.fontSize != undefined)\r\n                this._fontSize = init.fontSize;\r\n            if (init.lineHeight != undefined)\r\n                this._lineHeight = init.lineHeight;\r\n            if (init.sortName != undefined)\r\n                this.sortName = init.sortName;\r\n            if (init.text != undefined)\r\n                this._text = init.text;\r\n            if (init.textAlign != undefined)\r\n                this._textAlign = init.textAlign;\r\n            if (init.margin != undefined)\r\n                this.margin = init.margin;\r\n            if (init.rowInterval != undefined)\r\n                this.rowInterval = init.rowInterval;\r\n            if (init.textHeight != undefined)\r\n                this._textHeight = init.textHeight;\r\n            this.CreateImage();\r\n        }\r\n        CreateImage() {\r\n            var _a;\r\n            const textList = this.text.split(\"\\n\");\r\n            this.backCanvas.width = this.width;\r\n            this.backCanvas.height = this.height;\r\n            if (this.backgroundImage != null) {\r\n                this.backgroundImage.width = this.width;\r\n                this.backgroundImage.height = this.height;\r\n            }\r\n            this.backCtx.clearRect(0, 0, this.width, this.height);\r\n            this.backCtx.fillStyle = this.backgroundColor.GetRGBAtext();\r\n            this.backCtx.fillRect(0, 0, this.width, this.height);\r\n            this.backCtx.fillStyle = this.fontColor.GetRGBAtext();\r\n            this.backCtx.textAlign = \"start\";\r\n            let startPoint_Height = 0;\r\n            this.backCtx.font = `${this.fontSize}px ${this.fontFamily}`;\r\n            const size = this.backCtx.measureText(this.text);\r\n            const rowHeight = size.actualBoundingBoxAscent + size.fontBoundingBoxDescent;\r\n            const height = rowHeight * this.textRow;\r\n            if (this.textHeight == true) {\r\n                this.backCanvas.height = height + this.margin.height * 2 + this.rowInterval * (textList.length - 1);\r\n                if ((_a = this.transform) === null || _a === void 0 ? void 0 : _a.size.height) {\r\n                    this.transform.size.height = height + this.margin.height * 2 + this.rowInterval * (textList.length - 1);\r\n                }\r\n                if (this.backgroundImage != null) {\r\n                    this.backgroundImage.height = height + this.margin.height * 2 + this.rowInterval * (textList.length - 1);\r\n                }\r\n                this.backCtx.fillStyle = this.fontColor.GetRGBAtext();\r\n                this.backCtx.font = `${this.fontSize}px ${this.fontFamily}`;\r\n            }\r\n            this.backCtx.font = `${this.fontSize}px ${this.fontFamily}`;\r\n            this.backCtx.textBaseline = \"top\";\r\n            switch (this.lineHeight) {\r\n                case \"top\":\r\n                    startPoint_Height = this.margin.height;\r\n                    break;\r\n                case \"center\":\r\n                    startPoint_Height = this.backCanvas.height / 2 - rowHeight * textList.length / 2;\r\n                    break;\r\n                case \"bottom\":\r\n                    startPoint_Height = this.backCanvas.height - rowHeight * textList.length - this.margin.height;\r\n                    break;\r\n            }\r\n            if (this.backgroundImage != null && this.transform != null) {\r\n                this.backgroundImage.size = this.transform.size;\r\n                this.backCtx.drawImage(this.backgroundImage.drawImage, 0, 0);\r\n            }\r\n            for (let i = 0; i < textList.length; i++) {\r\n                let startPoint = 0;\r\n                const rowWidth = this.backCtx.measureText(textList[i]).width;\r\n                switch (this.textAlign) {\r\n                    case \"center\":\r\n                        startPoint = this.backCanvas.width / 2 - rowWidth / 2;\r\n                        break;\r\n                    case \"start\":\r\n                    case \"left\":\r\n                        startPoint = this.margin.width;\r\n                        break;\r\n                    case \"end\":\r\n                    case \"right\":\r\n                        startPoint = this.backCanvas.width - rowWidth - this.margin.width;\r\n                        break;\r\n                }\r\n                this.backCtx.fillText(textList[i], startPoint, startPoint_Height + rowHeight * i + this.rowInterval * i);\r\n            }\r\n            const imageBase = new ImageBase_1.ImageBase(this.backCanvas);\r\n            this.image = imageBase;\r\n        }\r\n    }\r\n    exports.DrawTextMultilineComponent = DrawTextMultilineComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=DrawTextMultiline.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/DrawTextMultiline.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/DrawTextSingleline.js":
/*!******************************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/DrawTextSingleline.js ***!
  \******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../../Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ./Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ./Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ./Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Color_1, ImageBase_1, Camera_1, Draw_1, Transform_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.DrawTextSinglelineComponent = void 0;\r\n    class DrawTextSinglelineComponent extends Draw_1.DrawComponent {\r\n        constructor() {\r\n            var _a, _b;\r\n            super();\r\n            this._text = \"\";\r\n            this._fontColor = Color_1.Color.GetColor(\"white\");\r\n            this._fontFamily = \"Arial\";\r\n            this._fontSize = 14;\r\n            this._textAlign = \"start\";\r\n            this._lineHeight = \"center\";\r\n            this._backgroundImage = null;\r\n            this.backCanvas = document.createElement(\"canvas\");\r\n            this.backCanvas.width = this.transform ? (_a = this.transform) === null || _a === void 0 ? void 0 : _a.size.width : 0;\r\n            this.backCanvas.height = this.transform ? (_b = this.transform) === null || _b === void 0 ? void 0 : _b.size.height : 0;\r\n            this.backCtx = this.backCanvas.getContext(\"2d\");\r\n        }\r\n        set text(value) {\r\n            if (this._text != value) {\r\n                this._text = value;\r\n                this.CreateImage();\r\n            }\r\n        }\r\n        get text() {\r\n            return this._text;\r\n        }\r\n        set fontColor(value) {\r\n            this._fontColor = value;\r\n            this.CreateImage();\r\n        }\r\n        get fontColor() {\r\n            return this._fontColor;\r\n        }\r\n        set fontFamily(value) {\r\n            this._fontFamily = value;\r\n            this.CreateImage();\r\n        }\r\n        get fontFamily() {\r\n            return this._fontFamily;\r\n        }\r\n        set fontSize(value) {\r\n            this._fontSize = value;\r\n            this.CreateImage();\r\n        }\r\n        get fontSize() {\r\n            return this._fontSize;\r\n        }\r\n        set textAlign(value) {\r\n            this._textAlign = value;\r\n            this.CreateImage();\r\n        }\r\n        get textAlign() {\r\n            return this._textAlign;\r\n        }\r\n        set lineHeight(value) {\r\n            this._lineHeight = value;\r\n        }\r\n        get lineHeight() {\r\n            return this._lineHeight;\r\n        }\r\n        set width(value) {\r\n            var _a;\r\n            if ((_a = this.transform) === null || _a === void 0 ? void 0 : _a.size.width) {\r\n                this.transform.size.width = value;\r\n            }\r\n            this.CreateImage();\r\n        }\r\n        get width() {\r\n            return this.transform ? this.transform.size.width : 0;\r\n        }\r\n        set height(value) {\r\n            var _a;\r\n            if ((_a = this.transform) === null || _a === void 0 ? void 0 : _a.size.height) {\r\n                this.transform.size.height = value;\r\n            }\r\n            this.CreateImage();\r\n        }\r\n        get height() {\r\n            return this.transform ? this.transform.size.height : 0;\r\n        }\r\n        get backgroundImage() {\r\n            return this._backgroundImage;\r\n        }\r\n        set backgroundImage(value) {\r\n            this._backgroundImage = value;\r\n            if (value != null) {\r\n                value.loadEvent = () => {\r\n                    this.CreateImage();\r\n                };\r\n            }\r\n        }\r\n        Setup(init) {\r\n            var _a;\r\n            const transform = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n            this.transform = transform;\r\n            this.setUpFlag = true;\r\n            this.transform = transform;\r\n            if (init.sortName != undefined)\r\n                this.sortName = init.sortName;\r\n            if (init.effect != undefined)\r\n                this.effect = init.effect;\r\n            if (init.backGroundColor != undefined)\r\n                this.backgroundColor = init.backGroundColor;\r\n            if (init.backgroundImage != undefined)\r\n                this.backgroundImage = init.backgroundImage;\r\n            if (init.fontColor != undefined)\r\n                this.fontColor = init.fontColor;\r\n            if (init.fontFamily != undefined)\r\n                this.fontFamily = init.fontFamily;\r\n            if (init.fontSize != undefined)\r\n                this.fontSize = init.fontSize;\r\n            if (init.lineHeight != undefined)\r\n                this.lineHeight = init.lineHeight;\r\n            if (init.sortName != undefined)\r\n                this.sortName = init.sortName;\r\n            if (init.text != undefined)\r\n                this.text = init.text;\r\n            if (init.textAlign != undefined)\r\n                this.textAlign = init.textAlign;\r\n        }\r\n        Update() {\r\n            var _a;\r\n            let effect = [];\r\n            for (let i = 0; i < this.effect.length; i++) {\r\n                this.effect[i].update(this);\r\n                if (this.effect[i].deleteFlag == false) {\r\n                    effect.push(this.effect[i]);\r\n                }\r\n            }\r\n            this.effect = effect;\r\n            if (this.transform.size.width != ((_a = this.image) === null || _a === void 0 ? void 0 : _a.width) || this.transform.size.height != this.image.height) {\r\n                this.CreateImage();\r\n            }\r\n            if (Camera_1.CameraComponent.mainCamera != null && this.image != null && this.transform) {\r\n                Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                    \"image\": this.image.drawImage,\r\n                    \"sortName\": this.sortName,\r\n                    \"drawPoint\": this.transform.globalDrawStartPoint,\r\n                    \"drawComponent\": this,\r\n                });\r\n                this._beforeDrawPoint = this.transform.globalDrawStartPoint;\r\n            }\r\n        }\r\n        CreateImage() {\r\n            this.backCanvas.width = this.width;\r\n            this.backCanvas.height = this.height;\r\n            if (this.backgroundImage != null) {\r\n                this.backgroundImage.width = this.width;\r\n                this.backgroundImage.height = this.height;\r\n            }\r\n            this.backCtx.clearRect(0, 0, this.width, this.height);\r\n            this.backCtx.fillStyle = this.backgroundColor.GetRGBAtext();\r\n            this.backCtx.fillRect(0, 0, this.width, this.height);\r\n            this.backCtx.font = `${this.fontSize}px ${this.fontFamily}`;\r\n            this.backCtx.fillStyle = this.fontColor.GetRGBAtext();\r\n            this.backCtx.textAlign = \"start\";\r\n            let startPoint = 0;\r\n            switch (this.textAlign) {\r\n                case \"center\":\r\n                    {\r\n                        const textLength = this.backCtx.measureText(this.text);\r\n                        startPoint = this.backCanvas.width / 2 - textLength.width / 2;\r\n                    }\r\n                    break;\r\n                case \"start\":\r\n                case \"left\":\r\n                    startPoint = 0;\r\n                    break;\r\n                case \"end\":\r\n                case \"right\":\r\n                    {\r\n                        const textLength = this.backCtx.measureText(this.text);\r\n                        startPoint = this.backCanvas.width - textLength.width;\r\n                    }\r\n                    break;\r\n            }\r\n            const size = this.backCtx.measureText(this.text);\r\n            const height = size.actualBoundingBoxAscent + size.fontBoundingBoxDescent;\r\n            let startPoint_Height = 0;\r\n            switch (this.lineHeight) {\r\n                case \"top\":\r\n                    startPoint_Height = 0;\r\n                    break;\r\n                case \"center\":\r\n                    startPoint_Height = this.backCanvas.height / 2 - height / 2;\r\n                    break;\r\n                case \"bottom\":\r\n                    startPoint_Height = this.backCanvas.height - height;\r\n                    break;\r\n            }\r\n            this.backCtx.textBaseline = \"top\";\r\n            if (this.backgroundImage != null && this.transform != null) {\r\n                this.backgroundImage.size = this.transform.size;\r\n                this.backCtx.drawImage(this.backgroundImage.drawImage, 0, 0);\r\n            }\r\n            this.backCtx.fillText(this.text, startPoint, startPoint_Height);\r\n            const imageBase = new ImageBase_1.ImageBase(this.backCanvas);\r\n            this.image = imageBase;\r\n        }\r\n    }\r\n    exports.DrawTextSinglelineComponent = DrawTextSinglelineComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=DrawTextSingleline.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/DrawTextSingleline.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/GameComponentBase.js":
/*!*****************************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/GameComponentBase.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameComponentBase = void 0;\r\n    class GameComponentBase {\r\n        constructor() {\r\n            //Start関数が実行されたかのフラグ\r\n            this._startFlag = false;\r\n            //Setup関数が実行されたかのフラグ\r\n            this._setUpFlag = false;\r\n            this._parentObject = null;\r\n            this._active = true;\r\n        }\r\n        get startFlag() { return this._startFlag; }\r\n        set startFlag(value) {\r\n            if (value == true) {\r\n                this._startFlag = true;\r\n            }\r\n        }\r\n        get setUpFlag() { return this._setUpFlag; }\r\n        set setUpFlag(value) {\r\n            if (value == true) {\r\n                this._setUpFlag = true;\r\n            }\r\n        }\r\n        Setup(init) {\r\n            this.setUpFlag = true;\r\n        }\r\n        get parentObject() {\r\n            return this._parentObject;\r\n        }\r\n        set parentObject(value) {\r\n            this._parentObject = value;\r\n        }\r\n        get active() {\r\n            if (this.setUpFlag == true) {\r\n                return this._active;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        set active(value) {\r\n            this._active = value;\r\n        }\r\n        Start() { }\r\n        ;\r\n        Update() { }\r\n        ;\r\n        Call() { }\r\n        ;\r\n        Move() { }\r\n        ;\r\n    }\r\n    exports.GameComponentBase = GameComponentBase;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameComponentBase.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/GameComponentBase.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/ScrollBox.js":
/*!*********************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/ScrollBox.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../../Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ./GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../../System/InputManager */ \"./JavaScript/GameBase/System/InputManager.js\"), __webpack_require__(/*! ./Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ./Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, Size_1, GameComponentBase_1, InputManager_1, Transform_1, Ui_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ScrollBoxComponent = void 0;\r\n    class ScrollBoxComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.transform = null;\r\n            this.ui = null;\r\n            this.scrollValue = 0;\r\n            this.scrollStep = 0;\r\n            this.stepCount = 0;\r\n            this.elements = [];\r\n            this.elementSize = new Size_1.Size(120, 30);\r\n            this.margin = new Size_1.Size(0, 0);\r\n            this.elementInterval = 0;\r\n            this.maxDisplayCount = 0;\r\n        }\r\n        Setup(init) {\r\n            var _a, _b;\r\n            this.setUpFlag = true;\r\n            const transform = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Transform_1.TransformComponent);\r\n            this.transform = transform;\r\n            const ui = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.GetComponent(Ui_1.UiComponent);\r\n            this.ui = ui;\r\n            if (init.elementInterval != undefined)\r\n                this.elementInterval = init.elementInterval;\r\n            if (init.elementSize != undefined)\r\n                this.elementSize = init.elementSize;\r\n            if (init.elements != undefined) {\r\n                for (let i = 0; i < init.elements.length; i++) {\r\n                    this.AddElement(init.elements[i]);\r\n                }\r\n            }\r\n            if (init.margin != undefined)\r\n                this.margin = init.margin;\r\n            if (init.scrollStep != undefined)\r\n                this.scrollStep = init.scrollStep;\r\n        }\r\n        Update() {\r\n            var _a, _b;\r\n            //スクロールされているか\r\n            let hover = this.ui.hover;\r\n            if (hover == false) {\r\n                (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.ChildrenProcessing((object) => {\r\n                    const checkUi = object.GetComponent(Ui_1.UiComponent);\r\n                    if (checkUi != null) {\r\n                        const ui = checkUi;\r\n                        if (ui.hover == true) {\r\n                            hover = true;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (hover == true || ((_b = this.ui) === null || _b === void 0 ? void 0 : _b.focus) == true) {\r\n                this.stepCount += InputManager_1.InputManager.instance.mouseScroll;\r\n                if (this.stepCount > this.scrollStep) {\r\n                    this.stepCount = 0;\r\n                    this.scrollValue++;\r\n                    const maxScrollPoint = (this.elements.length > this.maxDisplayCount ? this.elements.length - this.maxDisplayCount : 0);\r\n                    if (this.scrollValue > maxScrollPoint) {\r\n                        this.scrollValue = maxScrollPoint;\r\n                    }\r\n                }\r\n                else if (this.stepCount < -this.scrollStep) {\r\n                    this.stepCount = 0;\r\n                    this.scrollValue--;\r\n                    if (this.scrollValue < 0) {\r\n                        this.scrollValue = 0;\r\n                    }\r\n                }\r\n            }\r\n            //表示要素数とかの計算\r\n            {\r\n                const size = this.transform.size.copy;\r\n                size.height -= this.margin.height;\r\n                if (size.width <= 0 || size.height <= 0) {\r\n                    return;\r\n                }\r\n                this.maxDisplayCount = Math.floor((size.height + this.elementInterval) / (this.elementSize.height + this.elementInterval));\r\n            }\r\n            //全ての要素を非表示\r\n            for (let i = 0; i < this.elements.length; i++) {\r\n                this.elements[i].active = false;\r\n            }\r\n            //表示する要素を表示\r\n            this.elementSize.width = this.transform.size.width - this.margin.width * 2;\r\n            for (let i = 0; i < this.maxDisplayCount; i++) {\r\n                if (i + this.scrollValue >= this.elements.length) {\r\n                    break;\r\n                }\r\n                const displayElement = this.elements[i + this.scrollValue];\r\n                const checkTransform = displayElement.GetComponent(Transform_1.TransformComponent);\r\n                if (checkTransform != null) {\r\n                    const elementTransform = checkTransform;\r\n                    displayElement.active = true;\r\n                    elementTransform.size = this.elementSize;\r\n                    elementTransform.anchor = new Point_1.Point2d(0, 0);\r\n                    elementTransform.localPosition.x = this.margin.width;\r\n                    elementTransform.localPosition.y = this.margin.height + (this.elementSize.height + this.elementInterval) * i;\r\n                }\r\n            }\r\n        }\r\n        AddElement(obj) {\r\n            this.parentObject.AddChildObject(obj);\r\n            const checkTransform = obj.GetComponent(Transform_1.TransformComponent);\r\n            if (checkTransform != null) {\r\n                const transform = checkTransform;\r\n                transform.anchor = new Point_1.Point2d(0, 0);\r\n                transform.size = this.elementSize;\r\n            }\r\n            this.elements.push(obj);\r\n        }\r\n        PopElement(objName) {\r\n            let newArray = [];\r\n            let returnObj = null;\r\n            for (let i = 0; i < this.elements.length; i++) {\r\n                if (this.elements[i].name == objName) {\r\n                    returnObj = this.elements[i];\r\n                }\r\n                else {\r\n                    newArray.push(this.elements[i]);\r\n                }\r\n            }\r\n            this.elements = newArray;\r\n            return returnObj;\r\n        }\r\n    }\r\n    exports.ScrollBoxComponent = ScrollBoxComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=ScrollBox.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/ScrollBox.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/Transform.js":
/*!*********************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/Transform.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ./GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../../Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../../Class/Point */ \"./JavaScript/GameBase/Class/Point.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Camera_1, GameComponentBase_1, Size_1, Point_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.TransformComponent = void 0;\r\n    class TransformComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.absolute = false;\r\n            this._absolutePosition = new Point_1.Point2d(0, 0);\r\n            this.position = new Point_1.Point2d(0, 0);\r\n            this.anchor = new Point_1.Point2d(0.5, 0.5);\r\n            this.size = new Size_1.Size(64, 64);\r\n        }\r\n        get absolutePosition() {\r\n            return this._absolutePosition;\r\n        }\r\n        set absolutePosition(value) {\r\n            this._absolutePosition = value;\r\n        }\r\n        get globalPosition() {\r\n            var _a;\r\n            let transform = null;\r\n            if ((_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.parentObject) {\r\n                transform = this.parentObject.parentObject.GetComponent(TransformComponent);\r\n            }\r\n            if (transform == null) {\r\n                return this.position;\r\n            }\r\n            else {\r\n                return new Point_1.Point2d(this.position.x + transform.globalDrawStartPoint.x, this.position.y + transform.globalDrawStartPoint.y);\r\n            }\r\n        }\r\n        set globalPosition(value) {\r\n            var _a;\r\n            let transform = null;\r\n            if ((_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.parentObject) {\r\n                transform = this.parentObject.parentObject.GetComponent(TransformComponent);\r\n            }\r\n            if (transform == null) {\r\n                this.position = value;\r\n            }\r\n            else {\r\n                this.position = new Point_1.Point2d(value.x - transform.globalDrawStartPoint.x, value.y - transform.globalDrawStartPoint.y);\r\n            }\r\n        }\r\n        get localPosition() {\r\n            return this.position;\r\n        }\r\n        set localPosition(value) {\r\n            this.position = value;\r\n        }\r\n        get upLine() {\r\n            return this.position.y - this.size.height * this.anchor.y;\r\n        }\r\n        get downLine() {\r\n            return this.position.y - this.size.height * this.anchor.y + this.size.height;\r\n        }\r\n        get leftLine() {\r\n            return this.position.x - this.size.width * this.anchor.x;\r\n        }\r\n        get rightLine() {\r\n            return this.position.x - this.size.width * this.anchor.x + this.size.width;\r\n        }\r\n        get centerPoint() {\r\n            const point = new Point_1.Point2d(0, 0);\r\n            point.x = this.position.x - this.size.width * this.anchor.x;\r\n            point.y = this.position.y - this.size.height * this.anchor.y;\r\n            point.x += this.size.width / 2;\r\n            point.y += this.size.height / 2;\r\n            return point;\r\n        }\r\n        get drawStartPoint() {\r\n            const point = new Point_1.Point2d(0, 0);\r\n            point.x = this.position.x - this.size.width * this.anchor.x;\r\n            point.y = this.position.y - this.size.height * this.anchor.y;\r\n            return point;\r\n        }\r\n        get globalDrawStartPoint() {\r\n            const point = new Point_1.Point2d(0, 0);\r\n            point.x = this.globalPosition.x - this.size.width * this.anchor.x;\r\n            point.y = this.globalPosition.y - this.size.height * this.anchor.y;\r\n            return point;\r\n        }\r\n        set upLine(value) {\r\n            const anchor = this.anchor;\r\n            this.ChangeAnchor(new Point_1.Point2d(0, 0));\r\n            this.position.y = value;\r\n            this.ChangeAnchor(anchor);\r\n        }\r\n        set downLine(value) {\r\n            const anchor = this.anchor;\r\n            this.ChangeAnchor(new Point_1.Point2d(1, 1));\r\n            this.position.y = value;\r\n            this.ChangeAnchor(anchor);\r\n        }\r\n        set leftLine(value) {\r\n            const anchor = this.anchor;\r\n            this.ChangeAnchor(new Point_1.Point2d(0, 0));\r\n            this.position.x = value;\r\n            this.ChangeAnchor(anchor);\r\n        }\r\n        set rightLine(value) {\r\n            const anchor = this.anchor;\r\n            this.ChangeAnchor(new Point_1.Point2d(1, 1));\r\n            this.position.x = value;\r\n            this.ChangeAnchor(anchor);\r\n        }\r\n        set centerPoint(value) {\r\n            const anchor = this.anchor;\r\n            this.ChangeAnchor(new Point_1.Point2d(0.5, 0.5));\r\n            this.position = value;\r\n            this.ChangeAnchor(anchor);\r\n        }\r\n        ChangeAnchor(anchor) {\r\n            const startingPoint = new Point_1.Point2d(0, 0);\r\n            startingPoint.x = this.position.x - this.size.width * this.anchor.x;\r\n            startingPoint.y = this.position.y - this.size.height * this.anchor.y;\r\n            const newPoint = new Point_1.Point2d(0, 0);\r\n            newPoint.x = startingPoint.x + this.size.width * anchor.x;\r\n            newPoint.y = startingPoint.y + this.size.height * anchor.y;\r\n            this.position = newPoint;\r\n            this.anchor = anchor;\r\n        }\r\n        Setup(init) {\r\n            super.Setup(init);\r\n            if (init.position != undefined) {\r\n                this.position = init.position;\r\n                this.absolutePosition = init.position;\r\n            }\r\n            if (init.anchor != undefined) {\r\n                this.anchor = init.anchor;\r\n            }\r\n            if (init.absolute != undefined) {\r\n                this.absolute = init.absolute;\r\n            }\r\n            if (init.size != undefined) {\r\n                this.size = init.size;\r\n            }\r\n        }\r\n        Update() {\r\n            var _a;\r\n            if (this.absolute && ((_a = Camera_1.CameraComponent.mainCamera) === null || _a === void 0 ? void 0 : _a.transform) != undefined) {\r\n                this.position = new Point_1.Point2d(Camera_1.CameraComponent.mainCamera.transform.globalDrawStartPoint.x + this.absolutePosition.x, Camera_1.CameraComponent.mainCamera.transform.globalDrawStartPoint.y + this.absolutePosition.y);\r\n            }\r\n        }\r\n    }\r\n    exports.TransformComponent = TransformComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Transform.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/Transform.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Component/Ui.js":
/*!**************************************************!*\
  !*** ./JavaScript/GameBase/Game/Component/Ui.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ./GameComponentBase */ \"./JavaScript/GameBase/Game/Component/GameComponentBase.js\"), __webpack_require__(/*! ../../System/InputManager */ \"./JavaScript/GameBase/System/InputManager.js\"), __webpack_require__(/*! ./Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ./Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ./DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ./DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, GameComponentBase_1, InputManager_1, Camera_1, Draw_1, DrawTextSingleline_1, DrawTextMultiline_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.UiComponent = void 0;\r\n    class UiComponent extends GameComponentBase_1.GameComponentBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.focusColor = \"\";\r\n            this.hoverColor = \"\";\r\n            this.draw = null;\r\n            this.hoverLineWidth = 8;\r\n            this.hoverLineColor = \"rgb(150, 150, 150)\";\r\n            this.focusLineWidth = 8;\r\n            this.focusLineColor = \"white\";\r\n            this.clickEvent = null;\r\n            this.keyDownEvent = null;\r\n            this.keyStayEvent = null;\r\n            this.keyUpEvent = null;\r\n            this.focusImage = document.createElement(\"canvas\");\r\n            this.hoverImage = document.createElement(\"canvas\");\r\n            this._focus = false;\r\n            this._hover = false;\r\n        }\r\n        get focus() {\r\n            return this._focus;\r\n        }\r\n        set focus(value) {\r\n            this._focus = value;\r\n        }\r\n        get hover() {\r\n            return this._hover;\r\n        }\r\n        set hover(value) {\r\n            this._hover = value;\r\n        }\r\n        Setup(init) {\r\n            var _a, _b, _c;\r\n            this.setUpFlag = true;\r\n            let draw = (_a = this.parentObject) === null || _a === void 0 ? void 0 : _a.GetComponent(Draw_1.DrawComponent);\r\n            if (draw == null) {\r\n                draw = (_b = this.parentObject) === null || _b === void 0 ? void 0 : _b.GetComponent(DrawTextSingleline_1.DrawTextSinglelineComponent);\r\n            }\r\n            if (draw == null) {\r\n                draw = (_c = this.parentObject) === null || _c === void 0 ? void 0 : _c.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent);\r\n            }\r\n            this.draw = draw;\r\n            if (init.clickEvent != undefined)\r\n                this.clickEvent = init.clickEvent;\r\n            if (init.update != undefined)\r\n                this.update = init.update;\r\n            if (init.keyDownEvent != undefined)\r\n                this.keyDownEvent = init.keyDownEvent;\r\n            if (init.keyStayEvent != undefined)\r\n                this.keyStayEvent = init.keyStayEvent;\r\n            if (init.keyUpEvent != undefined)\r\n                this.keyUpEvent = init.keyUpEvent;\r\n            if (init.focusLineColor != undefined)\r\n                this.focusLineColor = init.focusLineColor;\r\n            if (init.focusLineWidth != undefined)\r\n                this.focusLineWidth = init.focusLineWidth;\r\n            if (init.hoverLineColor != undefined)\r\n                this.hoverLineColor = init.hoverLineColor;\r\n            if (init.hoverLineWidth != undefined)\r\n                this.hoverLineWidth = init.hoverLineWidth;\r\n        }\r\n        Start() {\r\n            this.parentObject.tag.push(\"UI\");\r\n        }\r\n        Update() {\r\n            var _a;\r\n            //自身の画像のサイズに合わせて線のサイズを変える\r\n            if (((_a = this.draw) === null || _a === void 0 ? void 0 : _a.image) != null &&\r\n                (this.draw.image.width + this.hoverLineWidth * 2 != this.hoverImage.width ||\r\n                    this.draw.image.height + this.hoverLineWidth * 2 != this.hoverImage.height ||\r\n                    this.draw.image.width + this.focusLineWidth * 2 != this.focusImage.width ||\r\n                    this.draw.image.height + this.focusLineWidth * 2 != this.focusImage.height)) {\r\n                this.CreateLineImage();\r\n            }\r\n            //繰り返し処理\r\n            if (this.update)\r\n                this.update(this);\r\n            //hover(マウスと重なったとき)の動作\r\n            if (InputManager_1.InputManager.instance.GetPointObject(\"UI\") === this.parentObject) {\r\n                this._hover = true;\r\n            }\r\n            else {\r\n                this._hover = false;\r\n            }\r\n            //clidk(自身をクリックしたとき)の動作\r\n            if (InputManager_1.InputManager.instance.mouseClick_left == \"begin\" && InputManager_1.InputManager.instance.GetPointObject(\"UI\") === this.parentObject) {\r\n                InputManager_1.InputManager.instance.mouseClick_left = \"stay\";\r\n                //ほかのすべてのhover・focus状態を解く\r\n                const objects = this.parentObject.parentScene.GetAllObject();\r\n                for (let i = 0; i < objects.length; i++) {\r\n                    const ui = objects[i].GetComponent(UiComponent);\r\n                    if (ui) {\r\n                        ui.focus = false;\r\n                    }\r\n                }\r\n                //focus(選択中のフラグ)をtrueにする\r\n                this._focus = true;\r\n                //自身のイベント\r\n                if (this.clickEvent != null) {\r\n                    this.clickEvent(this);\r\n                }\r\n                let object = this.parentObject;\r\n                //親要素のクリックイベントも発火させる\r\n                while (true) {\r\n                    if (object != null && (object === null || object === void 0 ? void 0 : object.parentObject) != null) {\r\n                        object = object.parentObject;\r\n                        const ui = object.GetComponent(UiComponent);\r\n                        if (ui != null && ui.clickEvent) {\r\n                            ui.clickEvent(ui);\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            //キー入力\r\n            if (this.focus == true) {\r\n                if (this.keyDownEvent) {\r\n                    const downKeys = InputManager_1.InputManager.instance.keyEnterList;\r\n                    for (let key in downKeys) {\r\n                        if (downKeys[key] == true) {\r\n                            this.keyDownEvent(this, key);\r\n                        }\r\n                    }\r\n                }\r\n                if (this.keyStayEvent) {\r\n                    const stayKeys = InputManager_1.InputManager.instance.keyPressList;\r\n                    for (let key in stayKeys) {\r\n                        if (stayKeys[key] == true) {\r\n                            this.keyStayEvent(this, key);\r\n                        }\r\n                    }\r\n                }\r\n                if (this.keyUpEvent) {\r\n                    const upKeys = InputManager_1.InputManager.instance.keyExitList;\r\n                    for (let key in upKeys) {\r\n                        if (upKeys[key] == true) {\r\n                            this.keyUpEvent(this, key);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //選択中であることをを示す線\r\n            if (this.hover == true) {\r\n                if (Camera_1.CameraComponent.mainCamera) {\r\n                    Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                        \"image\": this.hoverImage,\r\n                        \"sortName\": this.draw.sortName,\r\n                        \"drawPoint\": new Point_1.Point2d(this.draw.beforeDrawPoint.x - this.hoverLineWidth, this.draw.beforeDrawPoint.y - this.hoverLineWidth),\r\n                        \"drawComponent\": null,\r\n                    });\r\n                }\r\n            }\r\n            if (this.focus) {\r\n                if (Camera_1.CameraComponent.mainCamera) {\r\n                    Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                        \"image\": this.focusImage,\r\n                        \"sortName\": this.draw.sortName,\r\n                        \"drawPoint\": new Point_1.Point2d(this.draw.beforeDrawPoint.x - this.focusLineWidth, this.draw.beforeDrawPoint.y - this.focusLineWidth),\r\n                        \"drawComponent\": null,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        CreateLineImage() {\r\n            //hover\r\n            const ctx_hover = this.hoverImage.getContext(\"2d\");\r\n            if (this.hoverLineWidth > 0) {\r\n                this.hoverImage.width = this.draw.image.width + this.hoverLineWidth * 2;\r\n                this.hoverImage.height = this.draw.image.height + this.hoverLineWidth * 2;\r\n                ctx_hover.fillStyle = this.hoverLineColor;\r\n                ctx_hover.fillRect(0, 0, this.hoverImage.width, this.hoverImage.height);\r\n                ctx_hover.clearRect(this.hoverLineWidth, this.hoverLineWidth, this.draw.image.width, this.draw.image.height);\r\n            }\r\n            else {\r\n                ctx_hover.clearRect(0, 0, this.hoverImage.width, this.hoverImage.height);\r\n            }\r\n            //focus\r\n            const ctx_focus = this.focusImage.getContext(\"2d\");\r\n            if (this.focusLineWidth > 0) {\r\n                this.focusImage.width = this.draw.image.width + this.focusLineWidth * 2;\r\n                this.focusImage.height = this.draw.image.height + this.focusLineWidth * 2;\r\n                ctx_focus.fillStyle = this.focusLineColor;\r\n                ctx_focus.fillRect(0, 0, this.focusImage.width, this.focusImage.height);\r\n                ctx_focus.clearRect(this.focusLineWidth, this.focusLineWidth, this.draw.image.width, this.draw.image.height);\r\n            }\r\n            else {\r\n                ctx_focus.clearRect(0, 0, this.focusImage.width, this.focusImage.height);\r\n            }\r\n        }\r\n    }\r\n    exports.UiComponent = UiComponent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Ui.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Component/Ui.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Object/Button.js":
/*!***************************************************!*\
  !*** ./JavaScript/GameBase/Game/Object/Button.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ./GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, DrawTextSingleline_1, Transform_1, Ui_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ButtonObject = void 0;\r\n    class ButtonObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new DrawTextSingleline_1.DrawTextSinglelineComponent(),\r\n                new Ui_1.UiComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.ButtonObject = ButtonObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Button.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Object/Button.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Object/Camera.js":
/*!***************************************************!*\
  !*** ./JavaScript/GameBase/Game/Object/Camera.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ./GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Camera_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.CameraObject = void 0;\r\n    class CameraObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Camera_1.CameraComponent(),\r\n                new Transform_1.TransformComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.CameraObject = CameraObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Camera.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Object/Camera.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Object/GameObjectBase.js":
/*!***********************************************************!*\
  !*** ./JavaScript/GameBase/Game/Object/GameObjectBase.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ArrayController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameObjectBase = void 0;\r\n    class GameObjectBase {\r\n        constructor(objectName, init, active, tagName) {\r\n            this.components = [];\r\n            this.parentScene = null;\r\n            this._parentObject = null;\r\n            this.children = [];\r\n            this._name = \"undefined\";\r\n            this._tag = [];\r\n            this._startFlag = false;\r\n            this._setupFlag = false;\r\n            this.active = true;\r\n            this._name = objectName;\r\n            this.componentInitValue = init;\r\n            if (tagName != undefined) {\r\n                for (let i = 0; i < tagName.length; i++) {\r\n                    this._tag.push(tagName[i]);\r\n                }\r\n            }\r\n            if (active != undefined) {\r\n                this.active = active;\r\n            }\r\n        }\r\n        get parentObject() {\r\n            return this._parentObject;\r\n        }\r\n        set parentObject(value) {\r\n            this._parentObject = value;\r\n        }\r\n        get name() { return this._name; }\r\n        set name(value) { this._name = value; }\r\n        get tag() { return this._tag; }\r\n        AddTag(tagName) {\r\n            this._tag.push(tagName);\r\n        }\r\n        RemoveTag(tagName) {\r\n            this._tag = (0, ArrayController_1.ArrayCtl_RemoveElement)(this._tag, tagName);\r\n        }\r\n        get startFlag() { return this._startFlag; }\r\n        set startFlag(value) {\r\n            if (value == true) {\r\n                this._startFlag = true;\r\n            }\r\n        }\r\n        get setupFlag() { return this._setupFlag; }\r\n        set setupFlag(value) {\r\n            if (value == true)\r\n                this._setupFlag = true;\r\n        }\r\n        Setup(parentScene, parentObject) {\r\n            this.parentScene = parentScene;\r\n            if (parentObject != null)\r\n                this.parentObject = parentObject;\r\n            for (let key in this.componentInitValue) {\r\n                if (this.componentInitValue[key].type != undefined) {\r\n                    const component = this.GetComponent(this.componentInitValue[key].type);\r\n                    component === null || component === void 0 ? void 0 : component.Setup(this.componentInitValue[key]);\r\n                }\r\n            }\r\n            this.setupFlag = true;\r\n            for (let i = 0; i < this.children.length; i++) {\r\n                this.children[i].Setup(parentScene, this);\r\n            }\r\n        }\r\n        Start() {\r\n        }\r\n        Update() {\r\n        }\r\n        Call() {\r\n            const objects = this.GetAllObject();\r\n            for (let i = 0; i < objects.length; i++) {\r\n                const components = objects[i].GetAllComponent();\r\n                for (let c = 0; c < components.length; c++) {\r\n                    components[c].Call();\r\n                }\r\n            }\r\n        }\r\n        Move() {\r\n            const objects = this.GetAllObject();\r\n            for (let i = 0; i < objects.length; i++) {\r\n                const components = objects[i].GetAllComponent();\r\n                for (let c = 0; c < components.length; c++) {\r\n                    components[c].Move();\r\n                }\r\n            }\r\n        }\r\n        BaseUpdate() {\r\n            for (let i = 0; i < this.components.length; i++) {\r\n                if (this.components[i].startFlag == false) {\r\n                    this.components[i].Start();\r\n                    this.components[i].startFlag = true;\r\n                }\r\n                if (this.components[i].active == false)\r\n                    continue;\r\n                this.components[i].Update();\r\n            }\r\n            this.Update();\r\n            for (let i = 0; i < this.children.length; i++) {\r\n                if (this.children[i].active) {\r\n                    this.children[i].BaseUpdate();\r\n                }\r\n            }\r\n        }\r\n        AddComponent(component) {\r\n            component.parentObject = this;\r\n            this.components.push(component);\r\n        }\r\n        AddComponents(components) {\r\n            for (let i = 0; i < components.length; i++) {\r\n                components[i].parentObject = this;\r\n                this.components.push(components[i]);\r\n            }\r\n        }\r\n        GetComponent(type) {\r\n            for (let i = 0; i < this.components.length; i++) {\r\n                if (this.components[i] instanceof type) {\r\n                    return this.components[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        GetAllComponent() {\r\n            return this.components;\r\n        }\r\n        GetAllObject() {\r\n            let objects = [];\r\n            objects.push(this);\r\n            for (let i = 0; i < this.children.length; i++) {\r\n                objects = objects.concat(this.children[i].GetAllObject());\r\n            }\r\n            return objects;\r\n        }\r\n        AddChildObject(obj) {\r\n            for (let i = 0; i < this.children.length; i++) {\r\n                if (this.children[i] === obj) {\r\n                    console.log(`GameObjectBase->AddObject\\nobject[name:${obj.name}]はすでに追加されている`);\r\n                    return;\r\n                }\r\n            }\r\n            obj.name += `${this.GetChildObjects(obj.name).length != 0 ? ` (${this.GetChildObjects(obj.name).length})` : \"\"}`;\r\n            if (obj.setupFlag == false) {\r\n                if (this.parentScene != null)\r\n                    obj.Setup(this.parentScene, this);\r\n            }\r\n            else {\r\n                obj.parentObject = this;\r\n            }\r\n            this.children.push(obj);\r\n        }\r\n        AddChildObjects(objs) {\r\n            for (let i = 0; i < objs.length; i++) {\r\n                for (let n = 0; n < this.children.length; n++) {\r\n                    if (this.children[n] === objs[i]) {\r\n                        console.log(`GameObjectBase->AddObjects\\nobject[name:${objs[i].name}]はすでに追加されている`);\r\n                        return;\r\n                    }\r\n                }\r\n                objs[i].name += `${this.GetChildObjects(objs[i].name).length != 0 ? ` (${this.GetChildObjects(objs[i].name).length})` : \"\"}`;\r\n                if (objs[i].setupFlag == false) {\r\n                    if (this.parentScene != null) {\r\n                        objs[i].Setup(this.parentScene, this);\r\n                    }\r\n                }\r\n                else {\r\n                    objs[i].parentObject = this;\r\n                }\r\n                this.children.push(objs[i]);\r\n            }\r\n        }\r\n        GetChildObject(objName) {\r\n            for (let i = 0; i < this.children.length; i++) {\r\n                if (this.children[i].name == objName) {\r\n                    return this.children[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        GetChildObjects(objName) {\r\n            let objects = [];\r\n            for (let i = 0; i < this.children.length; i++) {\r\n                const firstName = this.children[i].name.split(\" \")[0];\r\n                if (firstName == objName) {\r\n                    objects.push(this.children[i]);\r\n                }\r\n            }\r\n            return objects;\r\n        }\r\n        ChildrenProcessing(process) {\r\n            for (let i = 0; i < this.children.length; i++) {\r\n                process(this.children[i]);\r\n                this.children[i].ChildrenProcessing(process);\r\n            }\r\n        }\r\n    }\r\n    exports.GameObjectBase = GameObjectBase;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameObjectBase.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Object/GameObjectBase.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Object/ImageDisplay.js":
/*!*********************************************************!*\
  !*** ./JavaScript/GameBase/Game/Object/ImageDisplay.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ./GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Draw_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ImageDisplayObject = void 0;\r\n    class ImageDisplayObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Draw_1.DrawComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.ImageDisplayObject = ImageDisplayObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=ImageDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Object/ImageDisplay.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Object/TextMultiline.js":
/*!**********************************************************!*\
  !*** ./JavaScript/GameBase/Game/Object/TextMultiline.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ./GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, DrawTextMultiline_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.TextMultilineObject = void 0;\r\n    class TextMultilineObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new DrawTextMultiline_1.DrawTextMultilineComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.TextMultilineObject = TextMultilineObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=TextMultiline.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Object/TextMultiline.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Object/TextSingleline.js":
/*!***********************************************************!*\
  !*** ./JavaScript/GameBase/Game/Object/TextSingleline.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ./GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, DrawTextSingleline_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.TextSinglelineObject = void 0;\r\n    class TextSinglelineObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new DrawTextSingleline_1.DrawTextSinglelineComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.TextSinglelineObject = TextSinglelineObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=TextSingleline.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Object/TextSingleline.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Game/Scene/GameSceneBase.js":
/*!*********************************************************!*\
  !*** ./JavaScript/GameBase/Game/Scene/GameSceneBase.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ArrayController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameSceneBase = void 0;\r\n    class GameSceneBase {\r\n        constructor() {\r\n            this.objects = [];\r\n        }\r\n        BaseUpdate() {\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                if (this.objects[i].startFlag == false) {\r\n                    this.objects[i].Start();\r\n                    this.objects[i].startFlag = true;\r\n                }\r\n                if (this.objects[i].active == true) {\r\n                    this.objects[i].BaseUpdate();\r\n                }\r\n            }\r\n        }\r\n        Update() { }\r\n        ;\r\n        Call() {\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                this.objects[i].Call();\r\n            }\r\n        }\r\n        ;\r\n        Move() {\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                this.objects[i].Move();\r\n            }\r\n        }\r\n        ;\r\n        AddObjects(object) {\r\n            for (let o = 0; o < object.length; o++) {\r\n                const obj = object[o];\r\n                for (let i = 0; i < this.objects.length; i++) {\r\n                    if (this.objects[i] === obj) {\r\n                        console.log(`SceneBase/AddObject\\nobject[name:${obj.name}]はすでに追加されている`);\r\n                        return;\r\n                    }\r\n                }\r\n                obj.name += `${this.GetObjects(obj.name).length != 0 ? ` (${this.GetObjects(obj.name).length})` : \"\"}`;\r\n                this.objects.push(obj);\r\n            }\r\n            for (let i = 0; i < object.length; i++) {\r\n                object[i].Setup(this, null);\r\n            }\r\n        }\r\n        AddObject(object) {\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                if (this.objects[i] === object) {\r\n                    console.log(`SceneBase->AddObject\\nobject[name:${object.name}]はすでに追加されている`);\r\n                    return;\r\n                }\r\n            }\r\n            object.name += `${this.GetObjects(object.name).length != 0 ? ` (${this.GetObjects(object.name).length})` : \"\"}`;\r\n            this.objects.push(object);\r\n            object.Setup(this, null);\r\n        }\r\n        GetObjects(objectName) {\r\n            let objects = [];\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                const firstName = this.objects[i].name.split(\" \")[0];\r\n                if (firstName == objectName) {\r\n                    objects.push(this.objects[i]);\r\n                }\r\n            }\r\n            return objects;\r\n        }\r\n        GetObject(objectName) {\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                if (this.objects[i].name == objectName)\r\n                    return this.objects[i];\r\n            }\r\n            return null;\r\n        }\r\n        GetAllObject() {\r\n            let objects = [];\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                objects = objects.concat(this.objects[i].GetAllObject());\r\n            }\r\n            return objects;\r\n        }\r\n        GetAllActiveObject() {\r\n            let objects = [];\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                if (this.objects[i].active == true)\r\n                    objects = objects.concat(this.objects[i].GetAllObject());\r\n            }\r\n            return objects;\r\n        }\r\n        RemoveObject(objectName) {\r\n            let objects = [];\r\n            for (let i = 0; i < this.objects.length; i++) {\r\n                if (objectName != this.objects[i].name) {\r\n                    objects.push(this.objects[i]);\r\n                }\r\n            }\r\n            this.objects = objects;\r\n        }\r\n        DeleteObject(object) {\r\n            this.objects = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.objects, object);\r\n        }\r\n    }\r\n    exports.GameSceneBase = GameSceneBase;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameSceneBase.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Game/Scene/GameSceneBase.js?");

/***/ }),

/***/ "./JavaScript/GameBase/Other/DrawEffect.js":
/*!*************************************************!*\
  !*** ./JavaScript/GameBase/Other/DrawEffect.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../Class/Color */ \"./JavaScript/GameBase/Class/Color.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Size_1, Color_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.DrawTextEffect_fontSize = exports.DrawEffect_color = exports.DrawTextEffect_fontColor = exports.DrawEffect_ReSize = exports.DrawEffect = void 0;\r\n    class DrawEffect {\r\n        constructor() {\r\n            this.count = 0;\r\n            this.startFlag = true;\r\n            this.timeTaken_second = 0;\r\n            this._deleteFlag = false;\r\n        }\r\n        get deleteFlag() { return this._deleteFlag; }\r\n    }\r\n    exports.DrawEffect = DrawEffect;\r\n    class DrawEffect_ReSize extends DrawEffect {\r\n        constructor(timeTaken_second, startSize, endSize) {\r\n            super();\r\n            this.addSize = new Size_1.Size(0, 0);\r\n            this.timeTaken_second = timeTaken_second;\r\n            this.startSize = startSize;\r\n            this.endSize = endSize;\r\n        }\r\n        update(draw) {\r\n            if (draw.transform == null) {\r\n                return;\r\n            }\r\n            if (this.startFlag == true) {\r\n                draw.transform.size = this.startSize;\r\n                this.startFlag = false;\r\n                this.addSize = new Size_1.Size((this.endSize.width - this.startSize.width) / (60 * this.timeTaken_second), (this.endSize.height - this.startSize.height) / (60 * this.timeTaken_second));\r\n            }\r\n            this.count++;\r\n            if (this.count > this.timeTaken_second * 60) {\r\n                this._deleteFlag = true;\r\n                return;\r\n            }\r\n            draw.transform.size.width += this.addSize.width;\r\n            draw.transform.size.height += this.addSize.height;\r\n            if ((this.endSize.width - this.startSize.width > 0 && draw.transform.size.width > this.endSize.width) ||\r\n                (this.endSize.width - this.startSize.width < 0 && draw.transform.size.width < this.endSize.width)) {\r\n                draw.transform.size.width = this.endSize.width;\r\n            }\r\n            if ((this.endSize.height - this.startSize.height > 0 && draw.transform.size.height > this.endSize.height) ||\r\n                (this.endSize.height - this.startSize.height < 0 && draw.transform.size.height < this.endSize.height)) {\r\n                draw.transform.size.height = this.endSize.height;\r\n            }\r\n        }\r\n    }\r\n    exports.DrawEffect_ReSize = DrawEffect_ReSize;\r\n    class DrawTextEffect_fontColor extends DrawEffect {\r\n        constructor(timeTaken_second, startColor, endColor) {\r\n            super();\r\n            this.timeTaken_second = timeTaken_second;\r\n            this.startColor = startColor;\r\n            this.endColor = endColor;\r\n            this.addColor = new Color_1.Color((endColor.red - startColor.red) / (timeTaken_second * 60), (endColor.green - startColor.green) / (timeTaken_second * 60), (endColor.blue - startColor.blue) / (timeTaken_second * 60), (endColor.alpha - startColor.alpha) / (timeTaken_second * 60));\r\n        }\r\n        update(draw) {\r\n            const drawText = draw;\r\n            if (this.startFlag == true) {\r\n                drawText.fontColor = this.startColor;\r\n                this.startFlag = false;\r\n            }\r\n            this.count++;\r\n            if (this.count > this.timeTaken_second * 60) {\r\n                drawText.fontColor = this.endColor;\r\n                this._deleteFlag = true;\r\n                return;\r\n            }\r\n            if (drawText.text != undefined) {\r\n                const color = drawText.fontColor;\r\n                color.red += this.addColor.red;\r\n                color.green += this.addColor.green;\r\n                color.blue += this.addColor.blue;\r\n                color.alpha += this.addColor.alpha;\r\n                drawText.fontColor = color;\r\n            }\r\n        }\r\n    }\r\n    exports.DrawTextEffect_fontColor = DrawTextEffect_fontColor;\r\n    class DrawEffect_color extends DrawEffect {\r\n        constructor(timeTaken_second, startColor, endColor) {\r\n            super();\r\n            this.timeTaken_second = timeTaken_second;\r\n            this.startColor = startColor;\r\n            this.endColor = endColor;\r\n            this.addColor = new Color_1.Color((endColor.red - startColor.red) / (timeTaken_second * 60), (endColor.green - startColor.green) / (timeTaken_second * 60), (endColor.blue - startColor.blue) / (timeTaken_second * 60), (endColor.alpha - startColor.alpha) / (timeTaken_second * 60));\r\n        }\r\n        update(draw) {\r\n            if (this.startFlag == true) {\r\n                draw.backgroundColor = this.startColor;\r\n                this.startFlag = false;\r\n            }\r\n            this.count++;\r\n            if (this.count > this.timeTaken_second * 60) {\r\n                draw.backgroundColor = this.endColor;\r\n                this._deleteFlag = true;\r\n                return;\r\n            }\r\n            const color = draw.backgroundColor;\r\n            color.red += this.addColor.red;\r\n            color.green += this.addColor.green;\r\n            color.blue += this.addColor.blue;\r\n            color.alpha += this.addColor.alpha;\r\n            draw.backgroundColor = color;\r\n        }\r\n    }\r\n    exports.DrawEffect_color = DrawEffect_color;\r\n    class DrawTextEffect_fontSize extends DrawEffect {\r\n        constructor(timeTaken_second, startFontSize, endFontSize) {\r\n            super();\r\n            this.startFontSize = startFontSize;\r\n            this.endFontSize = endFontSize;\r\n            this.timeTaken_second = timeTaken_second;\r\n            this.addFontSize = (this.endFontSize - this.startFontSize) / (timeTaken_second * 60);\r\n        }\r\n        update(draw) {\r\n            const drawText = draw;\r\n            if (drawText.text == null) {\r\n                return;\r\n            }\r\n            if (this.startFlag == true) {\r\n                drawText.fontSize = this.startFontSize;\r\n                this.startFlag = false;\r\n            }\r\n            this.count++;\r\n            if (this.count > this.timeTaken_second * 60) {\r\n                drawText.fontSize = this.endFontSize;\r\n                this._deleteFlag = true;\r\n                return;\r\n            }\r\n            drawText.fontSize += this.addFontSize;\r\n        }\r\n    }\r\n    exports.DrawTextEffect_fontSize = DrawTextEffect_fontSize;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=DrawEffect.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/Other/DrawEffect.js?");

/***/ }),

/***/ "./JavaScript/GameBase/System/GlobalData.js":
/*!**************************************************!*\
  !*** ./JavaScript/GameBase/System/GlobalData.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../../../Image/NoImg.bmp */ \"./Image/NoImg.bmp\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Size_1, NoImg_bmp_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GlobalData = void 0;\r\n    NoImg_bmp_1 = __importDefault(NoImg_bmp_1);\r\n    class GlobalData {\r\n        constructor() {\r\n            //---\r\n            this._mobile = false;\r\n            //キャンバス\r\n            this.mainCanvas = document.createElement(\"canvas\");\r\n            this.mainCtx = this.mainCanvas.getContext(\"2d\");\r\n            //画像ファイルURL\r\n            this.imageSorceURL = \"https://12345ff.github.io/Image/\";\r\n            //描画順データ\r\n            this.drawSortList = {\r\n                [-1]: {\r\n                    name: \"\", sortType: \"none\",\r\n                },\r\n                0: {\r\n                    name: \"background\", sortType: \"none\"\r\n                },\r\n                1: {\r\n                    name: \"underFloor\", sortType: \"none\",\r\n                },\r\n                2: {\r\n                    name: \"floor\", sortType: \"aabbPoint\"\r\n                },\r\n                3: {\r\n                    name: \"guid-bottom\", sortType: \"none\"\r\n                },\r\n                4: {\r\n                    name: \"character\", sortType: \"aabbPoint\"\r\n                },\r\n                5: {\r\n                    name: \"roof\", sortType: \"none\"\r\n                },\r\n                6: {\r\n                    name: \"guid-top\", sortType: \"none\"\r\n                },\r\n                7: {\r\n                    name: \"UI\", sortType: \"none\"\r\n                },\r\n                8: {\r\n                    name: \"frontUI\", sortType: \"none\",\r\n                }\r\n            };\r\n            //画面サイズ\r\n            this.ScreenSize = new Size_1.Size(0, 0);\r\n            const canvas = document.createElement(\"canvas\");\r\n            canvas.id = \"noImage\";\r\n            this.noImage = canvas;\r\n            const ctx = canvas.getContext(\"2d\");\r\n            const image = document.createElement(\"img\");\r\n            image.src = NoImg_bmp_1.default;\r\n            image.onload = () => {\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n                canvas.id = \"noImage\";\r\n                ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image, 0, 0);\r\n                this.noImage = canvas;\r\n            };\r\n            if (navigator.userAgent.match(/iPhone|Android.+Mobile/)) {\r\n                this._mobile = true;\r\n            }\r\n        }\r\n        SetCanvas(canvasName) {\r\n            this.mainCanvas = document.getElementById(canvasName);\r\n            this.mainCtx = this.mainCanvas.getContext(\"2d\");\r\n            this.ScreenSize.width = this.mainCanvas.width;\r\n            this.ScreenSize.height = this.mainCanvas.height;\r\n        }\r\n        get mobile() {\r\n            return this._mobile;\r\n        }\r\n        //描画順を 名前から 得る\r\n        sort_NameToNumber(name) {\r\n            for (const key in this.drawSortList) {\r\n                if (this.drawSortList[key].name == name) {\r\n                    return parseInt(key);\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n    exports.GlobalData = GlobalData;\r\n    //シングルトン\r\n    GlobalData.instance = new GlobalData();\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GlobalData.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/System/GlobalData.js?");

/***/ }),

/***/ "./JavaScript/GameBase/System/ImageManager.js":
/*!****************************************************!*\
  !*** ./JavaScript/GameBase/System/ImageManager.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, GlobalData_1, ImageBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ImageManager = void 0;\r\n    class ImageManager {\r\n        constructor() {\r\n            //---\r\n            //canvas要素\r\n            //-入れ物\r\n            this._saveImages = {};\r\n            //---\r\n            //ImageBase\r\n            //-入れ物\r\n            this._saveImageBase = {};\r\n        }\r\n        setUp() {\r\n        }\r\n        //-読み込む\r\n        loadImage(keyName, fileName) {\r\n            //画像を読み込み\r\n            const image = document.createElement(\"img\");\r\n            image.crossOrigin = \"Anonymous\";\r\n            image.src = GlobalData_1.GlobalData.instance.imageSorceURL + fileName;\r\n            //画像をセット\r\n            image.onload = () => {\r\n                const canvas = ImageBase_1.ImageBase.ImageToCanvas(image);\r\n                canvas.id = \"loadImage\";\r\n                this._saveImages[keyName] = canvas;\r\n                console.log(`[${fileName}]loaded`);\r\n            };\r\n        }\r\n        //-読み込む(タイルマップ)\r\n        loadImage_tileMap(keyName, fileName, tileWidth, tileHeight) {\r\n            //画像用意\r\n            const image = document.createElement(\"img\");\r\n            image.src = GlobalData_1.GlobalData.instance.imageSorceURL + fileName;\r\n            //読み込み時の処理\r\n            //(元画像をスライスして上書き保存)\r\n            image.onload = () => {\r\n                for (let startY = 0; startY * tileHeight + tileHeight < image.height; startY++) {\r\n                    for (let startX = 0; startX * tileWidth + tileWidth < image.width; startX++) {\r\n                        const canvas = document.createElement(\"canvas\");\r\n                        const ctx = canvas.getContext(\"2d\");\r\n                        canvas.width = tileWidth;\r\n                        canvas.height = tileHeight;\r\n                        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image, startX * tileHeight, startY * tileHeight, tileWidth, tileHeight, 0, 0, tileWidth, tileHeight);\r\n                        this._saveImages[`${keyName}_x:${startX},y:${startY}`] = canvas;\r\n                    }\r\n                }\r\n                console.log(`[${fileName}]loaded`);\r\n            };\r\n        }\r\n        //-追加\r\n        addImage(src, keyName) {\r\n            if (src instanceof HTMLCanvasElement) {\r\n                this._saveImages[keyName] = src;\r\n            }\r\n            else if (src instanceof HTMLImageElement) {\r\n                this._saveImages[keyName] = ImageBase_1.ImageBase.ImageToCanvas(src);\r\n            }\r\n        }\r\n        //-削除\r\n        deleteImage(keyName) {\r\n            const obj = {};\r\n            for (const key in this._saveImages) {\r\n                if (key != keyName)\r\n                    obj[key] = this._saveImages[key];\r\n            }\r\n            this._saveImages = obj;\r\n            console.log(`Deleted ${keyName}`);\r\n        }\r\n        //-削除(全て)\r\n        deleteAllImage() {\r\n            this._saveImages = {};\r\n            console.log(\"deleteAllImage\");\r\n        }\r\n        //-取得\r\n        getImage(keyName) {\r\n            if (this._saveImages[keyName]) {\r\n                return this._saveImages[keyName];\r\n            }\r\n            else {\r\n                const noImage = GlobalData_1.GlobalData.instance.noImage;\r\n                noImage.id = \"noImage\";\r\n                return noImage;\r\n            }\r\n        }\r\n        //-取得(全て)\r\n        getAllImage() {\r\n            return Object.assign({}, this._saveImages);\r\n        }\r\n        //-追加\r\n        addImageBase(imageBase, keyName) {\r\n            this._saveImageBase[keyName] = imageBase;\r\n        }\r\n        //-取得\r\n        getImageBase(keyName) {\r\n            const imageBase = this._saveImageBase[keyName];\r\n            if (imageBase) {\r\n                return imageBase.copy;\r\n            }\r\n            else {\r\n                return ImageBase_1.ImageBase.noImage.copy;\r\n            }\r\n        }\r\n        //-取得(全て)\r\n        getAllImageBase() {\r\n            return this._saveImageBase;\r\n        }\r\n        //-取得(全て)(配列)\r\n        getAllImageBase_Array() {\r\n            const array = [];\r\n            for (let key in this._saveImageBase) {\r\n                array.push(this._saveImageBase[key]);\r\n            }\r\n            return array;\r\n        }\r\n        //-削除\r\n        removeImageBase(keyName) {\r\n            const newImageBaseList = {};\r\n            for (let key in this._saveImageBase) {\r\n                if (key != keyName) {\r\n                    newImageBaseList[key] = this._saveImageBase[key];\r\n                }\r\n            }\r\n            this._saveImageBase = newImageBaseList;\r\n        }\r\n        //-削除(全て)\r\n        addRemoveImageBase() {\r\n            this._saveImageBase = {};\r\n        }\r\n    }\r\n    exports.ImageManager = ImageManager;\r\n    //シングルトン\r\n    ImageManager.instance = new ImageManager();\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=ImageManager.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/System/ImageManager.js?");

/***/ }),

/***/ "./JavaScript/GameBase/System/InputManager.js":
/*!****************************************************!*\
  !*** ./JavaScript/GameBase/System/InputManager.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../Class/Vector */ \"./JavaScript/GameBase/Class/Vector.js\"), __webpack_require__(/*! ./SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ./GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../Class/Size */ \"./JavaScript/GameBase/Class/Size.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Camera_1, Draw_1, DrawTextSingleline_1, DrawTextMultiline_1, Transform_1, Point_1, Vector_1, SceneManager_1, GlobalData_1, ImageBase_1, Size_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.InputManager = void 0;\r\n    class InputManager {\r\n        constructor() {\r\n            //---\r\n            //キー\r\n            this.keyList_before = {};\r\n            this.keyList = {};\r\n            this.keyList_enter = {};\r\n            this.keyList_press = {};\r\n            this.keyList_exit = {};\r\n            //入力(デフォルメ)\r\n            //-軸\r\n            this._axisAcceleration = 0.01;\r\n            this._axisFriction = 0.1;\r\n            this._horizontal = 0;\r\n            this._vertical = 0;\r\n            this.upKey = [];\r\n            this.downKey = [];\r\n            this.leftKey = [];\r\n            this.rightKey = [];\r\n            //-ボタン\r\n            this.okStatus = \"none\";\r\n            this.canselStatus = \"none\";\r\n            this.activeStatus = \"none\";\r\n            this.sub1Status = \"none\";\r\n            this.sub2Status = \"none\";\r\n            this.sub3Status = \"none\";\r\n            this.sub4Status = \"none\";\r\n            this.sub5Status = \"none\";\r\n            this.okKey = [];\r\n            this.canselKey = [];\r\n            this.activeKey = [];\r\n            this.subBtn1 = [];\r\n            this.subBtn2 = [];\r\n            this.subBtn3 = [];\r\n            this.subBtn4 = [];\r\n            this.subBtn5 = [];\r\n            //全て\r\n            this.touch = \"none\";\r\n            this.longTapTime = 1;\r\n            this.slideRange = 50;\r\n            this.beforeTouchPoint = null;\r\n            this.touchCount = 0;\r\n            this.touchStartPoint = null;\r\n            this.backCircleImage = new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/lineLight05.png\");\r\n            this.backSkillCircleImage = new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/lineLight26.png\");\r\n            this.frontCircleImage = new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/lineLight46.png\");\r\n            this.skillCircleImage = new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/lineLight05.png\");\r\n            //マウスポインター\r\n            this._mousePoint = new Point_1.Point2d(0, 0);\r\n            this._mouseClick_left = \"none\";\r\n            this._mouseClick_right = \"none\";\r\n            this._mouseScroll = 0;\r\n        }\r\n        get keyEnterList() {\r\n            return this.keyList_enter;\r\n        }\r\n        get keyPressList() {\r\n            return this.keyList_press;\r\n        }\r\n        get keyExitList() {\r\n            return this.keyList_exit;\r\n        }\r\n        getKeyStatus(type, keyName) {\r\n            let result;\r\n            switch (type) {\r\n                case \"down\":\r\n                    result = this.keyList_enter[keyName];\r\n                    break;\r\n                case \"press\":\r\n                    result = this.keyList_press[keyName];\r\n                    break;\r\n                case \"up\":\r\n                    result = this.keyList_exit[keyName];\r\n                    break;\r\n            }\r\n            return (result != undefined) ? result : false;\r\n        }\r\n        keyUpdate() {\r\n            for (let key in this.keyList) {\r\n                //down\r\n                if ((this.keyList_before[key] == false || !this.keyList_before[key]) && this.keyList[key]) {\r\n                    this.keyList_enter[key] = true;\r\n                }\r\n                else {\r\n                    this.keyList_enter[key] = false;\r\n                }\r\n                //press\r\n                if (this.keyList[key]) {\r\n                    this.keyList_press[key] = true;\r\n                }\r\n                else {\r\n                    this.keyList_press[key] = false;\r\n                }\r\n                //up\r\n                if (this.keyList_before[key] && this.keyList[key] == false) {\r\n                    this.keyList_exit[key] = true;\r\n                }\r\n                else {\r\n                    this.keyList_exit[key] = false;\r\n                }\r\n            }\r\n            for (let key in this.keyList) {\r\n                this.keyList_before[key] = this.keyList[key];\r\n            }\r\n        }\r\n        GetEnterKeyStatus(keyNames) {\r\n            let flag = false;\r\n            for (let i = 0; i < keyNames.length; i++) {\r\n                if (this.keyEnterList[keyNames[i]] == true) {\r\n                    flag = true;\r\n                }\r\n            }\r\n            return flag;\r\n        }\r\n        GetPressKeyStatus(keyNames) {\r\n            let flag = false;\r\n            for (let i = 0; i < keyNames.length; i++) {\r\n                if (this.keyPressList[keyNames[i]] == true) {\r\n                    flag = true;\r\n                }\r\n            }\r\n            return flag;\r\n        }\r\n        GetExitKeyStatus(keyNames) {\r\n            let flag = false;\r\n            for (let i = 0; i < keyNames.length; i++) {\r\n                if (this.keyExitList[keyNames[i]] == true) {\r\n                    flag = true;\r\n                }\r\n            }\r\n            return flag;\r\n        }\r\n        set axisAcceleration(value) {\r\n            this._axisAcceleration = value / 60;\r\n        }\r\n        get axisAcceleration() {\r\n            return this._axisAcceleration;\r\n        }\r\n        set axisFriction(value) {\r\n            this._axisFriction = value / 60;\r\n        }\r\n        get axisFriction() {\r\n            return this._axisFriction;\r\n        }\r\n        get horizontal() {\r\n            return this._horizontal;\r\n        }\r\n        get vertical() {\r\n            return this._vertical;\r\n        }\r\n        get axis() {\r\n            return new Vector_1.Vector2d(this.horizontal, this.vertical);\r\n        }\r\n        get up() {\r\n            return this.checkKeyList(this.upKey);\r\n        }\r\n        get down() {\r\n            return this.checkKeyList(this.downKey);\r\n        }\r\n        get left() {\r\n            return this.checkKeyList(this.leftKey);\r\n        }\r\n        get right() {\r\n            return this.checkKeyList(this.rightKey);\r\n        }\r\n        get key_ok() { return this.okStatus; }\r\n        get key_cansel() { return this.canselStatus; }\r\n        get key_active() { return this.activeStatus; }\r\n        get key_btn1() { return this.sub1Status; }\r\n        get key_btn2() { return this.sub2Status; }\r\n        get key_btn3() { return this.sub3Status; }\r\n        get key_btn4() { return this.sub4Status; }\r\n        get key_btn5() { return this.sub5Status; }\r\n        checkKeyList(keyList) {\r\n            for (let i = 0; i < keyList.length; i++) {\r\n                if (this.keyList[keyList[i]]) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        axisUpdate() {\r\n            //vertical(縦軸)\r\n            if (this.up && !this.down) {\r\n                if (this.vertical <= 0)\r\n                    this._vertical -= this.axisAcceleration;\r\n                else\r\n                    this._vertical -= this.axisFriction;\r\n                if (this.vertical < -1)\r\n                    this._vertical = -1;\r\n            }\r\n            else if (!this.up && this.down) {\r\n                if (this.vertical >= 0)\r\n                    this._vertical += this.axisAcceleration;\r\n                else\r\n                    this._vertical += this.axisFriction;\r\n                if (this.vertical > 1)\r\n                    this._vertical = 1;\r\n            }\r\n            else {\r\n                if (this.vertical != 0) {\r\n                    this._vertical += this.vertical > 0 ? -this.axisFriction : this.axisFriction;\r\n                    if (-this.axisFriction <= this.vertical && this.vertical <= this.axisFriction) {\r\n                        this._vertical = 0;\r\n                    }\r\n                }\r\n            }\r\n            //horizontal(横軸)\r\n            if (this.left && !this.right) {\r\n                if (this.horizontal <= 0)\r\n                    this._horizontal -= this.axisAcceleration;\r\n                else\r\n                    this._horizontal -= this.axisFriction;\r\n                if (this.horizontal < -1)\r\n                    this._horizontal = -1;\r\n            }\r\n            else if (!this.left && this.right) {\r\n                if (this.horizontal >= 0)\r\n                    this._horizontal += this.axisAcceleration;\r\n                else\r\n                    this._horizontal += this.axisFriction;\r\n                if (this.horizontal > 1)\r\n                    this._horizontal = 1;\r\n            }\r\n            else {\r\n                if (this.horizontal != 0) {\r\n                    this._horizontal += this.horizontal > 0 ? -this.axisFriction : this.axisFriction;\r\n                    if (-this.axisFriction <= this.horizontal && this.horizontal <= this.axisFriction) {\r\n                        this._horizontal = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        getDirection() {\r\n            const vector = new Vector_1.Vector2d(this.horizontal, this.vertical);\r\n            const normalize = vector.normalize();\r\n            return normalize;\r\n        }\r\n        keyStatusUpdate() {\r\n            const statusList = [this.okStatus, this.canselStatus, this.activeStatus, this.sub1Status, this.sub2Status, this.sub3Status, this.sub4Status, this.sub5Status];\r\n            const keyList = [this.okKey, this.canselKey, this.activeKey, this.subBtn1, this.subBtn2, this.subBtn3, this.subBtn4, this.subBtn5];\r\n            const statusNameList = [\"ok\", \"cansel\", \"active\", \"btn1\", \"btn2\", \"btn3\", \"btn4\", \"btn5\"];\r\n            for (let i = 0; i < statusList.length; i++) {\r\n                const status = statusList[i];\r\n                const key = keyList[i];\r\n                const statusName = statusNameList[i];\r\n                if (!status || !key || !statusName)\r\n                    continue;\r\n                switch (status) {\r\n                    case \"none\":\r\n                    case \"end\":\r\n                        let flag1 = false;\r\n                        for (let i = 0; i < key.length; i++) {\r\n                            if (this.keyList[key[i]]) {\r\n                                flag1 = true;\r\n                            }\r\n                        }\r\n                        if (flag1) {\r\n                            this.setStatus(statusName, \"begin\");\r\n                        }\r\n                        else {\r\n                            this.setStatus(statusName, \"none\");\r\n                        }\r\n                        break;\r\n                    case \"stay\":\r\n                        let flag2 = false;\r\n                        for (let i = 0; i < key.length; i++) {\r\n                            if (this.keyList[key[i]]) {\r\n                                flag2 = true;\r\n                            }\r\n                        }\r\n                        if (flag2) {\r\n                            this.setStatus(statusName, \"stay\");\r\n                        }\r\n                        else {\r\n                            this.setStatus(statusName, \"end\");\r\n                        }\r\n                        break;\r\n                    case \"begin\":\r\n                        let flag3 = false;\r\n                        for (let i = 0; i < key.length; i++) {\r\n                            if (this.keyList[key[i]]) {\r\n                                flag3 = true;\r\n                            }\r\n                        }\r\n                        if (flag3) {\r\n                            this.setStatus(statusName, \"stay\");\r\n                        }\r\n                        else {\r\n                            this.setStatus(statusName, \"end\");\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        setStatus(keyType, value) {\r\n            switch (keyType) {\r\n                case \"ok\":\r\n                    this.okStatus = value;\r\n                    break;\r\n                case \"cansel\":\r\n                    this.canselStatus = value;\r\n                    break;\r\n                case \"active\":\r\n                    this.activeStatus = value;\r\n                    break;\r\n                case \"btn1\":\r\n                    this.sub1Status = value;\r\n                    break;\r\n                case \"btn2\":\r\n                    this.sub2Status = value;\r\n                    break;\r\n                case \"btn3\":\r\n                    this.sub3Status = value;\r\n                    break;\r\n                case \"btn4\":\r\n                    this.sub4Status = value;\r\n                    break;\r\n                case \"btn5\":\r\n                    this.sub5Status = value;\r\n                    break;\r\n            }\r\n        }\r\n        setInputEvent() {\r\n            const gameDisplay = document.getElementById(\"mainCanvas\");\r\n            if (navigator.userAgent.match(/iPhone|Android.+Mobile/)) {\r\n                gameDisplay === null || gameDisplay === void 0 ? void 0 : gameDisplay.addEventListener(\"touchstart\", (e) => {\r\n                    e.preventDefault();\r\n                    this.touch = \"begin\";\r\n                    this._mousePoint = this.Point_MobileToPc(new Point_1.Point2d(e.changedTouches[0].pageX, e.changedTouches[0].pageY));\r\n                });\r\n                gameDisplay === null || gameDisplay === void 0 ? void 0 : gameDisplay.addEventListener(\"touchmove\", (e) => {\r\n                    e.preventDefault();\r\n                    this._mousePoint = this.Point_MobileToPc(new Point_1.Point2d(e.changedTouches[0].pageX, e.changedTouches[0].pageY));\r\n                });\r\n                gameDisplay === null || gameDisplay === void 0 ? void 0 : gameDisplay.addEventListener(\"touchend\", (e) => {\r\n                    e.preventDefault();\r\n                    this.touch = \"end\";\r\n                });\r\n                gameDisplay === null || gameDisplay === void 0 ? void 0 : gameDisplay.addEventListener(\"touchcancel\", () => {\r\n                    this.touch = \"end\";\r\n                });\r\n                const leftButton = document.createElement(\"button\");\r\n                leftButton.className = \"inputButton\";\r\n                leftButton.id = \"inputButton_left\";\r\n                leftButton.style.display = \"none\";\r\n                const rightButton = document.createElement(\"button\");\r\n                rightButton.className = \"inputButton\";\r\n                rightButton.id = \"inputButton_right\";\r\n                rightButton.style.display = \"none\";\r\n                const exitButton = document.createElement(\"button\");\r\n                exitButton.id = \"inputButton_exit\";\r\n                exitButton.style.display = \"none\";\r\n                const onBackButton = document.createElement(\"button\");\r\n                onBackButton.id = \"inputButton_onBack\";\r\n                onBackButton.style.display = \"none\";\r\n                leftButton.addEventListener(\"touchstart\", (e) => {\r\n                    e.preventDefault();\r\n                    this.keyList[\"q\"] = true;\r\n                });\r\n                leftButton.addEventListener(\"touchend\", (e) => {\r\n                    e.preventDefault();\r\n                    this.keyList[\"q\"] = false;\r\n                });\r\n                leftButton.addEventListener(\"touchcancel\", () => {\r\n                    this.keyList[\"q\"] = false;\r\n                });\r\n                rightButton.addEventListener(\"touchstart\", (e) => {\r\n                    e.preventDefault();\r\n                    this.keyList[\"e\"] = true;\r\n                });\r\n                rightButton.addEventListener(\"touchend\", (e) => {\r\n                    e.preventDefault();\r\n                    this.keyList[\"e\"] = false;\r\n                });\r\n                rightButton.addEventListener(\"touchcancel\", () => {\r\n                    this.keyList[\"e\"] = false;\r\n                });\r\n                exitButton.addEventListener(\"touchstart\", (e) => {\r\n                    e.preventDefault();\r\n                    this.keyList[\"Escape\"] = true;\r\n                });\r\n                exitButton.addEventListener(\"touchend\", (e) => {\r\n                    e.preventDefault();\r\n                    this.keyList[\"Escape\"] = false;\r\n                });\r\n                exitButton.addEventListener(\"touchcancel\", () => {\r\n                    this.keyList[\"Escape\"] = false;\r\n                });\r\n                onBackButton.addEventListener(\"touchstart\", (e) => {\r\n                    e.preventDefault();\r\n                    this.keyList[\"1\"] = true;\r\n                });\r\n                onBackButton.addEventListener(\"touchend\", (e) => {\r\n                    e.preventDefault();\r\n                    this.keyList[\"1\"] = false;\r\n                });\r\n                onBackButton.addEventListener(\"touchcancel\", (e) => {\r\n                    this.keyList[\"1\"] = false;\r\n                });\r\n                document.body.appendChild(leftButton);\r\n                document.body.appendChild(rightButton);\r\n                document.body.appendChild(exitButton);\r\n                document.body.appendChild(onBackButton);\r\n                this.frontCircleImage.size = new Size_1.Size(50, 50);\r\n            }\r\n            else {\r\n                window.addEventListener(\"keydown\", (e) => {\r\n                    this.keyList[e.key] = true;\r\n                });\r\n                window.addEventListener(\"keyup\", (e) => {\r\n                    this.keyList[e.key] = false;\r\n                });\r\n                gameDisplay === null || gameDisplay === void 0 ? void 0 : gameDisplay.addEventListener(\"mousemove\", (e) => {\r\n                    this._mousePoint = new Point_1.Point2d(e.offsetX, e.offsetY);\r\n                });\r\n                gameDisplay === null || gameDisplay === void 0 ? void 0 : gameDisplay.addEventListener(\"mousedown\", (e) => {\r\n                    switch (e.button) {\r\n                        case 0:\r\n                            this._mouseClick_left = \"begin\";\r\n                            break;\r\n                        case 2:\r\n                            this._mouseClick_right = \"begin\";\r\n                            break;\r\n                    }\r\n                });\r\n                gameDisplay === null || gameDisplay === void 0 ? void 0 : gameDisplay.addEventListener(\"mouseup\", (e) => {\r\n                    switch (e.button) {\r\n                        case 0:\r\n                            this._mouseClick_left = \"end\";\r\n                            break;\r\n                        case 2:\r\n                            this._mouseClick_right = \"end\";\r\n                            break;\r\n                    }\r\n                });\r\n                gameDisplay === null || gameDisplay === void 0 ? void 0 : gameDisplay.addEventListener(\"wheel\", (e) => {\r\n                    if (e.deltaY > 0) {\r\n                        this._mouseScroll = 1;\r\n                    }\r\n                    else if (e.deltaY < 0) {\r\n                        this._mouseScroll = -1;\r\n                    }\r\n                }, { passive: true });\r\n            }\r\n        }\r\n        Point_MobileToPc(point) {\r\n            const width = document.getElementById(\"mainCanvas\").getBoundingClientRect().width;\r\n            const height = document.getElementById(\"mainCanvas\").getBoundingClientRect().height;\r\n            let newPoint = new Point_1.Point2d(point.x / width * 800, point.y / height * 500);\r\n            return newPoint;\r\n        }\r\n        TouchUpdate() {\r\n            if (navigator.userAgent.match(/iPhone|Android.+Mobile/)) {\r\n                this._mouseScroll = 0;\r\n                this.keyList[\"w\"] = false;\r\n                this.keyList[\"a\"] = false;\r\n                this.keyList[\"s\"] = false;\r\n                this.keyList[\"d\"] = false;\r\n                this.keyList[\"Control\"] = false;\r\n                this.keyList[\"Shift\"] = false;\r\n                this.mouseClick_left = \"end\";\r\n                //タッチの始まり\r\n                if (this.touch == \"begin\") {\r\n                    this.touchStartPoint = this.mousePoint.copy;\r\n                    this.touch = \"stay\";\r\n                }\r\n                //押してる間\r\n                if (this.touch == \"stay\") {\r\n                    //スクロール\r\n                    this._mousePoint = this.mousePoint.copy;\r\n                    const direction = this.beforeTouchPoint != null ? this.mousePoint.copy.y - this.beforeTouchPoint.y : 0;\r\n                    if (direction != 0) {\r\n                        this._mouseScroll = direction > 0 ? 1 : -1;\r\n                    }\r\n                    this.beforeTouchPoint = this.mousePoint.copy;\r\n                    //四方\r\n                    if (this.touchStartPoint != null) {\r\n                        const point = this.mousePoint.copy;\r\n                        const direction2 = new Point_1.Point2d(point.x - this.touchStartPoint.x, point.y - this.touchStartPoint.y);\r\n                        this.setStatus(\"btn4\", \"begin\");\r\n                        if (point.x < this.touchStartPoint.x - this.slideRange || this.touchStartPoint.x + this.slideRange < point.x ||\r\n                            point.y < this.touchStartPoint.y - this.slideRange || this.touchStartPoint.y + this.slideRange < point.y) {\r\n                            if (Math.abs(direction2.x) > Math.abs(direction2.y)) {\r\n                                //横\r\n                                if (direction2.x > 0) {\r\n                                    this.keyList[\"d\"] = true;\r\n                                }\r\n                                else {\r\n                                    this.keyList[\"a\"] = true;\r\n                                }\r\n                            }\r\n                            else {\r\n                                //縦\r\n                                if (direction2.y > 0) {\r\n                                    this.keyList[\"s\"] = true;\r\n                                }\r\n                                else {\r\n                                    this.keyList[\"w\"] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //離したとき\r\n                if (this.touch == \"end\") {\r\n                    const point = this.mousePoint.copy;\r\n                    if (this.touchStartPoint != null && this.beforeTouchPoint != null) {\r\n                        if (this.touchCount >= this.longTapTime * 60)\r\n                            this.setStatus(\"btn3\", \"begin\");\r\n                        if (this.touchStartPoint.x - this.slideRange <= point.x && point.x <= this.touchStartPoint.x + this.slideRange &&\r\n                            this.touchStartPoint.y - this.slideRange <= point.y && point.y <= this.touchStartPoint.y + this.slideRange) {\r\n                            //範囲内\r\n                            this.setStatus(\"ok\", \"begin\");\r\n                            this.setStatus(\"active\", \"begin\");\r\n                            this.mouseClick_left = \"begin\";\r\n                        }\r\n                        else {\r\n                            //範囲外\r\n                            const direction = new Point_1.Point2d(point.x - this.touchStartPoint.x, point.y - this.touchStartPoint.y);\r\n                            if (Math.abs(direction.x) > Math.abs(direction.y)) {\r\n                                //横\r\n                                if (direction.x > 0) {\r\n                                    this.keyList[\"d\"] = true;\r\n                                }\r\n                                else {\r\n                                    this.keyList[\"a\"] = true;\r\n                                }\r\n                            }\r\n                            else {\r\n                                //縦\r\n                                if (direction.y > 0) {\r\n                                    this.keyList[\"s\"] = true;\r\n                                }\r\n                                else {\r\n                                    this.keyList[\"w\"] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //タッチ時間の経過とか\r\n                if (this.touch == \"stay\") {\r\n                    this.touchCount++;\r\n                    if (this.touchCount == this.longTapTime * 60 + 1) {\r\n                        this.setStatus(\"btn3\", \"begin\");\r\n                    }\r\n                    else if (this.touchCount >= this.longTapTime * 60) {\r\n                        this.setStatus(\"btn3\", \"stay\");\r\n                    }\r\n                }\r\n                else {\r\n                    this.touchCount = 0;\r\n                }\r\n                if (this.touch == \"end\") {\r\n                    this.touch = \"none\";\r\n                    this.touchStartPoint = null;\r\n                }\r\n                //描画\r\n                if (this.touch == \"stay\" && Camera_1.CameraComponent.mainCamera != null && this.touchStartPoint != null) {\r\n                    const startPoint = new Point_1.Point2d(this.touchStartPoint.x + Camera_1.CameraComponent.mainCamera.transform.localPosition.x, this.touchStartPoint.y + Camera_1.CameraComponent.mainCamera.transform.localPosition.y);\r\n                    const nowPoint = new Point_1.Point2d(this.mousePoint.x + Camera_1.CameraComponent.mainCamera.transform.localPosition.x, this.mousePoint.y + Camera_1.CameraComponent.mainCamera.transform.localPosition.y);\r\n                    const slideRangeSize = new Size_1.Size(this.slideRange * 2, this.slideRange * 2);\r\n                    if (this.backCircleImage.size.width != slideRangeSize.width || this.backCircleImage.size.height != slideRangeSize.height)\r\n                        this.backCircleImage.size = slideRangeSize;\r\n                    if (this.backSkillCircleImage.size.width != this.backCircleImage.size.width || this.backSkillCircleImage.size.height != this.backCircleImage.size.height)\r\n                        this.backSkillCircleImage.size = this.backCircleImage.size.copy;\r\n                    if (this.touchCount < this.longTapTime * 60) {\r\n                        const skillSize = new Size_1.Size(this.touchCount / (this.longTapTime * 60) * this.backCircleImage.size.width, this.touchCount / (this.longTapTime * 60) * this.backCircleImage.size.height);\r\n                        if (this.skillCircleImage.size.width != skillSize.width || this.skillCircleImage.size.height != skillSize.height)\r\n                            this.skillCircleImage.size = skillSize;\r\n                    }\r\n                    //背景円\r\n                    Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                        drawComponent: null,\r\n                        drawPoint: new Point_1.Point2d(startPoint.x - this.backCircleImage.width / 2, startPoint.y - this.backCircleImage.height / 2),\r\n                        image: this.backCircleImage.drawImage,\r\n                        sortName: \"UI\",\r\n                    });\r\n                    //スキル範囲\r\n                    if (this.touchCount < this.longTapTime * 60) {\r\n                        Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                            drawComponent: null,\r\n                            drawPoint: new Point_1.Point2d(startPoint.x - this.skillCircleImage.size.width / 2, startPoint.y - this.skillCircleImage.size.height / 2),\r\n                            image: this.skillCircleImage.drawImage,\r\n                            sortName: \"UI\",\r\n                        });\r\n                    }\r\n                    else {\r\n                        Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                            drawComponent: null,\r\n                            drawPoint: new Point_1.Point2d(startPoint.x - this.backSkillCircleImage.size.width / 2, startPoint.y - this.backSkillCircleImage.size.height / 2),\r\n                            image: this.backSkillCircleImage.drawImage,\r\n                            sortName: \"UI\",\r\n                        });\r\n                    }\r\n                    //指位置\r\n                    Camera_1.CameraComponent.mainCamera.AddPictureData({\r\n                        drawComponent: null,\r\n                        drawPoint: new Point_1.Point2d(nowPoint.x - this.backCircleImage.size.width / 2, nowPoint.y - this.backCircleImage.size.height / 2),\r\n                        image: this.backCircleImage.drawImage,\r\n                        sortName: \"UI\",\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        Update() {\r\n            this.keyUpdate();\r\n            this.keyStatusUpdate();\r\n            this.axisUpdate();\r\n            this.MouseStatusReset();\r\n            this.TouchUpdate();\r\n        }\r\n        get mousePoint() { return this._mousePoint; }\r\n        get mouseClick_left() { return this._mouseClick_left; }\r\n        get mouseClick_right() { return this._mouseClick_right; }\r\n        set mouseClick_left(value) { this._mouseClick_left = value; }\r\n        set mouseClick_right(value) { this._mouseClick_right = value; }\r\n        get mouseScroll() { return this._mouseScroll; }\r\n        GetPointObject(tag) {\r\n            var _a;\r\n            const scene = SceneManager_1.SceneManager.instance.GetTopScene();\r\n            if (scene != null) {\r\n                //マウスが範囲の中にあるオブジェクトを得る\r\n                const objects = scene.GetAllActiveObject();\r\n                let targets = [];\r\n                for (let i = 0; i < objects.length; i++) {\r\n                    const transform = objects[i].GetComponent(Transform_1.TransformComponent);\r\n                    if (transform != null) {\r\n                        const startPoint = transform.globalDrawStartPoint;\r\n                        if ((_a = Camera_1.CameraComponent.mainCamera) === null || _a === void 0 ? void 0 : _a.transform) {\r\n                            startPoint.x -= Camera_1.CameraComponent.mainCamera.transform.globalDrawStartPoint.x;\r\n                            startPoint.y -= Camera_1.CameraComponent.mainCamera.transform.globalDrawStartPoint.y;\r\n                        }\r\n                        if (startPoint.x <= this.mousePoint.x && this.mousePoint.x <= startPoint.x + transform.size.width &&\r\n                            startPoint.y <= this.mousePoint.y && this.mousePoint.y <= startPoint.y + transform.size.height) {\r\n                            targets.push(objects[i]);\r\n                        }\r\n                    }\r\n                }\r\n                //---\r\n                //重なった要素の中から一番手前の要素を得る\r\n                let target = null;\r\n                for (let i = 0; i < targets.length; i++) {\r\n                    let draw = targets[i].GetComponent(Draw_1.DrawComponent) != null ? targets[i].GetComponent(Draw_1.DrawComponent) : null;\r\n                    if (draw == null) {\r\n                        draw = targets[i].GetComponent(DrawTextSingleline_1.DrawTextSinglelineComponent) ? targets[i].GetComponent(DrawTextSingleline_1.DrawTextSinglelineComponent) : null;\r\n                    }\r\n                    if (draw == null) {\r\n                        draw = targets[i].GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent) ? targets[i].GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent) : null;\r\n                    }\r\n                    if (draw != null) {\r\n                        if (draw.sortNumber == -1) {\r\n                            continue;\r\n                        }\r\n                        if (target == null) {\r\n                            target = targets[i];\r\n                        }\r\n                        else {\r\n                            let targetDraw = target.GetComponent(Draw_1.DrawComponent) ? target.GetComponent(Draw_1.DrawComponent) : null;\r\n                            if (targetDraw == null) {\r\n                                targetDraw = target.GetComponent(DrawTextSingleline_1.DrawTextSinglelineComponent) ? target.GetComponent(DrawTextSingleline_1.DrawTextSinglelineComponent) : null;\r\n                            }\r\n                            if (targetDraw == null) {\r\n                                targetDraw = target.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent) ? target.GetComponent(DrawTextMultiline_1.DrawTextMultilineComponent) : null;\r\n                            }\r\n                            if (targetDraw == null || draw.sortNumber < targetDraw.sortNumber) {\r\n                                target = targets[i];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //返す\r\n                if (target != null && (tag == undefined || target.tag.includes(tag))) {\r\n                    return target;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        MouseStatusReset() {\r\n            this._mouseScroll = 0;\r\n            if (this.mouseClick_left == \"begin\") {\r\n                this._mouseClick_left = \"stay\";\r\n            }\r\n            else if (this.mouseClick_left == \"end\") {\r\n                this._mouseClick_left = \"none\";\r\n            }\r\n            if (this.mouseClick_right == \"begin\") {\r\n                this._mouseClick_right = \"stay\";\r\n            }\r\n            else if (this.mouseClick_right == \"end\") {\r\n                this._mouseClick_right = \"none\";\r\n            }\r\n        }\r\n    }\r\n    exports.InputManager = InputManager;\r\n    //シングルトン\r\n    InputManager.instance = new InputManager();\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=InputManager.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/System/InputManager.js?");

/***/ }),

/***/ "./JavaScript/GameBase/System/LoopManager.js":
/*!***************************************************!*\
  !*** ./JavaScript/GameBase/System/LoopManager.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ../Class/CountDown */ \"./JavaScript/GameBase/Class/CountDown.js\"), __webpack_require__(/*! ./InputManager */ \"./JavaScript/GameBase/System/InputManager.js\"), __webpack_require__(/*! ./GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SceneManager_1, CountDown_1, InputManager_1, GlobalData_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.LoopManager = void 0;\r\n    class LoopManager {\r\n        constructor() {\r\n            //--\r\n            //秒間フレーム数\r\n            this.fps = 60;\r\n            //fos計測用\r\n            this.beforeFrameTime = 0;\r\n            this.NextShowCount = new CountDown_1.CountDown(30, true);\r\n            this.fpsList = [];\r\n            //次のフレーム開始用定時間\r\n            this.nextFlameTime = 0;\r\n            //fps表示フラグ\r\n            this.fpsDisplay = document.createElement(\"p\");\r\n            //ループ停止フラグ\r\n            this.stopLoop = false;\r\n            //二重進行阻止\r\n            this.nowLoop = false;\r\n        }\r\n        SetUp(fps, fpsDisplay) {\r\n            this.fps = fps;\r\n            if (fpsDisplay != undefined)\r\n                this.fpsDisplay = fpsDisplay;\r\n        }\r\n        StartLoop() {\r\n            if (this.nowLoop)\r\n                return;\r\n            const loop = () => {\r\n                var _a, _b;\r\n                const beginTime = Date.now();\r\n                if (Date.now() >= this.nextFlameTime && !this.stopLoop) {\r\n                    if (SceneManager_1.SceneManager.instance.GetTopScene() != null) {\r\n                        //シーンの処理\r\n                        (_a = SceneManager_1.SceneManager.instance.GetTopScene()) === null || _a === void 0 ? void 0 : _a.Update();\r\n                        (_b = SceneManager_1.SceneManager.instance.GetTopScene()) === null || _b === void 0 ? void 0 : _b.BaseUpdate();\r\n                    }\r\n                    else {\r\n                        GlobalData_1.GlobalData.instance.mainCtx.fillStyle = \"black\";\r\n                        GlobalData_1.GlobalData.instance.mainCtx.fillRect(0, 0, GlobalData_1.GlobalData.instance.mainCanvas.width, GlobalData_1.GlobalData.instance.mainCanvas.height);\r\n                    }\r\n                    //入力処理\r\n                    InputManager_1.InputManager.instance.Update();\r\n                    //時間管理\r\n                    const oneFlametime = 1000 / (Date.now() - this.beforeFrameTime);\r\n                    this.beforeFrameTime = Date.now();\r\n                    this.fpsList.push(oneFlametime);\r\n                    //fps計算・表示\r\n                    if (this.NextShowCount.Count()) {\r\n                        let averageFps = 0;\r\n                        for (let i = 0; i < this.fpsList.length; i++) {\r\n                            averageFps += this.fpsList[i];\r\n                        }\r\n                        averageFps /= this.fpsList.length;\r\n                        this.fpsList = [];\r\n                        this.fpsDisplay.textContent = Math.floor(averageFps) + \"fps\";\r\n                    }\r\n                    this.nextFlameTime = beginTime + Math.floor(1000 / this.fps);\r\n                }\r\n                if (this.nowLoop)\r\n                    window.requestAnimationFrame(loop);\r\n            };\r\n            this.nowLoop = true;\r\n            loop();\r\n        }\r\n        CanselLoop() {\r\n            this.nowLoop = false;\r\n        }\r\n    }\r\n    exports.LoopManager = LoopManager;\r\n    //シングルトン\r\n    LoopManager.instance = new LoopManager();\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=LoopManager.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/System/LoopManager.js?");

/***/ }),

/***/ "./JavaScript/GameBase/System/SceneManager.js":
/*!****************************************************!*\
  !*** ./JavaScript/GameBase/System/SceneManager.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Class/Stack */ \"./JavaScript/GameBase/Class/Stack.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Stack_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SceneManager = void 0;\r\n    class SceneManager {\r\n        constructor() {\r\n            //public SetUp() { }\r\n            //---\r\n            this.SceneStack = new Stack_1.Stack([]);\r\n        }\r\n        get StackScene() {\r\n            let scenes = \"scene:\\n\\r\";\r\n            for (let i = 0; i < this.SceneStack.length; i++) {\r\n                scenes += `${i + 1} : ${this.SceneStack.getElement(i)}\\n\\r`;\r\n            }\r\n            return scenes;\r\n        }\r\n        AddScene(scene) {\r\n            var _a, _b;\r\n            (_a = this.SceneStack.Top) === null || _a === void 0 ? void 0 : _a.Move();\r\n            this.SceneStack.Add(scene);\r\n            (_b = this.SceneStack.Top) === null || _b === void 0 ? void 0 : _b.Call();\r\n        }\r\n        RemoveScene(count) {\r\n            var _a, _b;\r\n            (_a = this.SceneStack.Top) === null || _a === void 0 ? void 0 : _a.Move();\r\n            for (let i = 0; i < count; i++) {\r\n                if (this.SceneStack.length == 0)\r\n                    break;\r\n                this.SceneStack.Pop();\r\n            }\r\n            (_b = this.SceneStack.Top) === null || _b === void 0 ? void 0 : _b.Call();\r\n        }\r\n        GetTopScene() {\r\n            return this.SceneStack.Top;\r\n        }\r\n    }\r\n    exports.SceneManager = SceneManager;\r\n    //シングルトン\r\n    SceneManager.instance = new SceneManager();\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SceneManager.js.map\n\n//# sourceURL=webpack:///./JavaScript/GameBase/System/SceneManager.js?");

/***/ }),

/***/ "./JavaScript/Object/Debuger.js":
/*!**************************************!*\
  !*** ./JavaScript/Object/Debuger.js ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Debuger */ \"./JavaScript/Component/Debuger.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Debuger_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.DebugerObject = void 0;\r\n    class DebugerObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponent(new Debuger_1.DebugerComponent());\r\n        }\r\n    }\r\n    exports.DebugerObject = DebugerObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Debuger.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/Debuger.js?");

/***/ }),

/***/ "./JavaScript/Object/Enemy.js":
/*!************************************!*\
  !*** ./JavaScript/Object/Enemy.js ***!
  \************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Enemy */ \"./JavaScript/Component/Enemy.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Enemy_1, Aabb_1, Animation_1, Draw_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.EnemyObject = void 0;\r\n    class EnemyObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Aabb_1.AabbComponent(),\r\n                new Draw_1.DrawComponent(),\r\n                new Enemy_1.EnemyComponent(),\r\n                new Animation_1.AnimationComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.EnemyObject = EnemyObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Enemy.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/Enemy.js?");

/***/ }),

/***/ "./JavaScript/Object/Floor.js":
/*!************************************!*\
  !*** ./JavaScript/Object/Floor.js ***!
  \************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Floor */ \"./JavaScript/Component/Floor.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Floor_1, Point_1, Aabb_1, Draw_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.FloorObject = void 0;\r\n    class FloorObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Draw_1.DrawComponent(),\r\n                new Aabb_1.AabbComponent(),\r\n                new Floor_1.FloorComponent(),\r\n            ]);\r\n            this.AddChildObject(new FloorEffectObject(\"effect\", {\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    size: init.transform.size != undefined ? init.transform.size : undefined,\r\n                    anchor: new Point_1.Point2d(0, 0),\r\n                    position: new Point_1.Point2d(0, 0),\r\n                },\r\n                draw: {\r\n                    type: Draw_1.DrawComponent,\r\n                    sortName: \"floor\",\r\n                },\r\n                aabb: {\r\n                    type: Aabb_1.AabbComponent,\r\n                    size: init.aabb.size != undefined ? init.aabb.size : undefined,\r\n                    offset: init.aabb.offset != undefined ? init.aabb.offset : undefined,\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    exports.FloorObject = FloorObject;\r\n    class FloorEffectObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Aabb_1.AabbComponent(),\r\n                new Draw_1.DrawComponent(),\r\n            ]);\r\n        }\r\n    }\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Floor.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/Floor.js?");

/***/ }),

/***/ "./JavaScript/Object/Fort.js":
/*!***********************************!*\
  !*** ./JavaScript/Object/Fort.js ***!
  \***********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Fort */ \"./JavaScript/Component/Fort.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\"), __webpack_require__(/*! ../GameBase/Game/Object/ImageDisplay */ \"./JavaScript/GameBase/Game/Object/ImageDisplay.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Fort_1, Aabb_1, Animation_1, Draw_1, DrawTextSingleline_1, Transform_1, GameObjectBase_1, ImageDisplay_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.FortObject = void 0;\r\n    class FortObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Draw_1.DrawComponent(),\r\n                new Aabb_1.AabbComponent(),\r\n                new Animation_1.AnimationComponent(),\r\n                new Fort_1.FortComponent(),\r\n                new DrawTextSingleline_1.DrawTextSinglelineComponent(),\r\n            ]);\r\n            this.AddChildObject(new ImageDisplay_1.ImageDisplayObject(\"effect\", {\r\n                draw: {\r\n                    type: Draw_1.DrawComponent,\r\n                },\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    exports.FortObject = FortObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Fort.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/Fort.js?");

/***/ }),

/***/ "./JavaScript/Object/GameCamera.js":
/*!*****************************************!*\
  !*** ./JavaScript/Object/GameCamera.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/CameraTracker */ \"./JavaScript/Component/CameraTracker.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, CameraTracker_1, Camera_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameCameraObject = void 0;\r\n    class GameCameraObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Camera_1.CameraComponent(),\r\n                new CameraTracker_1.CameraTrackerComponent(),\r\n                new Transform_1.TransformComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.GameCameraObject = GameCameraObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameCamera.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/GameCamera.js?");

/***/ }),

/***/ "./JavaScript/Object/GameMaster.js":
/*!*****************************************!*\
  !*** ./JavaScript/Object/GameMaster.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/GameMaster */ \"./JavaScript/Component/GameMaster.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, GameMaster_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameMasterObject = void 0;\r\n    class GameMasterObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponent(new GameMaster_1.GameMasterComponent());\r\n        }\r\n    }\r\n    exports.GameMasterObject = GameMasterObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameMaster.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/GameMaster.js?");

/***/ }),

/***/ "./JavaScript/Object/ImmovableFloor.js":
/*!*********************************************!*\
  !*** ./JavaScript/Object/ImmovableFloor.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Floor */ \"./JavaScript/Component/Floor.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\"), __webpack_require__(/*! ../GameBase/Game/Object/ImageDisplay */ \"./JavaScript/GameBase/Game/Object/ImageDisplay.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Floor_1, Point_1, Aabb_1, Draw_1, Transform_1, GameObjectBase_1, ImageDisplay_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ImmovableFloor = void 0;\r\n    class ImmovableFloor extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddTag(\"Floor\");\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Draw_1.DrawComponent(),\r\n                new Aabb_1.AabbComponent(),\r\n                new Floor_1.FloorComponent(),\r\n            ]);\r\n            this.AddChildObject(new ImageDisplay_1.ImageDisplayObject(\"effect\", {\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    position: new Point_1.Point2d(0, 0),\r\n                    anchor: new Point_1.Point2d(0, 0),\r\n                },\r\n                draw: {\r\n                    type: Draw_1.DrawComponent,\r\n                    sortName: \"guid-bottom\",\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    exports.ImmovableFloor = ImmovableFloor;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=ImmovableFloor.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/ImmovableFloor.js?");

/***/ }),

/***/ "./JavaScript/Object/OneAnimation.js":
/*!*******************************************!*\
  !*** ./JavaScript/Object/OneAnimation.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/OneAnimation */ \"./JavaScript/Component/OneAnimation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, OneAnimation_1, Animation_1, Draw_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.OneAnimationObject = void 0;\r\n    class OneAnimationObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Animation_1.AnimationComponent(),\r\n                new OneAnimation_1.OneAnimationComponent(),\r\n                new Draw_1.DrawComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.OneAnimationObject = OneAnimationObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=OneAnimation.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/OneAnimation.js?");

/***/ }),

/***/ "./JavaScript/Object/PauseDisplay.js":
/*!*******************************************!*\
  !*** ./JavaScript/Object/PauseDisplay.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Pouse */ \"./JavaScript/Component/Pouse.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\"), __webpack_require__(/*! ../GameBase/Game/Object/ImageDisplay */ \"./JavaScript/GameBase/Game/Object/ImageDisplay.js\"), __webpack_require__(/*! ../GameBase/Game/Object/TextMultiline */ \"./JavaScript/GameBase/Game/Object/TextMultiline.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../GameBase/System/SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ../Scene/SelectScene */ \"./JavaScript/Scene/SelectScene.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Pouse_1, Color_1, ImageBase_1, Point_1, Size_1, Draw_1, DrawTextMultiline_1, DrawTextSingleline_1, Transform_1, Ui_1, Button_1, GameObjectBase_1, ImageDisplay_1, TextMultiline_1, GlobalData_1, SceneManager_1, SelectScene_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.PauseDisplayObject = void 0;\r\n    class PauseDisplayObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Pouse_1.PauseComponent(),\r\n                new Transform_1.TransformComponent(),\r\n            ]);\r\n            this.AddChildObjects([\r\n                new ImageDisplay_1.ImageDisplayObject(\"background\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(800, 500),\r\n                    },\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        image: ImageBase_1.ImageBase.GetColorImage(new Size_1.Size(800, 500), new Color_1.Color(100, 100, 100, 0.4)),\r\n                        sortName: \"frontUI\",\r\n                    },\r\n                }),\r\n                new TextMultiline_1.TextMultilineObject(\"stageText\", {\r\n                    drawTextMultiline: {\r\n                        type: DrawTextMultiline_1.DrawTextMultilineComponent,\r\n                        sortName: \"frontUI\",\r\n                        textHeight: false,\r\n                        textAlign: \"center\",\r\n                        lineHeight: \"center\",\r\n                        fontSize: 14,\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0.5, 0),\r\n                        position: new Point_1.Point2d(400, 50),\r\n                        size: new Size_1.Size(400, 250),\r\n                    }\r\n                }),\r\n                new Button_1.ButtonObject(\"restartingButton\", {\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"frontUI\",\r\n                        text: \"ゲームを再開する\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        textAlign: \"center\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(300, 50),\r\n                        anchor: new Point_1.Point2d(0, 1),\r\n                        position: new Point_1.Point2d(410, 450),\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        hoverLineWidth: 0,\r\n                        focusLineWidth: 0,\r\n                    }\r\n                }),\r\n                new Button_1.ButtonObject(\"backSceneButton\", {\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"frontUI\",\r\n                        text: \"ステージ選択画面へ戻る\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        textAlign: \"center\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(300, 50),\r\n                        anchor: new Point_1.Point2d(1, 1),\r\n                        position: new Point_1.Point2d(390, 450),\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: (self) => {\r\n                            SceneManager_1.SceneManager.instance.RemoveScene(1);\r\n                            SceneManager_1.SceneManager.instance.AddScene(new SelectScene_1.SelectScene());\r\n                        },\r\n                        hoverLineWidth: 5,\r\n                        focusLineWidth: 5,\r\n                    },\r\n                }),\r\n            ]);\r\n        }\r\n    }\r\n    exports.PauseDisplayObject = PauseDisplayObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=PauseDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/PauseDisplay.js?");

/***/ }),

/***/ "./JavaScript/Object/Player.js":
/*!*************************************!*\
  !*** ./JavaScript/Object/Player.js ***!
  \*************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Grounding */ \"./JavaScript/Component/Grounding.js\"), __webpack_require__(/*! ../Component/PlayerController */ \"./JavaScript/Component/PlayerController.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Grounding_1, PlayerController_1, Aabb_1, Animation_1, Draw_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.PlayerObject = void 0;\r\n    class PlayerObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Aabb_1.AabbComponent(),\r\n                new PlayerController_1.PlayerControllerComponent(),\r\n                new Grounding_1.GroundingComponent(),\r\n                new Animation_1.AnimationComponent(),\r\n                new Draw_1.DrawComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.PlayerObject = PlayerObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Player.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/Player.js?");

/***/ }),

/***/ "./JavaScript/Object/Reslut.js":
/*!*************************************!*\
  !*** ./JavaScript/Object/Reslut.js ***!
  \*************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\"), __webpack_require__(/*! ../GameBase/Game/Object/TextMultiline */ \"./JavaScript/GameBase/Game/Object/TextMultiline.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../GameBase/System/SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ../Other/SaveData */ \"./JavaScript/Other/SaveData.js\"), __webpack_require__(/*! ../Scene/SelectScene */ \"./JavaScript/Scene/SelectScene.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Color_1, ImageBase_1, Point_1, Size_1, Draw_1, DrawTextMultiline_1, DrawTextSingleline_1, Transform_1, Ui_1, Button_1, GameObjectBase_1, TextMultiline_1, GlobalData_1, SceneManager_1, SaveData_1, SelectScene_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ResultObject = void 0;\r\n    class ResultObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Draw_1.DrawComponent(),\r\n            ]);\r\n            this.AddChildObject(new TextMultiline_1.TextMultilineObject(\"resultText\", {\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    position: init.transform.size != undefined ? new Point_1.Point2d(init.transform.size.width * 0.5, init.transform.size.height * 0.1) : new Point_1.Point2d(200, 500 * 0.9 / 2),\r\n                    anchor: new Point_1.Point2d(0.5, 0),\r\n                    size: init.transform.size != undefined ? new Size_1.Size(init.transform.size.width * 0.8, init.transform.size.height * 0.5) : new Size_1.Size(256, 256),\r\n                },\r\n                drawTextMultiline: {\r\n                    type: DrawTextMultiline_1.DrawTextMultilineComponent,\r\n                    sortName: \"UI\",\r\n                    backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    fontColor: Color_1.Color.GetColor(\"white\"),\r\n                    fontSize: 25,\r\n                    textAlign: \"center\",\r\n                    lineHeight: \"center\",\r\n                    textHeight: false,\r\n                },\r\n            }));\r\n            this.AddChildObject(new Button_1.ButtonObject(\"BackSceneButton\", {\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    position: init.transform.size != undefined ? new Point_1.Point2d(init.transform.size.width / 2, init.transform.size.height * 0.9) : new Point_1.Point2d(0, 0),\r\n                    anchor: new Point_1.Point2d(0.5, 0),\r\n                    size: init.transform.size != undefined ? new Size_1.Size(init.transform.size.width * 0.5, init.transform.size.height * 0.2) : new Size_1.Size(256, 256),\r\n                },\r\n                darwTextSingle: {\r\n                    type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                    text: \"完了\",\r\n                    textAlign: \"center\",\r\n                    lineHeight: \"center\",\r\n                    sortName: \"frontUI\",\r\n                    fontColor: Color_1.Color.GetColor(\"white\"),\r\n                    backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                },\r\n                ui: {\r\n                    type: Ui_1.UiComponent,\r\n                    clickEvent: (self) => {\r\n                        SaveData_1.SaveData.instance.Save();\r\n                        SceneManager_1.SceneManager.instance.RemoveScene(1);\r\n                        SceneManager_1.SceneManager.instance.AddScene(new SelectScene_1.SelectScene());\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    exports.ResultObject = ResultObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Reslut.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/Reslut.js?");

/***/ }),

/***/ "./JavaScript/Object/ScoreDisplay.js":
/*!*******************************************!*\
  !*** ./JavaScript/Object/ScoreDisplay.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/ScoreDisplay */ \"./JavaScript/Component/ScoreDisplay.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ScoreDisplay_1, DrawTextMultiline_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.ScoreDisplayObject = void 0;\r\n    class ScoreDisplayObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new DrawTextMultiline_1.DrawTextMultilineComponent(),\r\n                new ScoreDisplay_1.ScoreDisplayComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.ScoreDisplayObject = ScoreDisplayObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=ScoreDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/ScoreDisplay.js?");

/***/ }),

/***/ "./JavaScript/Object/SelectSkillDisplay.js":
/*!*************************************************!*\
  !*** ./JavaScript/Object/SelectSkillDisplay.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/SelectSkillDisplay */ \"./JavaScript/Component/SelectSkillDisplay.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SelectSkillDisplay_1, DrawTextMultiline_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SelectSkillDisplayObject = void 0;\r\n    class SelectSkillDisplayObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new DrawTextMultiline_1.DrawTextMultilineComponent(),\r\n                new SelectSkillDisplay_1.SelectSkillDisplayComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.SelectSkillDisplayObject = SelectSkillDisplayObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SelectSkillDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/SelectSkillDisplay.js?");

/***/ }),

/***/ "./JavaScript/Object/SettingList.js":
/*!******************************************!*\
  !*** ./JavaScript/Object/SettingList.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/SettingListCreater */ \"./JavaScript/Component/SettingListCreater.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/ScrollBox */ \"./JavaScript/GameBase/Game/Component/ScrollBox.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SettingListCreater_1, Draw_1, ScrollBox_1, Transform_1, Ui_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SettingList = void 0;\r\n    class SettingList extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponent(new SettingListCreater_1.SettingListCreaterComponent);\r\n            this.AddComponent(new Ui_1.UiComponent());\r\n            this.AddComponent(new Draw_1.DrawComponent());\r\n            this.AddComponent(new Transform_1.TransformComponent());\r\n            this.AddComponent(new ScrollBox_1.ScrollBoxComponent());\r\n        }\r\n    }\r\n    exports.SettingList = SettingList;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SettingList.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/SettingList.js?");

/***/ }),

/***/ "./JavaScript/Object/StageInfoDisplay.js":
/*!***********************************************!*\
  !*** ./JavaScript/Object/StageInfoDisplay.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/SetStageInfo */ \"./JavaScript/Component/SetStageInfo.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\"), __webpack_require__(/*! ../GameBase/Game/Object/ImageDisplay */ \"./JavaScript/GameBase/Game/Object/ImageDisplay.js\"), __webpack_require__(/*! ../GameBase/Game/Object/TextMultiline */ \"./JavaScript/GameBase/Game/Object/TextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Object/TextSingleline */ \"./JavaScript/GameBase/Game/Object/TextSingleline.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SetStageInfo_1, Color_1, ImageBase_1, Point_1, Size_1, Draw_1, DrawTextMultiline_1, DrawTextSingleline_1, Transform_1, Ui_1, Button_1, GameObjectBase_1, ImageDisplay_1, TextMultiline_1, TextSingleline_1, GlobalData_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.StageInfoDisplayObject = exports.names_001 = void 0;\r\n    exports.names_001 = {\r\n        title: \"stageTitle\",\r\n        text: \"stageText\",\r\n        scoreText: \"scoreText\",\r\n        image: \"stageImage\",\r\n        start: \"startButton\",\r\n    };\r\n    class StageInfoDisplayObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Draw_1.DrawComponent(),\r\n                new Ui_1.UiComponent(),\r\n                new SetStageInfo_1.SetStageInfoComponent(),\r\n            ]);\r\n            const boxSize = new Size_1.Size(650, 500);\r\n            this.AddChildObjects([\r\n                new Button_1.ButtonObject(\"closeButton\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(120, 40),\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"frontUI\",\r\n                        text: \"閉じる\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        textAlign: \"center\",\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: (self) => {\r\n                            this.active = false;\r\n                        }\r\n                    }\r\n                }),\r\n                new TextSingleline_1.TextSinglelineObject(exports.names_001.title, {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0.5, 0),\r\n                        position: new Point_1.Point2d(boxSize.width / 2, 0),\r\n                        size: new Size_1.Size(boxSize.width / 2, boxSize.height * 0.1),\r\n                    },\r\n                    drawTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"frontUI\",\r\n                        text: \"タイトル\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        textAlign: \"center\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    },\r\n                }),\r\n                new Button_1.ButtonObject(exports.names_001.start, {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0.5, 1),\r\n                        position: new Point_1.Point2d(boxSize.width * 0.5, boxSize.height * 0.95),\r\n                        size: new Size_1.Size(boxSize.width * 0.5, boxSize.height * 0.1),\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"frontUI\",\r\n                        text: \"開始\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        textAlign: \"center\",\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                    }\r\n                }),\r\n                new TextMultiline_1.TextMultilineObject(exports.names_001.text, {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(1, 0),\r\n                        position: new Point_1.Point2d(boxSize.width * 0.95, boxSize.height * 0.1),\r\n                        size: new Size_1.Size(boxSize.width * 0.45, boxSize.height * 0.5),\r\n                    },\r\n                    drawTextMultiline: {\r\n                        type: DrawTextMultiline_1.DrawTextMultilineComponent,\r\n                        sortName: \"frontUI\",\r\n                        textHeight: false,\r\n                        textAlign: \"center\",\r\n                        lineHeight: \"center\",\r\n                        fontSize: 14,\r\n                        text: \"説明\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    }\r\n                }),\r\n                new TextMultiline_1.TextMultilineObject(exports.names_001.scoreText, {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(1, 1),\r\n                        position: new Point_1.Point2d(boxSize.width * 0.95, boxSize.height * 0.8),\r\n                        size: new Size_1.Size(boxSize.width * 0.45, boxSize.height * 0.2),\r\n                    },\r\n                    drawTextMultiline: {\r\n                        type: DrawTextMultiline_1.DrawTextMultilineComponent,\r\n                        sortName: \"frontUI\",\r\n                        textHeight: false,\r\n                        textAlign: \"center\",\r\n                        lineHeight: \"center\",\r\n                        fontSize: 14,\r\n                        text: \"スコア:n(rank)\\n基準点:x\\n高点:y\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    }\r\n                }),\r\n                new ImageDisplay_1.ImageDisplayObject(\"stageImageBackground\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(boxSize.width * 0.05, boxSize.height * 0.1),\r\n                        size: new Size_1.Size(boxSize.width * 0.45, boxSize.height * 0.7),\r\n                    },\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"frontUI\",\r\n                        image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    },\r\n                }),\r\n                new ImageDisplay_1.ImageDisplayObject(exports.names_001.image, {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0.5, 0.5),\r\n                        position: new Point_1.Point2d(boxSize.width * (0.05 + 0.45 / 2), boxSize.height * (0.1 + 0.7 / 2)),\r\n                        size: new Size_1.Size(boxSize.width * 0.405, boxSize.height * 0.63),\r\n                    },\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"frontUI\",\r\n                        image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    }\r\n                })\r\n            ]);\r\n        }\r\n    }\r\n    exports.StageInfoDisplayObject = StageInfoDisplayObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=StageInfoDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/StageInfoDisplay.js?");

/***/ }),

/***/ "./JavaScript/Object/StageList.js":
/*!****************************************!*\
  !*** ./JavaScript/Object/StageList.js ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/StageListCreater */ \"./JavaScript/Component/StageListCreater.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/ScrollBox */ \"./JavaScript/GameBase/Game/Component/ScrollBox.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, StageListCreater_1, Draw_1, ScrollBox_1, Transform_1, Ui_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.StageListObject = void 0;\r\n    class StageListObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Draw_1.DrawComponent(),\r\n                new Ui_1.UiComponent(),\r\n                new ScrollBox_1.ScrollBoxComponent(),\r\n                new StageListCreater_1.StageListCreaterComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.StageListObject = StageListObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=StageList.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/StageList.js?");

/***/ }),

/***/ "./JavaScript/Object/StatusDisplay.js":
/*!********************************************!*\
  !*** ./JavaScript/Object/StatusDisplay.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/StatusDisplay */ \"./JavaScript/Component/StatusDisplay.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, StatusDisplay_1, DrawTextMultiline_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.StatusDisplayObject = void 0;\r\n    class StatusDisplayObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new DrawTextMultiline_1.DrawTextMultilineComponent(),\r\n                new StatusDisplay_1.StatusDisplayComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.StatusDisplayObject = StatusDisplayObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=StatusDisplay.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/StatusDisplay.js?");

/***/ }),

/***/ "./JavaScript/Object/Tutorial.js":
/*!***************************************!*\
  !*** ./JavaScript/Object/Tutorial.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/TutorialSet */ \"./JavaScript/Component/TutorialSet.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\"), __webpack_require__(/*! ../GameBase/Game/Object/ImageDisplay */ \"./JavaScript/GameBase/Game/Object/ImageDisplay.js\"), __webpack_require__(/*! ../GameBase/Game/Object/TextMultiline */ \"./JavaScript/GameBase/Game/Object/TextMultiline.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, TutorialSet_1, Color_1, ImageBase_1, Point_1, Size_1, Draw_1, DrawTextMultiline_1, DrawTextSingleline_1, Transform_1, Ui_1, Button_1, GameObjectBase_1, ImageDisplay_1, TextMultiline_1, GlobalData_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.TutorialObject = void 0;\r\n    class TutorialObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, absolute, tagName) {\r\n            super(name, init, absolute, tagName);\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Draw_1.DrawComponent(),\r\n                new TutorialSet_1.TutorialSetComponent(),\r\n            ]);\r\n            const parentSize = init.transform.size != undefined ? init.transform.size : new Size_1.Size(64, 64);\r\n            this.AddChildObjects([\r\n                new ImageDisplay_1.ImageDisplayObject(\"background\", {\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"UI\",\r\n                        image: ImageBase_1.ImageBase.GetColorImage(new Size_1.Size(800, 500), new Color_1.Color(0, 0, 0, 0.5)),\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(800, 500),\r\n                        anchor: new Point_1.Point2d(0.5, 0.5),\r\n                        position: new Point_1.Point2d(parentSize.width * 0.5, parentSize.height * 0.5),\r\n                    },\r\n                }),\r\n                new ImageDisplay_1.ImageDisplayObject(\"image\", {\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"frontUI\",\r\n                        backgroundColor: Color_1.Color.GetColor(\"white\", 0.5)\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(parentSize.width * 0.8, parentSize.height * 0.4),\r\n                        anchor: new Point_1.Point2d(0.5, 0),\r\n                        position: new Point_1.Point2d(parentSize.width * 0.5, parentSize.height * 0.05)\r\n                    },\r\n                }),\r\n                new TextMultiline_1.TextMultilineObject(\"text\", {\r\n                    drawTextMultiline: {\r\n                        type: DrawTextMultiline_1.DrawTextMultilineComponent,\r\n                        sortName: \"frontUI\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        textAlign: \"left\",\r\n                        lineHeight: \"top\",\r\n                        margin: new Size_1.Size(30, 20),\r\n                        textHeight: false,\r\n                        rowInterval: 5,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(parentSize.width * 0.8, parentSize.height * 0.4),\r\n                        anchor: new Point_1.Point2d(0.5, 0),\r\n                        position: new Point_1.Point2d(parentSize.width * 0.5, parentSize.height * 0.45)\r\n                    }\r\n                }),\r\n                new Button_1.ButtonObject(\"nextButton\", {\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"frontUI\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        textAlign: \"center\",\r\n                        text: \"次 ->\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(parentSize.width * 0.4, parentSize.height * 0.1),\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(parentSize.width * 0.5, parentSize.height * 0.85),\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    }\r\n                }),\r\n                new Button_1.ButtonObject(\"backButton\", {\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"frontUI\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        textAlign: \"center\",\r\n                        text: \"<- 前\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(parentSize.width * 0.4, parentSize.height * 0.1),\r\n                        anchor: new Point_1.Point2d(1, 0),\r\n                        position: new Point_1.Point2d(parentSize.width * 0.5, parentSize.height * 0.85),\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    }\r\n                }),\r\n            ]);\r\n        }\r\n    }\r\n    exports.TutorialObject = TutorialObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Tutorial.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/Tutorial.js?");

/***/ }),

/***/ "./JavaScript/Object/Wall.js":
/*!***********************************!*\
  !*** ./JavaScript/Object/Wall.js ***!
  \***********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Object/GameObjectBase */ \"./JavaScript/GameBase/Game/Object/GameObjectBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Aabb_1, Draw_1, Transform_1, GameObjectBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.WallObject = void 0;\r\n    class WallObject extends GameObjectBase_1.GameObjectBase {\r\n        constructor(name, init, active, tagName) {\r\n            super(name, init, active, tagName);\r\n            this.AddTag(\"Wall\");\r\n            this.AddComponents([\r\n                new Transform_1.TransformComponent(),\r\n                new Aabb_1.AabbComponent(),\r\n                new Draw_1.DrawComponent(),\r\n            ]);\r\n        }\r\n    }\r\n    exports.WallObject = WallObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=Wall.js.map\n\n//# sourceURL=webpack:///./JavaScript/Object/Wall.js?");

/***/ }),

/***/ "./JavaScript/Other/DebugFlag.js":
/*!***************************************!*\
  !*** ./JavaScript/Other/DebugFlag.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Debuger */ \"./JavaScript/Component/Debuger.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Debuger_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.debugFlagEvent = void 0;\r\n    const debugFlagEvent = () => {\r\n        const display = document.getElementById(\"debugDisplay\");\r\n        const debugDisplayPassword = document.getElementById(\"debugDisplayPassword\");\r\n        if (display == null || debugDisplayPassword == null) {\r\n            console.log(\"デバッグ用のHTML要素がない\");\r\n            return;\r\n        }\r\n        debugDisplayPassword.addEventListener(\"input\", (e) => {\r\n            const word = debugDisplayPassword.value.split(\"_\");\r\n            for (let key in Debuger_1.DebugerComponent.debugFlag) {\r\n                Debuger_1.DebugerComponent.debugFlag[key] = false;\r\n            }\r\n            for (let i = 0; i < word.length; i++) {\r\n                if (Debuger_1.DebugerComponent.debugFlag[word[i]] != undefined) {\r\n                    Debuger_1.DebugerComponent.debugFlag[word[i]] = true;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    exports.debugFlagEvent = debugFlagEvent;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=DebugFlag.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/DebugFlag.js?");

/***/ }),

/***/ "./JavaScript/Other/GameRule.js":
/*!**************************************!*\
  !*** ./JavaScript/Other/GameRule.js ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameRule = void 0;\r\n    class GameRule {\r\n    }\r\n    exports.GameRule = GameRule;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameRule.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/GameRule.js?");

/***/ }),

/***/ "./JavaScript/Other/GameRuleList.js":
/*!******************************************!*\
  !*** ./JavaScript/Other/GameRuleList.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ./PlayerSkillList */ \"./JavaScript/Other/PlayerSkillList.js\"), __webpack_require__(/*! ./GameRule_LineUp */ \"./JavaScript/Other/GameRule_LineUp.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../Component/Enemy */ \"./JavaScript/Component/Enemy.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ./PlayerMovePatternList */ \"./JavaScript/Other/PlayerMovePatternList.js\"), __webpack_require__(/*! ../Component/Fort */ \"./JavaScript/Component/Fort.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ./GameRule_tutorial_normal */ \"./JavaScript/Other/GameRule_tutorial_normal.js\"), __webpack_require__(/*! ./GameRule_tutorial_lineup */ \"./JavaScript/Other/GameRule_tutorial_lineup.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, Point_1, Size_1, GlobalData_1, PlayerSkillList_1, GameRule_LineUp_1, Transform_1, Animation_1, Draw_1, Enemy_1, Aabb_1, PlayerMovePatternList_1, Fort_1, DrawTextSingleline_1, Color_1, GameRule_tutorial_normal_1, GameRule_tutorial_lineup_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.gameRuleList = void 0;\r\n    //砲台のカウントダウンのテキスト\r\n    const fortText = {\r\n        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n        sortName: \"character\",\r\n        fontColor: Color_1.Color.GetColor(\"white\"),\r\n        lineHeight: \"top\",\r\n        fontSize: 20,\r\n    };\r\n    //砲台上のアニメ四方\r\n    const fortAnime_up = { type: Animation_1.AnimationComponent, loop: false, loopTime_second: 1, anime: [new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/fort_up.png\"),] };\r\n    const fortAnime_down = { type: Animation_1.AnimationComponent, loop: false, loopTime_second: 1, anime: [new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/fort_down.png\"),] };\r\n    const fortAnime_left = { type: Animation_1.AnimationComponent, loop: false, loopTime_second: 1, anime: [new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/fort_left.png\"),] };\r\n    const fortAnime_right = { type: Animation_1.AnimationComponent, loop: false, loopTime_second: 1, anime: [new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/fort_right.png\"),], };\r\n    //その他アニメ\r\n    const destructionAnime = [\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break2.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break3.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break4.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break5.png\"),\r\n    ];\r\n    const skyMonsterAnime = [\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/enemy_sky1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/enemy_sky2.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/enemy_sky1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/enemy_sky3.png\"),\r\n    ];\r\n    const groundMonsterAnime = [\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/enemy_ground1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/enemy_ground2.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/enemy_ground1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/enemy_ground3.png\"),\r\n    ];\r\n    const skyMonsterAnimation = {\r\n        type: Animation_1.AnimationComponent,\r\n        animes: {\r\n            \"destruction\": destructionAnime,\r\n            \"work\": skyMonsterAnime,\r\n            \"stand\": skyMonsterAnime,\r\n        },\r\n        loopTime_second: 1,\r\n        loop: true,\r\n        anime: skyMonsterAnime\r\n    };\r\n    const groundMonsterAnimation = {\r\n        type: Animation_1.AnimationComponent,\r\n        animes: {\r\n            \"destruction\": destructionAnime,\r\n            \"work\": groundMonsterAnime,\r\n            \"stand\": groundMonsterAnime,\r\n        },\r\n        loopTime_second: 1,\r\n        loop: true,\r\n        anime: groundMonsterAnime,\r\n    };\r\n    //弾のデータ\r\n    const fortData_up = {\r\n        aabb: {\r\n            type: Aabb_1.AabbComponent\r\n        },\r\n        anime: {\r\n            type: Animation_1.AnimationComponent,\r\n            animes: {\r\n                \"work\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/bead.png\"),\r\n                ],\r\n                \"stand\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/bead.png\")\r\n                ],\r\n                \"destruction\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break1.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break2.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break3.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break4.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break5.png\"),\r\n                ]\r\n            },\r\n            loop: false,\r\n            loopTime_second: 0.125,\r\n        },\r\n        draw: { type: Draw_1.DrawComponent },\r\n        enemy: {\r\n            type: Enemy_1.EnemyComponent,\r\n            enemyType: \"bead\",\r\n            route: [\"up\"],\r\n            position: new Point_1.Point2d(0, 0),\r\n            speed: 3,\r\n            gameMasterObjName: \"gameMaster\",\r\n        },\r\n        transform: { type: Transform_1.TransformComponent }\r\n    };\r\n    const fortData_down = {\r\n        aabb: { type: Aabb_1.AabbComponent },\r\n        anime: { type: Animation_1.AnimationComponent,\r\n            animes: {\r\n                \"work\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/bead.png\"),\r\n                ],\r\n                \"stand\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/bead.png\")\r\n                ],\r\n                \"destruction\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break1.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break2.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break3.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break4.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break5.png\"),\r\n                ]\r\n            },\r\n            loop: false,\r\n            loopTime_second: 0.125,\r\n        },\r\n        draw: { type: Draw_1.DrawComponent },\r\n        enemy: { type: Enemy_1.EnemyComponent,\r\n            enemyType: \"bead\",\r\n            route: [\"down\"],\r\n            position: new Point_1.Point2d(0, 0),\r\n            speed: 3,\r\n            gameMasterObjName: \"gameMaster\"\r\n        },\r\n        transform: { type: Transform_1.TransformComponent }\r\n    };\r\n    const fortData_left = {\r\n        aabb: { type: Aabb_1.AabbComponent },\r\n        anime: {\r\n            type: Animation_1.AnimationComponent,\r\n            animes: {\r\n                \"work\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/bead.png\"),\r\n                ],\r\n                \"stand\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/bead.png\")\r\n                ],\r\n                \"destruction\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break1.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break2.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break3.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break4.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break5.png\"),\r\n                ]\r\n            },\r\n            loop: false,\r\n            loopTime_second: 0.125,\r\n        },\r\n        draw: { type: Draw_1.DrawComponent },\r\n        enemy: { type: Enemy_1.EnemyComponent,\r\n            enemyType: \"bead\",\r\n            route: [\"left\"],\r\n            position: new Point_1.Point2d(0, 0),\r\n            speed: 3,\r\n            gameMasterObjName: \"gameMaster\",\r\n        },\r\n        transform: { type: Transform_1.TransformComponent },\r\n    };\r\n    const fortData_right = {\r\n        aabb: { type: Aabb_1.AabbComponent },\r\n        anime: { type: Animation_1.AnimationComponent,\r\n            animes: {\r\n                \"work\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/bead.png\"),\r\n                ],\r\n                \"stand\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/bead.png\")\r\n                ],\r\n                \"destruction\": [\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break1.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break2.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break3.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break4.png\"),\r\n                    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/break5.png\"),\r\n                ]\r\n            },\r\n            loop: false,\r\n            loopTime_second: 0.125,\r\n        },\r\n        draw: { type: Draw_1.DrawComponent },\r\n        enemy: { type: Enemy_1.EnemyComponent,\r\n            enemyType: \"bead\",\r\n            route: [\"right\"],\r\n            position: new Point_1.Point2d(0, 0),\r\n            speed: 3,\r\n            gameMasterObjName: \"gameMaster\",\r\n        },\r\n        transform: {\r\n            type: Transform_1.TransformComponent\r\n        },\r\n    };\r\n    exports.gameRuleList = [\r\n        /*\r\n        new GameRule_Normal(\r\n            {\r\n                name:  \"テスト1\",\r\n                description: \"試験用のステージ\",\r\n                referencePoint: {\"minimum\": 10, \"height\": 5,},\r\n                tileData: [\r\n                    //x:20,y:5\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 2, 0, 1, 0, 0, 0, 2, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n                    [1, 0, 2, 0, 0, 1, 0, 0, 2, 3, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 2, 0, 1, 0, 0, 0, 2, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                ],\r\n                startPoint: new Point2d(0, 2),\r\n                goalPoint: new Point2d(19, 2),\r\n                tileSize: new Size(100, 100),\r\n                playerMoveMethods: [\r\n                    playerMovePatternList[\"normal\"],\r\n                    playerMovePatternList[\"I\"],\r\n                    playerMovePatternList[\"-\"],\r\n                ],\r\n                playerSkills: [\r\n                    playerSkillList[\"powerUp1\"],\r\n                    playerSkillList[\"warp1\"],\r\n                ],\r\n                forts: [],\r\n                enemys: []\r\n            }\r\n        ),\r\n        new GameRule_LineUp(\r\n            {\r\n                name: \"テスト2\",\r\n                description: \"整頓型のルールのテスト用ステージ\",\r\n                referencePoint: {\"minimum\": 0, \"height\": 0,},\r\n                tileData: [\r\n                    [0, 0, 1, 0, 0],\r\n                    [0, 0, 0, 0, 0],\r\n                    [1, 0, 1, 0, 1],\r\n                    [0, 0, 0, 0, 0],\r\n                    [0, 0, 1, 0, 0],\r\n                ],\r\n                startPoint: new Point2d(2, 0),\r\n                goalPoints: [\r\n                    [0, 0, 0, 0, 0],\r\n                    [0, 0, 1, 0, 0],\r\n                    [0, 1, 1, 1, 0],\r\n                    [0, 0, 1, 0, 0],\r\n                    [0, 0, 0, 0, 0],\r\n                ],\r\n                tileSize: new Size(100, 100),\r\n                playerMoveMethods: [\r\n                    playerMovePatternList[\"normal\"],\r\n                    playerMovePatternList[\"I\"],\r\n                    playerMovePatternList[\"-\"],\r\n                ],\r\n                playerSkills: [],\r\n                forts: [],\r\n                enemys: [],\r\n            }\r\n        ),\r\n        new GameRule_Normal(\r\n            {\r\n                name: \"最速クリア\",\r\n                description: \"1マス移動でクリア可能\",\r\n                referencePoint: {\"minimum\": 0, \"height\": 0,},\r\n                tileData: [\r\n                    [0, 0, 0],\r\n                    [1, 0, 0],\r\n                    [0, 0, 0],\r\n                ],\r\n                startPoint: new Point2d(0, 1),\r\n                goalPoint: new Point2d(1, 1),\r\n                tileSize: new Size(100, 100),\r\n                playerMoveMethods: [\r\n                    playerMovePatternList[\"normal\"],\r\n                ],\r\n                playerSkills: [\r\n                    \r\n                ],\r\n                forts: [],\r\n                enemys: []\r\n            }\r\n        ),\r\n        new GameRule_Normal(\r\n            {\r\n                name: \"敵テスト\",\r\n                description: \"敵の動作確認\\n敵(地)/敵(空)/弾\",\r\n                referencePoint: {\"minimum\": 0, \"height\": 0,},\r\n                tileData: [\r\n                    [1, 0, 1, 0, 0, 0, 1, 0, 0],\r\n                    [1, 0, 1, 0, 0, 0, 1, 0, 1],\r\n                    [1, 0, 1, 0, 0, 0, 1, 0, 0],\r\n                ],\r\n                startPoint: new Point2d(0, 1),\r\n                goalPoint: new Point2d(8, 1),\r\n                tileSize: new Size(120, 120),\r\n                playerMoveMethods: [\r\n                    playerMovePatternList[\"normal\"],\r\n                    playerMovePatternList[\"I\"],\r\n                    playerMovePatternList[\"-\"],\r\n                ],\r\n                playerSkills: [\r\n                    playerSkillList[\"enemyBreak1\"],\r\n                    playerSkillList[\"powerUp1\"],\r\n                ],\r\n                forts: [\r\n        \r\n                ],\r\n                enemys: [\r\n                    {\r\n                        enemy: {\r\n                            type: EnemyComponent,\r\n                            enemyType: \"groundMonster\",\r\n                            route: [\"up\", \"right\", \"down\", \"left\"],\r\n                            position: new Point2d(2, 1),\r\n                            speed: 5,\r\n                            gameMasterObjName: \"gameMaster\",\r\n                        },\r\n                        draw: {\r\n                            type: DrawComponent,\r\n                            sortName: \"character\",\r\n                            image: new ImageBase(GlobalData.instance.imageSorceURL + \"crashSlide/character_roundGreen.png\"),\r\n                        },\r\n                        anime: {\r\n                            type: AnimationComponent,\r\n                        },\r\n                        transform: {\r\n                            type: TransformComponent,\r\n                        },\r\n                        aabb: {\r\n                            type: AabbComponent,\r\n                        }\r\n                    },\r\n                    {\r\n                        enemy: {\r\n                            type: EnemyComponent,\r\n                            enemyType: \"skyMonster\",\r\n                            route: [\"up\", \"right\", \"right\", \"down\", \"down\", \"left\", \"left\", \"up\"],\r\n                            position: new Point2d(5, 1),\r\n                            speed: 5,\r\n                            gameMasterObjName: \"gameMaster\",\r\n                        },\r\n                        draw: {\r\n                            type: DrawComponent,\r\n                            sortName: \"character\",\r\n                            image: new ImageBase(GlobalData.instance.imageSorceURL + \"crashSlide/character_roundGreen.png\"),\r\n                        },\r\n                        anime: {\r\n                            type: AnimationComponent,\r\n                        },\r\n                        transform: {\r\n                            type: TransformComponent,\r\n                        },\r\n                        aabb: {\r\n                            type: AabbComponent,\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ),\r\n        new GameRule_Normal(\r\n            {\r\n                name: \"砲台テスト\",\r\n                description: \"砲台のテスト\",\r\n                referencePoint: {\"minimum\": 0, \"height\": 0,},\r\n                tileData: [\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 3, 3, 3, 0, 3, 3, 3, 0, 0],\r\n                    [1, 3, 3, 3, 3, 3, 3, 3, 3, 0],\r\n                    [0, 0, 0, 3, 3, 3, 0, 0, 3, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 3, 0],\r\n                    [2, 2, 2, 2, 2, 2, 2, 2, 3, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 3, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 1, 3, 0],\r\n                    [3, 0, 0, 0, 0, 0, 0, 1, 3, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n                ],\r\n                startPoint: new Point2d(0, 2),\r\n                goalPoint: new Point2d(0, 9),\r\n                tileSize: new Size(120, 120),\r\n                playerMoveMethods: [\r\n                    playerMovePatternList[\"normal\"],\r\n                    playerMovePatternList[\"I\"],\r\n                    playerMovePatternList[\"-\"],\r\n                ],\r\n                playerSkills: [\r\n        \r\n                ],\r\n                forts: [\r\n                    {\r\n                        aabb: {type: AabbComponent,},\r\n                        anime: fortAnime_down,\r\n                        draw: { type: DrawComponent, sortName: \"character\",},\r\n                        text: fortText,\r\n                        fort: {\r\n                            type: FortComponent,\r\n                            count: 3,\r\n                            bead: fortData_down,\r\n                            direction: \"down\",\r\n                            gameMasterObjName: \"gameMaster\",\r\n                            pointNumber: new Point2d(2, 0),\r\n                        },\r\n                        transform: {type: TransformComponent},\r\n                    },\r\n                    {\r\n                        aabb: {type: AabbComponent,},\r\n                        anime: fortAnime_up,\r\n                        draw: { type: DrawComponent, sortName: \"character\",},\r\n                        text: fortText,\r\n                        fort: {\r\n                            type: FortComponent,\r\n                            count: 3,\r\n                            bead: fortData_up,\r\n                            direction: \"up\",\r\n                            gameMasterObjName: \"gameMaster\",\r\n                            pointNumber: new Point2d(4, 4),\r\n                        },\r\n                        transform: {type: TransformComponent},\r\n                    },\r\n                    {\r\n                        aabb: {type: AabbComponent,},\r\n                        anime: fortAnime_up,\r\n                        draw: { type: DrawComponent, sortName: \"character\",},\r\n                        text: fortText,\r\n                        fort: {\r\n                            type: FortComponent,\r\n                            count: 3,\r\n                            bead: fortData_up,\r\n                            direction: \"up\",\r\n                            gameMasterObjName: \"gameMaster\",\r\n                            pointNumber: new Point2d(6, 4),\r\n                        },\r\n                        transform: {type: TransformComponent},\r\n                    },\r\n                    {\r\n                        aabb: {type: AabbComponent,},\r\n                        anime: fortAnime_down,\r\n                        draw: { type: DrawComponent, sortName: \"character\",},\r\n                        text: fortText,\r\n                        fort: {\r\n                            type: FortComponent,\r\n                            count: 3,\r\n                            bead: fortData_down,\r\n                            direction: \"down\",\r\n                            gameMasterObjName: \"gameMaster\",\r\n                            pointNumber: new Point2d(6, 0),\r\n                        },\r\n                        transform: {type: TransformComponent},\r\n                    },\r\n                    {\r\n                        aabb: {type: AabbComponent,},\r\n                        anime: fortAnime_down,\r\n                        draw: { type: DrawComponent, sortName: \"character\",},\r\n                        text: fortText,\r\n                        fort: {\r\n                            type: FortComponent,\r\n                            count: 3,\r\n                            bead: fortData_down,\r\n                            direction: \"down\",\r\n                            gameMasterObjName: \"gameMaster\",\r\n                            pointNumber: new Point2d(6, 6),\r\n                        },\r\n                        transform: {type: TransformComponent},\r\n                    },\r\n                    {\r\n                        aabb: {type: AabbComponent,},\r\n                        anime: fortAnime_down,\r\n                        draw: { type: DrawComponent, sortName: \"character\",},\r\n                        text: fortText,\r\n                        fort: {\r\n                            type: FortComponent,\r\n                            count: 3,\r\n                            bead: fortData_down,\r\n                            direction: \"down\",\r\n                            gameMasterObjName: \"gameMaster\",\r\n                            pointNumber: new Point2d(4, 6),\r\n                        },\r\n                        transform: {type: TransformComponent},\r\n                    },\r\n                    {\r\n                        aabb: {type: AabbComponent,},\r\n                        anime: fortAnime_down,\r\n                        draw: { type: DrawComponent, sortName: \"character\",},\r\n                        text: fortText,\r\n                        fort: {\r\n                            type: FortComponent,\r\n                            count: 3,\r\n                            bead: fortData_down,\r\n                            direction: \"down\",\r\n                            gameMasterObjName: \"gameMaster\",\r\n                            pointNumber: new Point2d(2, 6),\r\n                        },\r\n                        transform: {type: TransformComponent},\r\n                    },\r\n                ],\r\n                enemys: []\r\n            }\r\n        )\r\n        */\r\n        //チュートリアル1(移動)\r\n        new GameRule_tutorial_normal_1.GameRule_Tutorial_Normal({\r\n            name: \"チュートリアル1 : 操作 : 移動\",\r\n            description: \"画面の味方\\n左：ステージの構成\\n下：自分のスコアや高得点ライン\\n\\n移動に関するチュートリアル\",\r\n            referencePoint: { minimum: 100, height: 4 },\r\n            tutorials: [\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"移動\\n\\nPC版はWASDか矢印キー\\n\\nスマホ版は素早く移動したい方向に\\nフリック\",\r\n                    points: [],\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage1.png\"),\r\n                    text: \"ゲームを中断するには\\nPC：ESCキー\\nスマホ左下のボタン\\nから「ステージ選択画面へ戻る」を\\n選択すれば戻れる\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage1.png\"),\r\n                    text: \"またその画面からチュートリアルや\\nステージの説明を見返せる\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage2.png\"),\r\n                    text: \"床移動\\n今乗っている床は移動可能\\n床に乗った状態でアクション\\n(PC:スペース)(スマホ:短くタップ)\\n\",\r\n                    points: [new Point_1.Point2d(2, 2)],\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"向いてる向きだけを変えたい場合は\\nPC：コントロールorシフトを押しながら\\n矢印orWASD\\n\\nスマホ：長くタップして星が現れた\\n状態でフリック\",\r\n                    points: [new Point_1.Point2d(2, 2)],\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage3.png\"),\r\n                    text: \"右の赤いマスがゴール\\n通常のルールではプレイヤーが\\nゴールマスに入ればクリア\\n別のルールでは条件が違う場合もある\",\r\n                    points: [new Point_1.Point2d(4, 2)],\r\n                },\r\n            ],\r\n            tileData: [\r\n                [2, 2, 2, 2, 2, 2, 2],\r\n                [2, 1, 1, 0, 2, 2, 2],\r\n                [2, 1, 1, 0, 3, 3, 2],\r\n                [2, 1, 1, 0, 2, 2, 2],\r\n                [2, 2, 2, 2, 2, 2, 2]\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(1, 2),\r\n            goalPoint: new Point_1.Point2d(5, 2),\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n            ],\r\n            playerSkills: [],\r\n            enemys: [],\r\n            forts: []\r\n        }),\r\n        //チュートリアル2(切り替え)\r\n        new GameRule_tutorial_normal_1.GameRule_Tutorial_Normal({\r\n            name: \"チュートリアル2 : 操作 : 切り替え\",\r\n            description: \"床移動に使うマスの指定を切り替える\",\r\n            tutorials: [\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"移動に使うマスは切り替えれる。\\nPC：Qキー\\nスマホ：左の赤いボタン\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage4.png\"),\r\n                    text: \"移動ではマス内のすべての床が移動する。\\n移動する床はまとめて１つの床として扱う。\\nどれか１つの床が引っかかったら\\n動かす床すべてがそれ以上進まなくなる。\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage5.png\"),\r\n                    text: \"下の床を移動させるには\\n床移動を切り替える必要がある。\",\r\n                    points: [new Point_1.Point2d(11, 3)]\r\n                },\r\n            ],\r\n            referencePoint: { minimum: 100, height: 15 },\r\n            tileData: [\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n                [2, 0, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 2, 0, 2],\r\n                [2, 1, 0, 0, 2, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 2],\r\n                [2, 1, 1, 0, 3, 1, 0, 0, 3, 1, 0, 0, 0, 2, 0, 2],\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2],\r\n                [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 2],\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(1, 3),\r\n            goalPoint: new Point_1.Point2d(14, 5),\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"T\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"tutorial-1\"],\r\n            ],\r\n            playerSkills: [],\r\n            enemys: [],\r\n            forts: []\r\n        }),\r\n        //チュートリアル3(スキル)\r\n        new GameRule_tutorial_normal_1.GameRule_Tutorial_Normal({\r\n            name: \"チュートリアル3 : 操作 : スキル\",\r\n            description: \"スキルの発動・確認など\",\r\n            tutorials: [\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"スキルは発動すると\\n特殊な効果が得られる。\\n移動量が一時的に増加したり\\n離れた場所にワープしたりする。\\nスキルを発動するにはガイドを表示し\\nガイドの枠すべてに床がある状態で\\n床を動かす操作をすると発動する。\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"ガイドの表示。\\nPC：シフトキー長押し\\nスマホ：長押し(星マークが出るまで)\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"スキルはステージによって異なり\\n複数個持つこともある。\\n現在選択中のスキルの内容は\\n右上の「選択中のスキル」の下に表示されている。\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage6.png\"),\r\n                    text: \"ここでスキルを発動すると\\n移動量が増加する。\\n自身のステータスを強化する系は\\n左上の「自身に働いている効果」の下に\\n強化の内容一覧が表示される。\\nかっこ内の数字は行動するごとに減り\\n0になると効果が消える。\",\r\n                    points: [new Point_1.Point2d(2, 2)]\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"スキルを切り替えるには。\\nPC：Eキー\\nスマホ右の青いボタン\\nで変更できる。\\n選択中のスキルの内容は\\n右上の「スキルの内容」から確認できる。\",\r\n                    points: [new Point_1.Point2d(9, 2)]\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"操作を戻したいときは\\nPC：1キーnスマホ：右下の「BACK」ボタン\\nで1手分巻き戻すことができる。\",\r\n                    points: [new Point_1.Point2d(9, 2)]\r\n                },\r\n            ],\r\n            referencePoint: { minimum: 100, height: 9 },\r\n            tileData: [\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n                [2, 0, 1, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 2],\r\n                [2, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 1, 3, 2],\r\n                [2, 0, 1, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 2],\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(1, 2),\r\n            goalPoint: new Point_1.Point2d(12, 2),\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n            ],\r\n            playerSkills: [\r\n                PlayerSkillList_1.playerSkillList[\"powerUp1\"],\r\n                PlayerSkillList_1.playerSkillList[\"warp1\"]\r\n            ],\r\n            enemys: [],\r\n            forts: []\r\n        }),\r\n        //チュートリアル4(敵)\r\n        new GameRule_tutorial_normal_1.GameRule_Tutorial_Normal({\r\n            name: \"チュートリアル4 : ギミック : 敵\",\r\n            description: \"敵に関するチュートリアル\\n\\n\\n\\n(V)o￥o(V)\",\r\n            tutorials: [\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"敵とぶつかるとゲームオーバーになる\\n敵がいる場所には移動ができない\\n敵の移動先は青い矢印で表される\\n自分が移動・スキルなどの\\n行動をするのと同時に敵も行動する\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage7.png\"),\r\n                    text: \"翼のある敵は空を飛んでいて\\n移動先に床がなくても移動できる\\n壁がある場所は例外\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage8.png\"),\r\n                    text: \"翼がない敵は地面を歩く\\nそいつがいる床はロック状態になり\\n移動やスキル発動に使うことができない\\nまたそいつは移動先に床がないと移動できない\",\r\n                    points: [new Point_1.Point2d(1, 3), new Point_1.Point2d(2, 3), new Point_1.Point2d(3, 3)]\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage9.png\"),\r\n                    text: \"敵を消滅させるスキルもある。\\n下のマスをそろえて\\n敵の方向を向いて発動すると\\n特定の範囲内の敵が消滅する\\n特定の範囲はエフェクトで確認できる\",\r\n                    points: [new Point_1.Point2d(7, 3), new Point_1.Point2d(8, 2), new Point_1.Point2d(9, 1)]\r\n                },\r\n            ],\r\n            referencePoint: { minimum: 100, height: 34 },\r\n            tileData: [\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n                [2, 1, 0, 0, 2, 3, 3, 3, 3, 3, 3, 2],\r\n                [2, 0, 0, 0, 2, 3, 3, 3, 3, 3, 0, 2],\r\n                [2, 0, 0, 0, 2, 3, 2, 3, 1, 3, 2, 2],\r\n                [2, 1, 1, 1, 2, 3, 2, 1, 0, 1, 2, 2],\r\n                [2, 0, 1, 1, 2, 3, 2, 0, 1, 0, 2, 2],\r\n                [2, 1, 1, 0, 2, 3, 2, 2, 3, 2, 2, 2],\r\n                [2, 0, 0, 0, 3, 3, 2, 3, 3, 3, 3, 2],\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(1, 1),\r\n            goalPoint: new Point_1.Point2d(10, 7),\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n            ],\r\n            playerSkills: [\r\n                PlayerSkillList_1.playerSkillList[\"enemyBreak1\"],\r\n            ],\r\n            enemys: [\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: \"skyMonster\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        position: new Point_1.Point2d(1, 2),\r\n                        speed: 3,\r\n                        route: [\"up\", \"right\", \"right\", \"down\", \"down\", \"left\", \"left\", \"up\"],\r\n                    },\r\n                    anime: skyMonsterAnimation,\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: \"groundMonster\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        position: new Point_1.Point2d(3, 4),\r\n                        speed: 3,\r\n                        route: [\"down\", \"left\", \"up\", \"right\"],\r\n                    },\r\n                    anime: groundMonsterAnimation,\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: \"groundMonster\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        position: new Point_1.Point2d(8, 6),\r\n                        speed: 3,\r\n                        route: [],\r\n                    },\r\n                    anime: groundMonsterAnimation,\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                },\r\n            ],\r\n            forts: []\r\n        }),\r\n        //チュートリアル5(砲台)\r\n        new GameRule_tutorial_normal_1.GameRule_Tutorial_Normal({\r\n            name: \"チュートリアル5 : ギミック : 砲台\",\r\n            description: \"砲台に関するチュートリアル\",\r\n            tutorials: [\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage10.png\"),\r\n                    text: \"砲台は時間で敵を打ってくるオブジェ。\\n砲台の左上にカウントがあり\\nプレイヤーの行動とともに減少する。\\n0になると敵が発射される。\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/tutorialImage11.png\"),\r\n                    text: \"砲台はわかりずらいが\\nマス的には画像のようになっている。\\n砲台が敵を出現させる方向は上の矢印で確認できる。\",\r\n                    points: []\r\n                },\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"何もしないスキルを使うと\\n敵を移動させることができる\\n敵で身動きが取れないときなどに使える。\",\r\n                    points: [new Point_1.Point2d(2, 5)]\r\n                },\r\n            ],\r\n            referencePoint: { minimum: 100, height: 24 },\r\n            tileData: [\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n                [2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\r\n                [2, 0, 2, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2],\r\n                [2, 0, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0, 2],\r\n                [2, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2],\r\n                [2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 2],\r\n                [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(1, 1),\r\n            goalPoint: new Point_1.Point2d(10, 5),\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n            ],\r\n            playerSkills: [\r\n                PlayerSkillList_1.playerSkillList[\"wait\"]\r\n            ],\r\n            enemys: [],\r\n            forts: [\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_down,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 3,\r\n                        bead: fortData_down,\r\n                        direction: \"down\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(3, 1),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_down,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 3,\r\n                        bead: fortData_down,\r\n                        direction: \"down\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(5, 1),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_down,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 3,\r\n                        bead: fortData_down,\r\n                        direction: \"down\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(7, 1),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_right,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 6,\r\n                        bead: fortData_right,\r\n                        direction: \"right\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(9, 4),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_left,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 5,\r\n                        bead: fortData_left,\r\n                        direction: \"left\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(11, 3),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n            ]\r\n        }),\r\n        //チュートリアル6(並べる)\r\n        new GameRule_tutorial_lineup_1.GameRule_Tutorial_Lineup({\r\n            name: \"チュートリアル6 : ルール : 並べる\",\r\n            description: \"クリア条件に関するチュートリアル\\n今までのクリア条件とは異なる\",\r\n            referencePoint: { minimum: 100, height: 9 },\r\n            tutorials: [\r\n                {\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                    text: \"整列ルールでは\\nプレイヤーをゴールに運ぶのではなく\\n全てのゴールマスに床を合わせることでクリアになる。\\n移動範囲を切り替えて効率のいい床運びが\\nポイントになる。\",\r\n                    points: []\r\n                },\r\n            ],\r\n            tileData: [\r\n                [0, 0, 1, 0, 0],\r\n                [1, 1, 1, 0, 0],\r\n                [0, 1, 1, 1, 1],\r\n                [0, 0, 1, 0, 0],\r\n                [0, 0, 0, 0, 0],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(0, 1),\r\n            goalPoints: [\r\n                [0, 0, 1, 0, 0],\r\n                [0, 1, 1, 1, 0],\r\n                [0, 0, 1, 0, 0],\r\n                [0, 1, 1, 1, 0],\r\n                [0, 0, 1, 0, 0],\r\n            ],\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"-\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"T\"],\r\n            ],\r\n            playerSkills: [],\r\n            enemys: [],\r\n            forts: []\r\n        }),\r\n        //アトムの童(ア)\r\n        new GameRule_LineUp_1.GameRule_LineUp({\r\n            name: \"整列：アトムの童 [ ア ]\",\r\n            description: \"ア\\n\\nパワーアップした効果を削除できるスキル\\nもある\",\r\n            referencePoint: { minimum: 220, height: 0 },\r\n            tileData: [\r\n                [1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n                [1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\r\n                [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 0, 0, 1, 1],\r\n                [0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 1, 1, 1, 0, 0, 0, 0, 1, 1],\r\n                [1, 1, 1, 0, 0, 0, 0, 0, 1, 1],\r\n                [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(0, 0),\r\n            goalPoints: [\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n                [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],\r\n                [0, 0, 0, 0, 1, 1, 0, 1, 1, 0],\r\n                [0, 0, 0, 0, 1, 1, 0, 1, 1, 0],\r\n                [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n                [0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n                [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ],\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"box\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"-\"],\r\n            ],\r\n            playerSkills: [\r\n                PlayerSkillList_1.playerSkillList[\"clean\"],\r\n                PlayerSkillList_1.playerSkillList[\"powerUp1\"],\r\n                PlayerSkillList_1.playerSkillList[\"warp1\"],\r\n            ],\r\n            enemys: [],\r\n            forts: []\r\n        }),\r\n        //アトムの童(ト)\r\n        new GameRule_LineUp_1.GameRule_LineUp({\r\n            name: \"整列：アトムの童 [ ト ]\",\r\n            description: \"ト\\n\\n・砲台の攻撃\",\r\n            referencePoint: { minimum: 100, height: 70 },\r\n            tileData: [\r\n                [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\r\n                [0, 0, 1, 0, 1, 1, 1, 1, 0, 0],\r\n                [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n                [0, 0, 1, 0, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n                [0, 0, 1, 0, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n                [0, 0, 1, 0, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(7, 0),\r\n            goalPoints: [\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 1, 1, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 1, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ],\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"-\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"box\"],\r\n            ],\r\n            playerSkills: [\r\n                PlayerSkillList_1.playerSkillList[\"wait\"],\r\n            ],\r\n            enemys: [],\r\n            forts: [\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_down,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 5,\r\n                        bead: fortData_down,\r\n                        direction: \"down\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(3, 0),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_down,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 5,\r\n                        bead: fortData_down,\r\n                        direction: \"down\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(4, 0),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n            ]\r\n        }),\r\n        //アトムの童(ム)\r\n        new GameRule_LineUp_1.GameRule_LineUp({\r\n            name: \"整列：アトムの童 [ ム ]\",\r\n            description: \"ム\\n\\n敵\\n砲台\",\r\n            referencePoint: { minimum: 150, height: 125 },\r\n            tileData: [\r\n                [0, 0, 1, 1, 1, 1, 0, 0, 0, 0],\r\n                [0, 0, 1, 1, 1, 1, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\r\n                [0, 0, 1, 1, 0, 0, 0, 0, 1, 1],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n                [0, 1, 1, 1, 1, 1, 1, 0, 0, 0],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(5, 9),\r\n            goalPoints: [\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\r\n                [0, 0, 1, 1, 0, 0, 1, 1, 0, 0],\r\n                [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],\r\n                [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ],\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"-\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"box\"],\r\n            ],\r\n            playerSkills: [\r\n                PlayerSkillList_1.playerSkillList[\"wait\"],\r\n                PlayerSkillList_1.playerSkillList[\"enemyBreak1\"],\r\n            ],\r\n            enemys: [\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: \"skyMonster\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        position: new Point_1.Point2d(7, 7),\r\n                        speed: 3,\r\n                        route: [\"left\", \"up\", \"right\", \"down\"],\r\n                    },\r\n                    anime: skyMonsterAnimation,\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: \"skyMonster\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        position: new Point_1.Point2d(8, 8),\r\n                        speed: 3,\r\n                        route: [\"right\", \"down\", \"left\", \"up\"],\r\n                    },\r\n                    anime: skyMonsterAnimation,\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: \"skyMonster\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        position: new Point_1.Point2d(2, 1),\r\n                        speed: 5,\r\n                        route: [\"left\", \"left\", \"left\", \"right\", \"right\", \"right\"],\r\n                    },\r\n                    anime: skyMonsterAnimation,\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                },\r\n            ],\r\n            forts: [\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_right,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 5,\r\n                        bead: fortData_right,\r\n                        direction: \"right\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(1, 5),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_left,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 5,\r\n                        bead: fortData_left,\r\n                        direction: \"left\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(4, 5),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n            ],\r\n        }),\r\n        //アトムの童(の)\r\n        new GameRule_LineUp_1.GameRule_LineUp({\r\n            name: \"整列：アトムの童 [ の ]\",\r\n            description: \"の\\n\\n砲台\\n敵\",\r\n            referencePoint: { minimum: 150, height: 120 },\r\n            tileData: [\r\n                [0, 0, 1, 0, 1, 1, 0, 1, 0, 0],\r\n                [0, 1, 0, 0, 0, 1, 1, 0, 1, 0],\r\n                [1, 0, 0, 0, 0, 0, 1, 1, 0, 1],\r\n                [0, 0, 1, 1, 0, 0, 0, 1, 1, 0],\r\n                [0, 1, 1, 0, 0, 1, 0, 0, 0, 0],\r\n                [0, 1, 0, 1, 1, 1, 0, 0, 1, 0],\r\n                [0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],\r\n                [1, 1, 0, 0, 0, 1, 0, 0, 1, 0],\r\n                [0, 1, 0, 0, 0, 1, 0, 1, 0, 0],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(5, 5),\r\n            goalPoints: [\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n                [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n                [0, 1, 1, 1, 0, 1, 1, 1, 1, 0],\r\n                [0, 1, 1, 0, 0, 1, 0, 1, 1, 0],\r\n                [0, 1, 0, 0, 0, 1, 0, 0, 1, 0],\r\n                [0, 1, 0, 0, 0, 1, 0, 0, 1, 0],\r\n                [0, 1, 1, 0, 1, 0, 0, 1, 0, 0],\r\n                [0, 0, 1, 1, 0, 0, 1, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ],\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"box\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"-\"],\r\n            ],\r\n            playerSkills: [\r\n                PlayerSkillList_1.playerSkillList[\"wait\"],\r\n                PlayerSkillList_1.playerSkillList[\"enemyBreak1\"],\r\n                PlayerSkillList_1.playerSkillList[\"warp1\"],\r\n            ],\r\n            enemys: [\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: \"groundMonster\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        position: new Point_1.Point2d(3, 3),\r\n                        speed: 3,\r\n                        route: [\"left\", \"down\", \"left\", \"down\", \"down\", \"up\", \"up\", \"right\", \"up\", \"right\"],\r\n                    },\r\n                    anime: groundMonsterAnimation,\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    enemy: {\r\n                        type: Enemy_1.EnemyComponent,\r\n                        enemyType: \"skyMonster\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        position: new Point_1.Point2d(8, 8),\r\n                        speed: 3,\r\n                        route: [\r\n                            \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\",\r\n                            \"up\", \"up\", \"up\", \"up\", \"up\", \"up\", \"up\",\r\n                            \"right\", \"right\", \"right\", \"right\", \"right\", \"right\", \"right\",\r\n                            \"down\", \"down\", \"down\", \"down\", \"down\", \"down\", \"down\",\r\n                        ],\r\n                    },\r\n                    anime: skyMonsterAnimation,\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                },\r\n            ],\r\n            forts: [\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_right,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 3,\r\n                        bead: fortData_right,\r\n                        direction: \"right\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(0, 0),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_down,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 3,\r\n                        bead: fortData_down,\r\n                        direction: \"down\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(9, 0),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_left,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 3,\r\n                        bead: fortData_left,\r\n                        direction: \"left\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(9, 9),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n                {\r\n                    aabb: { type: Aabb_1.AabbComponent },\r\n                    transform: { type: Transform_1.TransformComponent },\r\n                    anime: fortAnime_up,\r\n                    draw: { type: Draw_1.DrawComponent, sortName: \"character\" },\r\n                    fort: {\r\n                        type: Fort_1.FortComponent,\r\n                        count: 3,\r\n                        bead: fortData_up,\r\n                        direction: \"up\",\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        pointNumber: new Point_1.Point2d(0, 9),\r\n                    },\r\n                    text: fortText,\r\n                },\r\n            ]\r\n        }),\r\n        //アトムの童(童)\r\n        new GameRule_LineUp_1.GameRule_LineUp({\r\n            name: \"整列：アトムの童 [ 童 ]\",\r\n            description: \"童\\n\\n多い 長い つらい\",\r\n            referencePoint: { minimum: 325, height: 0 },\r\n            tileData: [\r\n                [2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2],\r\n                [2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n                [2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2],\r\n                [2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n                [2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2],\r\n                [2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2],\r\n                [2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2],\r\n                [2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 1, 2, 2, 2],\r\n                [2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2],\r\n                [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\r\n                [2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2],\r\n                [2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n                [2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2],\r\n                [2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n                [2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n            ],\r\n            tileSize: new Size_1.Size(64, 64),\r\n            startPoint: new Point_1.Point2d(7, 7),\r\n            goalPoints: [\r\n                [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\r\n                [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\r\n                [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            ],\r\n            playerMoveMethods: [\r\n                PlayerMovePatternList_1.playerMovePatternList[\"normal\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"I\"],\r\n                PlayerMovePatternList_1.playerMovePatternList[\"box\"],\r\n            ],\r\n            playerSkills: [\r\n                PlayerSkillList_1.playerSkillList[\"powerUp1\"],\r\n                PlayerSkillList_1.playerSkillList[\"clean\"],\r\n                PlayerSkillList_1.playerSkillList[\"warp1\"],\r\n            ],\r\n            enemys: [],\r\n            forts: []\r\n        }),\r\n    ];\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n/*書き方\r\n//ルール＿ノーマル\r\nnew GameRule_Normal(\r\n    {\r\n        name: \"\",\r\n        description: \"\",\r\n        referencePoint: {minimum: 0, height: 0},\r\n        tileData: [\r\n\r\n        ],\r\n        tileSize: new Size(64, 64),\r\n        startPoint: new Point2d(0, 0),\r\n        goalPoint: new Point2d(0, 0),\r\n        playerMoveMethods: [],\r\n        playerSkills: [],\r\n        enemys: [],\r\n        forts: []\r\n    }\r\n),\r\n//ルール＿整列\r\nnew GameRule_LineUp({\r\n    name: \"\",\r\n    description: \"\",\r\n    referencePoint: {minimum: 0, height: 0},\r\n    tileData: [],\r\n    tileSize: new Size(64, 64),\r\n    startPoint: new Point2d(0, 0),\r\n    goalPoints: [],\r\n    playerMoveMethods: [],\r\n    playerSkills: [],\r\n    enemys: [],\r\n    forts: []\r\n}),\r\n//敵データ\r\n{\r\n    aabb: {type: AabbComponent},\r\n    transform: {type: TransformComponent},\r\n    enemy: {\r\n        type: EnemyComponent,\r\n        enemyType: \"\",\r\n        gameMasterObjName: \"gameMaster\",\r\n        position: new Point2d(),\r\n        speed: ,\r\n        route: [],\r\n    },\r\n    anime: {\r\n        type: AnimationComponent,\r\n        animes: {\r\n            \"destruction\": [],\r\n            \"work\": [],\r\n            \"stand\": [],\r\n        },\r\n        loopTime_second: ,\r\n        loop: true,\r\n        anime: []\r\n    },\r\n    draw: {\r\n        type: DrawComponent,\r\n        sortName: \"character\",\r\n    },\r\n},\r\n//砲台データ\r\n{\r\n    aabb: {type: AabbComponent},\r\n    transform: {type: TransformComponent},\r\n    anime: fortAnime_,\r\n    draw: {type: DrawComponent, sortName: \"character\"},\r\n    fort: {\r\n        type: FortComponent,\r\n        count: ,\r\n        bead: fortData_,\r\n        direction: \"\",\r\n        gameMasterObjName: \"gameMaster\",\r\n        pointNumber: new Point2d(),\r\n    },\r\n    text: fortText,\r\n},\r\n\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n*/\r\n//# sourceMappingURL=GameRuleList.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/GameRuleList.js?");

/***/ }),

/***/ "./JavaScript/Other/GameRule_LineUp.js":
/*!*********************************************!*\
  !*** ./JavaScript/Other/GameRule_LineUp.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ./GameRule */ \"./JavaScript/Other/GameRule.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Camera_1, ImageBase_1, Point_1, GlobalData_1, GameRule_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameRule_LineUp = void 0;\r\n    class GameRule_LineUp extends GameRule_1.GameRule {\r\n        constructor({ name, description, referencePoint, tileData, startPoint, goalPoints, tileSize, playerMoveMethods, playerSkills, forts, enemys }) {\r\n            super();\r\n            this.name = name;\r\n            this.description = description;\r\n            this.tileData = tileData;\r\n            this.startPoint = startPoint;\r\n            this.tileSize = tileSize;\r\n            this.goalPoints = goalPoints;\r\n            this.enemys = enemys;\r\n            this.forts = forts;\r\n            this.referencePoint = referencePoint;\r\n            this.goalImageBase = new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/goalPoint.png\");\r\n            this.goalImageBase.width = this.tileSize.width;\r\n            this.goalImageBase.height = this.tileSize.height;\r\n            this.playerMoveMethods = playerMoveMethods;\r\n            this.playerSkills = playerSkills;\r\n        }\r\n        Start(gameMaster) {\r\n        }\r\n        Update(gameMaster) {\r\n            var _a;\r\n            for (let y = 0; y < this.goalPoints.length; y++) {\r\n                for (let x = 0; x < this.goalPoints[y].length; x++) {\r\n                    if (this.goalPoints[y][x] != 0) {\r\n                        (_a = Camera_1.CameraComponent.mainCamera) === null || _a === void 0 ? void 0 : _a.AddPictureData({\r\n                            \"image\": this.goalImageBase.drawImage,\r\n                            \"sortName\": \"guid-bottom\",\r\n                            \"drawPoint\": new Point_1.Point2d(this.tileSize.width * x, this.tileSize.height * y),\r\n                            \"drawComponent\": null,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        CheckGameClear(gameMaster) {\r\n            var _a, _b;\r\n            const floors = gameMaster.floorList;\r\n            for (let i = 0; i < floors.length; i++) {\r\n                if (floors[i].status == \"stop\") {\r\n                    let flag2 = false;\r\n                    for (let y = 0; y < this.goalPoints.length; y++) {\r\n                        for (let x = 0; x < this.goalPoints[y].length; x++) {\r\n                            if (this.goalPoints[y][x] != 0 && ((_a = floors[i].pointNumber) === null || _a === void 0 ? void 0 : _a.x) == x && ((_b = floors[i].pointNumber) === null || _b === void 0 ? void 0 : _b.y) == y) {\r\n                                flag2 = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (flag2 == false) {\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    exports.GameRule_LineUp = GameRule_LineUp;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameRule_LineUp.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/GameRule_LineUp.js?");

/***/ }),

/***/ "./JavaScript/Other/GameRule_normal.js":
/*!*********************************************!*\
  !*** ./JavaScript/Other/GameRule_normal.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ./GameRule */ \"./JavaScript/Other/GameRule.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Camera_1, ImageBase_1, Point_1, GlobalData_1, GameRule_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameRule_Normal = void 0;\r\n    class GameRule_Normal extends GameRule_1.GameRule {\r\n        constructor({ name, description, referencePoint, tileData, startPoint, goalPoint, tileSize, playerMoveMethods, playerSkills, forts, enemys }) {\r\n            super();\r\n            this.name = name;\r\n            this.description = description;\r\n            this.tileData = tileData;\r\n            this.startPoint = startPoint;\r\n            this.tileSize = tileSize;\r\n            this.goalPoint = goalPoint;\r\n            this.referencePoint = referencePoint;\r\n            this.goalImageBase = new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/goalPoint.png\");\r\n            this.goalImageBase.width = this.tileSize.width;\r\n            this.goalImageBase.height = this.tileSize.height;\r\n            this.playerMoveMethods = playerMoveMethods;\r\n            this.playerSkills = playerSkills;\r\n            this.forts = forts;\r\n            this.enemys = enemys;\r\n        }\r\n        Start(gameMaster) {\r\n        }\r\n        Update(gameMaster) {\r\n            var _a;\r\n            (_a = Camera_1.CameraComponent.mainCamera) === null || _a === void 0 ? void 0 : _a.AddPictureData({\r\n                \"image\": this.goalImageBase.drawImage,\r\n                \"sortName\": \"guid-bottom\",\r\n                \"drawPoint\": new Point_1.Point2d(this.tileSize.width * this.goalPoint.x, this.tileSize.height * this.goalPoint.y),\r\n                \"drawComponent\": null,\r\n            });\r\n        }\r\n        CheckGameClear(gameMaster) {\r\n            var _a;\r\n            for (let i = 0; i < gameMaster.floorList.length; i++) {\r\n                if (gameMaster.floorList[i].status == \"move\") {\r\n                    return false;\r\n                }\r\n            }\r\n            if (((_a = gameMaster.playerController) === null || _a === void 0 ? void 0 : _a.onFloorNumber) != null &&\r\n                gameMaster.playerController.onFloorNumber.x == this.goalPoint.x &&\r\n                gameMaster.playerController.onFloorNumber.y == this.goalPoint.y) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    exports.GameRule_Normal = GameRule_Normal;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameRule_normal.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/GameRule_normal.js?");

/***/ }),

/***/ "./JavaScript/Other/GameRule_tutorial_lineup.js":
/*!******************************************************!*\
  !*** ./JavaScript/Other/GameRule_tutorial_lineup.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ./GameRule_LineUp */ \"./JavaScript/Other/GameRule_LineUp.js\"), __webpack_require__(/*! ../Object/Tutorial */ \"./JavaScript/Object/Tutorial.js\"), __webpack_require__(/*! ../Component/TutorialSet */ \"./JavaScript/Component/TutorialSet.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, Point_1, Size_1, GlobalData_1, GameRule_LineUp_1, Tutorial_1, TutorialSet_1, Transform_1, Draw_1, ArrayController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameRule_Tutorial_Lineup = void 0;\r\n    class GameRule_Tutorial_Lineup extends GameRule_LineUp_1.GameRule_LineUp {\r\n        constructor({ name, description, referencePoint, tutorials, tileData, startPoint, goalPoints, tileSize, playerMoveMethods, playerSkills, forts, enemys }) {\r\n            super({ name, description, referencePoint, tileData, startPoint, goalPoints, tileSize, playerMoveMethods, playerSkills, forts, enemys });\r\n            this.tutorialDatas = [];\r\n            this.absoluteTutorialData = [];\r\n            for (let i = 0; i < tutorials.length; i++) {\r\n                this.absoluteTutorialData.push({\r\n                    image: tutorials[i].image.copy,\r\n                    text: tutorials[i].text,\r\n                    points: Array.from(tutorials[i].points),\r\n                });\r\n            }\r\n            this.tutorialFirst = [];\r\n            for (let i = 0; i < this.absoluteTutorialData.length; i++) {\r\n                if (this.absoluteTutorialData[i].points.length == 0) {\r\n                    this.tutorialFirst.push(this.absoluteTutorialData[i]);\r\n                }\r\n            }\r\n        }\r\n        Start(gameMaster) {\r\n            var _a, _b;\r\n            for (let i = 0; i < this.tutorialFirst.length; i++) {\r\n                this.tutorialDatas = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.absoluteTutorialData, this.tutorialFirst[i]);\r\n            }\r\n            this.tutorialDisplay = new Tutorial_1.TutorialObject(\"tutorial\", {\r\n                draw: {\r\n                    type: Draw_1.DrawComponent,\r\n                    sortName: \"frontUI\",\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                },\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    size: new Size_1.Size(500, 500),\r\n                    anchor: new Point_1.Point2d(0.5, 0.5),\r\n                    position: new Point_1.Point2d(400, 250),\r\n                    absolute: true,\r\n                },\r\n                tutorialSet: {\r\n                    type: TutorialSet_1.TutorialSetComponent,\r\n                    tutorials: this.tutorialFirst,\r\n                }\r\n            });\r\n            this.tutorialManager = this.tutorialDisplay.GetComponent(TutorialSet_1.TutorialSetComponent);\r\n            (_b = (_a = gameMaster.parentObject) === null || _a === void 0 ? void 0 : _a.parentScene) === null || _b === void 0 ? void 0 : _b.AddObject(this.tutorialDisplay);\r\n        }\r\n        Update(gameMaster) {\r\n            var _a;\r\n            super.Update(gameMaster);\r\n            if (this.tutorialDisplay.active == true) {\r\n                gameMaster.playerController.active = false;\r\n            }\r\n            else {\r\n                gameMaster.playerController.active = true;\r\n                let addTutorialData = [];\r\n                for (let i = 0; i < this.tutorialDatas.length; i++) {\r\n                    for (let n = 0; n < this.tutorialDatas[i].points.length; n++) {\r\n                        if (((_a = gameMaster.playerController) === null || _a === void 0 ? void 0 : _a.point.x) == this.tutorialDatas[i].points[n].x && gameMaster.playerController.point.y == this.tutorialDatas[i].points[n].y) {\r\n                            addTutorialData.push(this.tutorialDatas[i]);\r\n                            break;\r\n                            ;\r\n                        }\r\n                    }\r\n                }\r\n                for (let i = 0; i < addTutorialData.length; i++) {\r\n                    this.tutorialDatas = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.tutorialDatas, addTutorialData[i]);\r\n                }\r\n                this.tutorialManager.AddTutorialPage(addTutorialData);\r\n            }\r\n        }\r\n    }\r\n    exports.GameRule_Tutorial_Lineup = GameRule_Tutorial_Lineup;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameRule_tutorial_lineup.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/GameRule_tutorial_lineup.js?");

/***/ }),

/***/ "./JavaScript/Other/GameRule_tutorial_normal.js":
/*!******************************************************!*\
  !*** ./JavaScript/Other/GameRule_tutorial_normal.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ./GameRule_normal */ \"./JavaScript/Other/GameRule_normal.js\"), __webpack_require__(/*! ../Component/TutorialSet */ \"./JavaScript/Component/TutorialSet.js\"), __webpack_require__(/*! ../Object/Tutorial */ \"./JavaScript/Object/Tutorial.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\"), __webpack_require__(/*! ../Component/Floor */ \"./JavaScript/Component/Floor.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, Point_1, Size_1, GlobalData_1, GameRule_normal_1, TutorialSet_1, Tutorial_1, Draw_1, Transform_1, ArrayController_1, Floor_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameRule_Tutorial_Normal = void 0;\r\n    class GameRule_Tutorial_Normal extends GameRule_normal_1.GameRule_Normal {\r\n        constructor({ name, description, tutorials, referencePoint, tileData, startPoint, goalPoint, tileSize, playerMoveMethods, playerSkills, forts, enemys }) {\r\n            super({ name, description, referencePoint, tileData, startPoint, goalPoint, tileSize, playerMoveMethods, playerSkills, forts, enemys });\r\n            this.tutorialDatas = [];\r\n            this.absoluteTutorialData = [];\r\n            for (let i = 0; i < tutorials.length; i++) {\r\n                this.absoluteTutorialData.push({\r\n                    image: tutorials[i].image.copy,\r\n                    text: tutorials[i].text,\r\n                    points: Array.from(tutorials[i].points),\r\n                });\r\n            }\r\n            this.tutorialFirst = [];\r\n            for (let i = 0; i < this.absoluteTutorialData.length; i++) {\r\n                if (this.absoluteTutorialData[i].points.length == 0) {\r\n                    this.tutorialFirst.push(this.absoluteTutorialData[i]);\r\n                }\r\n            }\r\n        }\r\n        Start(gameMaster) {\r\n            var _a, _b;\r\n            for (let i = 0; i < this.tutorialFirst.length; i++) {\r\n                this.tutorialDatas = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.absoluteTutorialData, this.tutorialFirst[i]);\r\n            }\r\n            this.tutorialDisplay = new Tutorial_1.TutorialObject(\"tutorial\", {\r\n                draw: {\r\n                    type: Draw_1.DrawComponent,\r\n                    sortName: \"frontUI\",\r\n                    image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                },\r\n                transform: {\r\n                    type: Transform_1.TransformComponent,\r\n                    size: new Size_1.Size(500, 500),\r\n                    anchor: new Point_1.Point2d(0.5, 0.5),\r\n                    position: new Point_1.Point2d(400, 250),\r\n                    absolute: true,\r\n                },\r\n                tutorialSet: {\r\n                    type: TutorialSet_1.TutorialSetComponent,\r\n                    tutorials: this.tutorialFirst,\r\n                }\r\n            });\r\n            this.tutorialManager = this.tutorialDisplay.GetComponent(TutorialSet_1.TutorialSetComponent);\r\n            (_b = (_a = gameMaster.parentObject) === null || _a === void 0 ? void 0 : _a.parentScene) === null || _b === void 0 ? void 0 : _b.AddObject(this.tutorialDisplay);\r\n        }\r\n        Update(gameMaster) {\r\n            var _a, _b;\r\n            super.Update(gameMaster);\r\n            if (this.tutorialDisplay.active == true) {\r\n                gameMaster.playerController.active = false;\r\n            }\r\n            else {\r\n                gameMaster.playerController.active = true;\r\n                if (gameMaster.playerController.moveStatus == null &&\r\n                    (((_a = gameMaster.playerController) === null || _a === void 0 ? void 0 : _a.onFloor) == null ||\r\n                        gameMaster.playerController.onFloor.GetComponent(Floor_1.FloorComponent).moveStatus == null)) {\r\n                    let addTutorialData = [];\r\n                    for (let i = 0; i < this.tutorialDatas.length; i++) {\r\n                        for (let n = 0; n < this.tutorialDatas[i].points.length; n++) {\r\n                            if (((_b = gameMaster.playerController) === null || _b === void 0 ? void 0 : _b.point.x) == this.tutorialDatas[i].points[n].x && gameMaster.playerController.point.y == this.tutorialDatas[i].points[n].y) {\r\n                                addTutorialData.push(this.tutorialDatas[i]);\r\n                                break;\r\n                                ;\r\n                            }\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < addTutorialData.length; i++) {\r\n                        this.tutorialDatas = (0, ArrayController_1.ArrayCtl_RemoveElement)(this.tutorialDatas, addTutorialData[i]);\r\n                    }\r\n                    this.tutorialManager.AddTutorialPage(addTutorialData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    exports.GameRule_Tutorial_Normal = GameRule_Tutorial_Normal;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameRule_tutorial_normal.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/GameRule_tutorial_normal.js?");

/***/ }),

/***/ "./JavaScript/Other/PlayerMovePattern.js":
/*!***********************************************!*\
  !*** ./JavaScript/Other/PlayerMovePattern.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ArrayController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.PlayerMovePattern = void 0;\r\n    //右向き前提\r\n    class PlayerMovePattern {\r\n        constructor(formation) {\r\n            let width = 0;\r\n            let height = 0;\r\n            height = formation.length;\r\n            for (let i = 0; i < formation.length; i++) {\r\n                if (width < formation[i].length) {\r\n                    width = formation[i].length;\r\n                }\r\n            }\r\n            this.formation = [];\r\n            for (let y = 0; y < height; y++) {\r\n                this.formation[y] = [];\r\n                for (let x = 0; x < width; x++) {\r\n                    if (formation[y][x]) {\r\n                        this.formation[y][x] = formation[y][x];\r\n                    }\r\n                    else {\r\n                        this.formation[y][x] = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        getFormation(direction) {\r\n            let rotate;\r\n            switch (direction) {\r\n                case \"down\":\r\n                    rotate = 3;\r\n                    break;\r\n                case \"up\":\r\n                    rotate = 1;\r\n                    break;\r\n                case \"right\":\r\n                    rotate = 0;\r\n                    break;\r\n                case \"left\":\r\n                    rotate = 2;\r\n                    break;\r\n            }\r\n            let array = this.formation;\r\n            for (let i = 0; i < rotate; i++) {\r\n                array = (0, ArrayController_1.ArrayRotate_2d_left)(array);\r\n            }\r\n            return array;\r\n        }\r\n    }\r\n    exports.PlayerMovePattern = PlayerMovePattern;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=PlayerMovePattern.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/PlayerMovePattern.js?");

/***/ }),

/***/ "./JavaScript/Other/PlayerMovePatternList.js":
/*!***************************************************!*\
  !*** ./JavaScript/Other/PlayerMovePatternList.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./PlayerMovePattern */ \"./JavaScript/Other/PlayerMovePattern.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, PlayerMovePattern_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.playerMovePatternList = void 0;\r\n    //リストの真ん中がプレイヤー現在位置\r\n    //右向き\r\n    //縦横の要素数は奇数でなくてはいけない\r\n    exports.playerMovePatternList = {\r\n        \"normal\": new PlayerMovePattern_1.PlayerMovePattern([\r\n            [1],\r\n        ]),\r\n        \"T\": new PlayerMovePattern_1.PlayerMovePattern([\r\n            [0, 1, 0],\r\n            [0, 1, 1],\r\n            [0, 1, 0],\r\n        ]),\r\n        \"box\": new PlayerMovePattern_1.PlayerMovePattern([\r\n            [1, 1, 1],\r\n            [1, 1, 1],\r\n            [1, 1, 1],\r\n        ]),\r\n        \"I\": new PlayerMovePattern_1.PlayerMovePattern([\r\n            [0, 1, 0],\r\n            [0, 1, 0],\r\n            [0, 1, 0],\r\n        ]),\r\n        \"-\": new PlayerMovePattern_1.PlayerMovePattern([\r\n            [0, 0, 0],\r\n            [1, 1, 1],\r\n            [0, 0, 0],\r\n        ]),\r\n        \"tutorial-1\": new PlayerMovePattern_1.PlayerMovePattern([\r\n            [0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0],\r\n            [0, 0, 1, 0, 0],\r\n            [0, 0, 0, 0, 0],\r\n            [0, 0, 1, 0, 0],\r\n        ]),\r\n    };\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=PlayerMovePatternList.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/PlayerMovePatternList.js?");

/***/ }),

/***/ "./JavaScript/Other/PlayerSkill.js":
/*!*****************************************!*\
  !*** ./JavaScript/Other/PlayerSkill.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ArrayController_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.PlayerSkill = void 0;\r\n    //右向き前提\r\n    class PlayerSkill {\r\n        constructor(name, formation, skill) {\r\n            this.name = name;\r\n            let width = 0;\r\n            let height = 0;\r\n            height = formation.length;\r\n            for (let i = 0; i < formation.length; i++) {\r\n                if (width < formation[i].length) {\r\n                    width = formation[i].length;\r\n                }\r\n            }\r\n            this.skill = skill;\r\n            this.formation = [];\r\n            for (let y = 0; y < height; y++) {\r\n                this.formation[y] = [];\r\n                for (let x = 0; x < width; x++) {\r\n                    if (formation[y][x]) {\r\n                        this.formation[y][x] = formation[y][x];\r\n                    }\r\n                    else {\r\n                        this.formation[y][x] = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        getFormation(direction) {\r\n            let rotate;\r\n            switch (direction) {\r\n                case \"down\":\r\n                    rotate = 3;\r\n                    break;\r\n                case \"up\":\r\n                    rotate = 1;\r\n                    break;\r\n                case \"right\":\r\n                    rotate = 0;\r\n                    break;\r\n                case \"left\":\r\n                    rotate = 2;\r\n                    break;\r\n            }\r\n            let array = this.formation;\r\n            for (let i = 0; i < rotate; i++) {\r\n                array = (0, ArrayController_1.ArrayRotate_2d_left)(array);\r\n            }\r\n            return array;\r\n        }\r\n    }\r\n    exports.PlayerSkill = PlayerSkill;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=PlayerSkill.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/PlayerSkill.js?");

/***/ }),

/***/ "./JavaScript/Other/PlayerSkillList.js":
/*!*********************************************!*\
  !*** ./JavaScript/Other/PlayerSkillList.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./PlayerSkill */ \"./JavaScript/Other/PlayerSkill.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, PlayerSkill_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.playerSkillList = void 0;\r\n    //リストの真ん中がプレイヤー現在位置\r\n    //右向き\r\n    //縦横の要素数は奇数でなくてはいけない\r\n    exports.playerSkillList = {\r\n        \"wait\": new PlayerSkill_1.PlayerSkill(\"ただターンを経過させる\", [[0]], (self) => {\r\n        }),\r\n        \"clean\": new PlayerSkill_1.PlayerSkill(\"パワーアップ状態を消す\", [[0]], (self) => {\r\n            self.RemoveAllPowerUpStatus();\r\n        }),\r\n        \"enemyBreak1\": new PlayerSkill_1.PlayerSkill(\"前にいる敵を倒す\", [\r\n            [0, 1, 0],\r\n            [1, 1, 0],\r\n            [0, 1, 0],\r\n        ], (self) => {\r\n            self.DeleteEnemy([\r\n                [0, 0, 1],\r\n                [0, 0, 1],\r\n                [0, 0, 1],\r\n            ]);\r\n        }),\r\n        \"powerUp1\": new PlayerSkill_1.PlayerSkill(\"押し出し速度UP\", [\r\n            [0, 1, 0],\r\n            [0, 1, 1],\r\n            [0, 1, 0],\r\n        ], (self) => {\r\n            self.SetPowerUpStatus(\"pushPower\", 2, 5);\r\n        }),\r\n        \"warp1\": new PlayerSkill_1.PlayerSkill(\"離れている場所にワープ\", [\r\n            [0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0],\r\n            [0, 0, 1, 0, 1],\r\n            [0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0],\r\n        ], (self) => {\r\n            self.Warp(2);\r\n        }),\r\n        \"warp2\": new PlayerSkill_1.PlayerSkill(\"離れている場所にワープ\", [\r\n            [0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 0, 0, 1],\r\n            [0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0],\r\n        ], (self) => {\r\n            self.Warp(3);\r\n        })\r\n    };\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=PlayerSkillList.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/PlayerSkillList.js?");

/***/ }),

/***/ "./JavaScript/Other/SaveData.js":
/*!**************************************!*\
  !*** ./JavaScript/Other/SaveData.js ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/System/InputManager */ \"./JavaScript/GameBase/System/InputManager.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, InputManager_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SaveData = void 0;\r\n    class SaveData {\r\n        constructor() {\r\n            this._scoreList = {};\r\n        }\r\n        get scoreList() {\r\n            return this._scoreList;\r\n        }\r\n        AddScore(stageName, process) {\r\n            let flag = false;\r\n            for (let key in this._scoreList) {\r\n                if (key == stageName) {\r\n                    flag = true;\r\n                }\r\n            }\r\n            if (flag == true) {\r\n                //既存\r\n                if (this._scoreList[stageName].process > process) {\r\n                    this._scoreList[stageName].process = process;\r\n                }\r\n                this._scoreList[stageName].clearCount++;\r\n            }\r\n            else {\r\n                //新規\r\n                this._scoreList[stageName] = {\r\n                    process: process,\r\n                    clearCount: 1,\r\n                };\r\n            }\r\n        }\r\n        Save() {\r\n            {\r\n                //区切り->大:<->/中:<-->\r\n                let scoreList = \"\";\r\n                let flag = false;\r\n                for (let key in this._scoreList) {\r\n                    if (flag == true) {\r\n                        scoreList += \"<->\";\r\n                    }\r\n                    flag = true;\r\n                    scoreList += `${key}<-->${this._scoreList[key].process}<-->${this.scoreList[key].clearCount}`;\r\n                }\r\n                window.localStorage.setItem(\"scoreList\", scoreList);\r\n            }\r\n            {\r\n                let upKeys = this.ListToString(InputManager_1.InputManager.instance.upKey, \"<->\");\r\n                let downKeys = this.ListToString(InputManager_1.InputManager.instance.downKey, \"<->\");\r\n                let leftKeys = this.ListToString(InputManager_1.InputManager.instance.leftKey, \"<->\");\r\n                let rightKeys = this.ListToString(InputManager_1.InputManager.instance.rightKey, \"<->\");\r\n                let okKeys = this.ListToString(InputManager_1.InputManager.instance.okKey, \"<->\");\r\n                let canselKeys = this.ListToString(InputManager_1.InputManager.instance.canselKey, \"<->\");\r\n                let activeKeys = this.ListToString(InputManager_1.InputManager.instance.activeKey, \"<->\");\r\n                let btn1Keys = this.ListToString(InputManager_1.InputManager.instance.subBtn1, \"<->\");\r\n                let btn2Keys = this.ListToString(InputManager_1.InputManager.instance.subBtn2, \"<->\");\r\n                let btn3Keys = this.ListToString(InputManager_1.InputManager.instance.subBtn3, \"<->\");\r\n                let btn4Keys = this.ListToString(InputManager_1.InputManager.instance.subBtn4, \"<->\");\r\n                let btn5Keys = this.ListToString(InputManager_1.InputManager.instance.subBtn5, \"<->\");\r\n                window.localStorage.setItem(\"upKey\", upKeys);\r\n                window.localStorage.setItem(\"downKey\", downKeys);\r\n                window.localStorage.setItem(\"leftKey\", leftKeys);\r\n                window.localStorage.setItem(\"rightKey\", rightKeys);\r\n                window.localStorage.setItem(\"okKey\", okKeys);\r\n                window.localStorage.setItem(\"canselKey\", canselKeys);\r\n                window.localStorage.setItem(\"activeKey\", activeKeys);\r\n                window.localStorage.setItem(\"subBtn1\", btn1Keys);\r\n                window.localStorage.setItem(\"subBtn2\", btn2Keys);\r\n                window.localStorage.setItem(\"subBtn3\", btn3Keys);\r\n                window.localStorage.setItem(\"subBtn4\", btn4Keys);\r\n                window.localStorage.setItem(\"subBtn5\", btn5Keys);\r\n                window.localStorage.setItem(\"slideRange\", InputManager_1.InputManager.instance.slideRange.toString());\r\n                window.localStorage.setItem(\"longTouchTime\", InputManager_1.InputManager.instance.longTapTime.toString());\r\n            }\r\n        }\r\n        Load() {\r\n            const scoreListData = window.localStorage.getItem(\"scoreList\");\r\n            if (scoreListData != null) {\r\n                const scoreList = scoreListData.split(\"<->\");\r\n                for (let i = 0; i < scoreList.length; i++) {\r\n                    const score = scoreList[i].split(\"<-->\");\r\n                    this._scoreList[score[0]] = {\r\n                        process: score[1] != undefined ? Number(score[1]) : 0,\r\n                        clearCount: score[2] != undefined ? Number(score[2]) : 0,\r\n                    };\r\n                }\r\n            }\r\n            const upkey = window.localStorage.getItem(\"upKey\");\r\n            const downkey = window.localStorage.getItem(\"downKey\");\r\n            const leftkey = window.localStorage.getItem(\"leftKey\");\r\n            const rightkey = window.localStorage.getItem(\"rightKey\");\r\n            const okkey = window.localStorage.getItem(\"okKey\");\r\n            const canselkey = window.localStorage.getItem(\"canselKey\");\r\n            const activekey = window.localStorage.getItem(\"activeKey\");\r\n            const btn1 = window.localStorage.getItem(\"subBtn1\");\r\n            const btn2 = window.localStorage.getItem(\"subBtn2\");\r\n            const btn3 = window.localStorage.getItem(\"subBtn3\");\r\n            const btn4 = window.localStorage.getItem(\"subBtn4\");\r\n            const btn5 = window.localStorage.getItem(\"subBtn5\");\r\n            if (upkey != null) {\r\n                InputManager_1.InputManager.instance.upKey = upkey.split(\"<->\");\r\n            }\r\n            if (downkey != null) {\r\n                InputManager_1.InputManager.instance.downKey = downkey.split(\"<->\");\r\n            }\r\n            if (leftkey != null) {\r\n                InputManager_1.InputManager.instance.leftKey = leftkey.split(\"<->\");\r\n            }\r\n            if (rightkey != null) {\r\n                InputManager_1.InputManager.instance.rightKey = rightkey.split(\"<->\");\r\n            }\r\n            if (okkey != null) {\r\n                InputManager_1.InputManager.instance.okKey = okkey.split(\"<->\");\r\n            }\r\n            if (canselkey != null) {\r\n                InputManager_1.InputManager.instance.canselKey = canselkey.split(\"<->\");\r\n            }\r\n            if (activekey != null) {\r\n                InputManager_1.InputManager.instance.activeKey = activekey.split(\"<->\");\r\n            }\r\n            if (btn1 != null) {\r\n                InputManager_1.InputManager.instance.subBtn1 = btn1.split(\"<->\");\r\n            }\r\n            if (btn2 != null) {\r\n                InputManager_1.InputManager.instance.subBtn2 = btn2.split(\"<->\");\r\n            }\r\n            if (btn3 != null) {\r\n                InputManager_1.InputManager.instance.subBtn3 = btn3.split(\"<->\");\r\n            }\r\n            if (btn4 != null) {\r\n                InputManager_1.InputManager.instance.subBtn4 = btn4.split(\"<->\");\r\n            }\r\n            if (btn5 != null) {\r\n                InputManager_1.InputManager.instance.subBtn5 = btn5.split(\"<->\");\r\n            }\r\n            const slideRange = window.localStorage.getItem(\"slideRange\");\r\n            const longTouchTime = window.localStorage.getItem(\"longTouchTime\");\r\n            if (slideRange != null) {\r\n                InputManager_1.InputManager.instance.slideRange = Number(slideRange);\r\n            }\r\n            if (longTouchTime != null) {\r\n                InputManager_1.InputManager.instance.longTapTime = Number(longTouchTime);\r\n            }\r\n        }\r\n        Reset() {\r\n            window.localStorage.clear();\r\n            this._scoreList = {};\r\n        }\r\n        ListToString(list, partition) {\r\n            let text = \"\";\r\n            let flag = false;\r\n            for (let i = 0; i < list.length; i++) {\r\n                if (flag == true) {\r\n                    text += partition;\r\n                }\r\n                flag = true;\r\n                text += list[i];\r\n            }\r\n            return text;\r\n        }\r\n    }\r\n    exports.SaveData = SaveData;\r\n    SaveData.instance = new SaveData();\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SaveData.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/SaveData.js?");

/***/ }),

/***/ "./JavaScript/Other/SettingList.js":
/*!*****************************************!*\
  !*** ./JavaScript/Other/SettingList.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Function/ArrayController */ \"./JavaScript/GameBase/Function/ArrayController.js\"), __webpack_require__(/*! ../GameBase/System/InputManager */ \"./JavaScript/GameBase/System/InputManager.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, DrawTextSingleline_1, ArrayController_1, InputManager_1, DrawTextMultiline_1, GlobalData_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.settingItems = void 0;\r\n    if (GlobalData_1.GlobalData.instance.mobile) {\r\n        const slideRangeList = [30, 60, 100];\r\n        const longTouchTimeList = [0.5, 1, 2];\r\n        exports.settingItems = [\r\n            {\r\n                text: \"スライド判定範囲\",\r\n                update: (self) => {\r\n                    itemSetting_Display(self, \"スライド判定範囲\", InputManager_1.InputManager.instance.slideRange, slideRangeList, [\"小\", \"中\", \"大\"]);\r\n                },\r\n                click: (self) => {\r\n                    InputManager_1.InputManager.instance.slideRange = itemSetting_Input(InputManager_1.InputManager.instance.slideRange, slideRangeList);\r\n                },\r\n            },\r\n            {\r\n                text: \"長押し判定時間\",\r\n                update: (self) => {\r\n                    itemSetting_Display(self, \"長押し判定時間\", InputManager_1.InputManager.instance.longTapTime, longTouchTimeList, [\"短\", \"普通\", \"長\"]);\r\n                },\r\n                click: (self) => {\r\n                    InputManager_1.InputManager.instance.longTapTime = itemSetting_Input(InputManager_1.InputManager.instance.longTapTime, longTouchTimeList);\r\n                }\r\n            },\r\n        ];\r\n    }\r\n    else {\r\n        exports.settingItems = [\r\n            {\r\n                text: \"上キー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"上キー:\", InputManager_1.InputManager.instance.upKey);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.upKey = keySetting_Input(InputManager_1.InputManager.instance.upKey, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"下キー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"下キー:\", InputManager_1.InputManager.instance.downKey);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.downKey = keySetting_Input(InputManager_1.InputManager.instance.downKey, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"左キー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"左キー:\", InputManager_1.InputManager.instance.leftKey);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.leftKey = keySetting_Input(InputManager_1.InputManager.instance.leftKey, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"右キー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"右キー:\", InputManager_1.InputManager.instance.rightKey);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.rightKey = keySetting_Input(InputManager_1.InputManager.instance.rightKey, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"OKキー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"OKキー:\", InputManager_1.InputManager.instance.okKey);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.okKey = keySetting_Input(InputManager_1.InputManager.instance.okKey, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"アクションキー(押す/スキル):\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"アクションキー(押す/スキル):\", InputManager_1.InputManager.instance.activeKey);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.activeKey = keySetting_Input(InputManager_1.InputManager.instance.activeKey, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"キャンセルキー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"キャンセルキー:\", InputManager_1.InputManager.instance.canselKey);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.canselKey = keySetting_Input(InputManager_1.InputManager.instance.canselKey, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"移動変更キー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"移動変更キー:\", InputManager_1.InputManager.instance.subBtn1);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.subBtn1 = keySetting_Input(InputManager_1.InputManager.instance.subBtn1, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"スキル変更キー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"スキル変更キー:\", InputManager_1.InputManager.instance.subBtn2);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.subBtn2 = keySetting_Input(InputManager_1.InputManager.instance.subBtn2, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"スキル準備キー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"スキル準備キー:\", InputManager_1.InputManager.instance.subBtn3);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.subBtn3 = keySetting_Input(InputManager_1.InputManager.instance.subBtn3, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"移動禁止キー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"移動禁止キー:\", InputManager_1.InputManager.instance.subBtn4);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.subBtn4 = keySetting_Input(InputManager_1.InputManager.instance.subBtn4, key);\r\n                }\r\n            },\r\n            {\r\n                text: \"1つ戻すキー:\",\r\n                update: (self) => {\r\n                    keySetting_Display(self, \"1つ戻すキー:\", InputManager_1.InputManager.instance.subBtn5);\r\n                },\r\n                keyDown: (self, key) => {\r\n                    InputManager_1.InputManager.instance.subBtn5 = keySetting_Input(InputManager_1.InputManager.instance.subBtn5, key);\r\n                }\r\n            },\r\n        ];\r\n    }\r\n    function keySetting_Input(keyArray, inputKey) {\r\n        let newArray = keyArray;\r\n        if (inputKey == \"Backspace\") {\r\n            newArray = (0, ArrayController_1.ArrayCtl_RemoveLastElement)(keyArray, 1);\r\n        }\r\n        else {\r\n            if (!keyArray.includes(inputKey)) {\r\n                newArray.push(inputKey);\r\n            }\r\n        }\r\n        return newArray;\r\n    }\r\n    function keySetting_Display(self, defaultText, keyArray) {\r\n        if (self.draw != null && (self.draw instanceof DrawTextSingleline_1.DrawTextSinglelineComponent || self.draw instanceof DrawTextMultiline_1.DrawTextMultilineComponent)) {\r\n            const drawText = self.draw;\r\n            drawText.text = defaultText;\r\n            for (let i = 0; i < keyArray.length; i++) {\r\n                drawText.text += \"[\" + (keyArray[i] != \" \" ? keyArray[i] : \"Space\") + \"]\";\r\n            }\r\n        }\r\n    }\r\n    function itemSetting_Input(value, items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i] == value) {\r\n                if (i == items.length - 1) {\r\n                    return items[0];\r\n                }\r\n                else {\r\n                    return items[i + 1];\r\n                }\r\n            }\r\n        }\r\n        if (items[0] != undefined) {\r\n            return items[0];\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n    function itemSetting_Display(self, defaultText, value, items, itemNames) {\r\n        if (self.draw != null && (self.draw instanceof DrawTextSingleline_1.DrawTextSinglelineComponent || self.draw instanceof DrawTextMultiline_1.DrawTextMultilineComponent)) {\r\n            const drawText = self.draw;\r\n            for (let i = 0; i < items.length; i++) {\r\n                if (items[i] == value) {\r\n                    if (itemNames[i] == undefined) {\r\n                        return;\r\n                    }\r\n                    drawText.text = `${defaultText} [ ${itemNames[i]} ]`;\r\n                    return;\r\n                }\r\n            }\r\n            drawText.text = `${defaultText} [ ? ]`;\r\n        }\r\n    }\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SettingList.js.map\n\n//# sourceURL=webpack:///./JavaScript/Other/SettingList.js?");

/***/ }),

/***/ "./JavaScript/Scene/GameSscene.js":
/*!****************************************!*\
  !*** ./JavaScript/Scene/GameSscene.js ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/CameraTracker */ \"./JavaScript/Component/CameraTracker.js\"), __webpack_require__(/*! ../Component/Debuger */ \"./JavaScript/Component/Debuger.js\"), __webpack_require__(/*! ../Component/GameMaster */ \"./JavaScript/Component/GameMaster.js\"), __webpack_require__(/*! ../Component/PlayerController */ \"./JavaScript/Component/PlayerController.js\"), __webpack_require__(/*! ../Component/ScoreDisplay */ \"./JavaScript/Component/ScoreDisplay.js\"), __webpack_require__(/*! ../Component/SelectSkillDisplay */ \"./JavaScript/Component/SelectSkillDisplay.js\"), __webpack_require__(/*! ../Component/StatusDisplay */ \"./JavaScript/Component/StatusDisplay.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Aabb */ \"./JavaScript/GameBase/Game/Component/Aabb.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Animation */ \"./JavaScript/GameBase/Game/Component/Animation.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextMultiline */ \"./JavaScript/GameBase/Game/Component/DrawTextMultiline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Scene/GameSceneBase */ \"./JavaScript/GameBase/Game/Scene/GameSceneBase.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../Object/Debuger */ \"./JavaScript/Object/Debuger.js\"), __webpack_require__(/*! ../Object/GameCamera */ \"./JavaScript/Object/GameCamera.js\"), __webpack_require__(/*! ../Object/GameMaster */ \"./JavaScript/Object/GameMaster.js\"), __webpack_require__(/*! ../Object/Player */ \"./JavaScript/Object/Player.js\"), __webpack_require__(/*! ../Object/ScoreDisplay */ \"./JavaScript/Object/ScoreDisplay.js\"), __webpack_require__(/*! ../Object/SelectSkillDisplay */ \"./JavaScript/Object/SelectSkillDisplay.js\"), __webpack_require__(/*! ../Object/StatusDisplay */ \"./JavaScript/Object/StatusDisplay.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, CameraTracker_1, Debuger_1, GameMaster_1, PlayerController_1, ScoreDisplay_1, SelectSkillDisplay_1, StatusDisplay_1, Color_1, ImageBase_1, Point_1, Size_1, Aabb_1, Animation_1, Camera_1, Draw_1, DrawTextMultiline_1, Transform_1, GameSceneBase_1, GlobalData_1, Debuger_2, GameCamera_1, GameMaster_2, Player_1, ScoreDisplay_2, SelectSkillDisplay_2, StatusDisplay_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.GameScene = void 0;\r\n    class GameScene extends GameSceneBase_1.GameSceneBase {\r\n        constructor() {\r\n            super();\r\n            this.name = \"Game\";\r\n            this.AddObjects([\r\n                new Debuger_2.DebugerObject(\"debuger\", {\r\n                    debuger: {\r\n                        type: Debuger_1.DebugerComponent,\r\n                        displayElement: document.getElementById(\"debugDisplay\"),\r\n                    }\r\n                }),\r\n                new GameCamera_1.GameCameraObject(\"mainCamera\", {\r\n                    camera: {\r\n                        type: Camera_1.CameraComponent,\r\n                    },\r\n                    cameraTracker: {\r\n                        type: CameraTracker_1.CameraTrackerComponent,\r\n                        targetName: \"player\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(800, 500),\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(0, 0),\r\n                    },\r\n                }),\r\n                new Player_1.PlayerObject(\"player\", {\r\n                    aabb: {\r\n                        type: Aabb_1.AabbComponent,\r\n                        size: new Size_1.Size(64, 64),\r\n                        offset: new Point_1.Point2d(0, 32)\r\n                    },\r\n                    animation: {\r\n                        type: Animation_1.AnimationComponent,\r\n                        animes: {\r\n                            \"up-stand\": [new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_stand.png\")],\r\n                            \"down-stand\": [new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_stand.png\")],\r\n                            \"left-stand\": [new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_stand.png\")],\r\n                            \"right-stand\": [new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_stand.png\")],\r\n                            \"up-work\": [\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_work1.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_stand.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_work2.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_stand.png\"),\r\n                            ],\r\n                            \"down-work\": [\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_work1.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_stand.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_work2.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_stand.png\"),\r\n                            ],\r\n                            \"left-work\": [\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_work1.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_stand.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_work2.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_stand.png\"),\r\n                            ],\r\n                            \"right-work\": [\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_work1.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_stand.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_work2.png\"),\r\n                                new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_stand.png\"),\r\n                            ],\r\n                        },\r\n                        loopTime_second: 0.5,\r\n                        loop: true,\r\n                    },\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"character\",\r\n                    },\r\n                    playerController: {\r\n                        type: PlayerController_1.PlayerControllerComponent,\r\n                        gameMasterObjName: \"gameMaster\",\r\n                        moveSpeed: 3,\r\n                        point: GameMaster_1.GameMasterComponent.gameRule.startPoint.copy,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(64, 96),\r\n                    }\r\n                }),\r\n                new GameMaster_2.GameMasterObject(\"gameMaster\", {\r\n                    gameMaster: {\r\n                        type: GameMaster_1.GameMasterComponent,\r\n                    },\r\n                }),\r\n                new ScoreDisplay_2.ScoreDisplayObject(\"scoreDisplay\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0.5, 0),\r\n                        size: new Size_1.Size(150, 40),\r\n                        position: new Point_1.Point2d(400, 0),\r\n                        absolute: true,\r\n                    },\r\n                    scoreDisplay: {\r\n                        type: ScoreDisplay_1.ScoreDisplayComponent,\r\n                        gameMasterObjName: \"gameMaster\",\r\n                    },\r\n                    drawTextMulti: {\r\n                        type: DrawTextMultiline_1.DrawTextMultilineComponent,\r\n                        sortName: \"UI\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        textAlign: \"center\",\r\n                        fontFamily: \"Arial\",\r\n                        rowInterval: 5,\r\n                        margin: new Size_1.Size(0, 20),\r\n                        fontSize: 17,\r\n                    }\r\n                }),\r\n                new SelectSkillDisplay_2.SelectSkillDisplayObject(\"skillDisplay\", {\r\n                    drawTextMulti: {\r\n                        type: DrawTextMultiline_1.DrawTextMultilineComponent,\r\n                        sortName: \"UI\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        textAlign: \"center\",\r\n                        fontFamily: \"Arial\",\r\n                        rowInterval: 5,\r\n                        margin: new Size_1.Size(0, 20),\r\n                        fontSize: 17,\r\n                    },\r\n                    selectSkillDisplay: {\r\n                        type: SelectSkillDisplay_1.SelectSkillDisplayComponent,\r\n                        playerObjName: \"player\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(1, 0),\r\n                        size: new Size_1.Size(250, 40),\r\n                        position: new Point_1.Point2d(800, 0),\r\n                        absolute: true,\r\n                    }\r\n                }),\r\n                new StatusDisplay_2.StatusDisplayObject(\"statusDisplay\", {\r\n                    drawTextMulti: {\r\n                        type: DrawTextMultiline_1.DrawTextMultilineComponent,\r\n                        sortName: \"UI\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        textAlign: \"center\",\r\n                        fontFamily: \"Arial\",\r\n                        lineHeight: \"center\",\r\n                        rowInterval: 5,\r\n                        textHeight: true,\r\n                        margin: new Size_1.Size(0, 20),\r\n                        fontSize: 17,\r\n                    },\r\n                    statusDisplay: {\r\n                        type: StatusDisplay_1.StatusDisplayComponent,\r\n                        playerObjName: \"player\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(250, 40),\r\n                        absolute: true,\r\n                    }\r\n                })\r\n            ]);\r\n        }\r\n    }\r\n    exports.GameScene = GameScene;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=GameSscene.js.map\n\n//# sourceURL=webpack:///./JavaScript/Scene/GameSscene.js?");

/***/ }),

/***/ "./JavaScript/Scene/SelectScene.js":
/*!*****************************************!*\
  !*** ./JavaScript/Scene/SelectScene.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Debuger */ \"./JavaScript/Component/Debuger.js\"), __webpack_require__(/*! ../Component/SetStageInfo */ \"./JavaScript/Component/SetStageInfo.js\"), __webpack_require__(/*! ../Component/StageListCreater */ \"./JavaScript/Component/StageListCreater.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/ScrollBox */ \"./JavaScript/GameBase/Game/Component/ScrollBox.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Camera */ \"./JavaScript/GameBase/Game/Object/Camera.js\"), __webpack_require__(/*! ../GameBase/Game/Scene/GameSceneBase */ \"./JavaScript/GameBase/Game/Scene/GameSceneBase.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../GameBase/System/SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ../Object/Debuger */ \"./JavaScript/Object/Debuger.js\"), __webpack_require__(/*! ../Object/StageInfoDisplay */ \"./JavaScript/Object/StageInfoDisplay.js\"), __webpack_require__(/*! ../Object/StageList */ \"./JavaScript/Object/StageList.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Debuger_1, SetStageInfo_1, StageListCreater_1, Color_1, ImageBase_1, Point_1, Size_1, Camera_1, Draw_1, DrawTextSingleline_1, ScrollBox_1, Transform_1, Ui_1, Button_1, Camera_2, GameSceneBase_1, GlobalData_1, SceneManager_1, Debuger_2, StageInfoDisplay_1, StageList_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SelectScene = void 0;\r\n    class SelectScene extends GameSceneBase_1.GameSceneBase {\r\n        constructor() {\r\n            super();\r\n            this.name = \"Select\";\r\n            this.AddObjects([\r\n                new Debuger_2.DebugerObject(\"debuger\", {\r\n                    debuger: {\r\n                        type: Debuger_1.DebugerComponent,\r\n                        displayElement: document.getElementById(\"debugDisplay\"),\r\n                    },\r\n                }),\r\n                new Camera_2.CameraObject(\"camera\", {\r\n                    camera: {\r\n                        type: Camera_1.CameraComponent,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(800, 500),\r\n                    }\r\n                }),\r\n                new Button_1.ButtonObject(\"backButton\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(120, 40),\r\n                        absolute: true,\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"UI\",\r\n                        text: \"Back\",\r\n                        textAlign: \"center\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: (self) => {\r\n                            SceneManager_1.SceneManager.instance.RemoveScene(1);\r\n                        }\r\n                    }\r\n                }),\r\n                new StageInfoDisplay_1.StageInfoDisplayObject(\"stageInfoDisplay\", {\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"frontUI\",\r\n                        image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    },\r\n                    setStageInfo: {\r\n                        type: SetStageInfo_1.SetStageInfoComponent,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0.5, 0),\r\n                        position: new Point_1.Point2d(400, 0),\r\n                        size: new Size_1.Size(650, 500),\r\n                        absolute: true,\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    }\r\n                }),\r\n                new StageList_1.StageListObject(\"stageList\", {\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"UI\",\r\n                        image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    },\r\n                    scrollBox: {\r\n                        type: ScrollBox_1.ScrollBoxComponent,\r\n                        margin: new Size_1.Size(20, 20),\r\n                        elementInterval: 20,\r\n                        scrollStep: navigator.userAgent.match(/iPhone|Android.+Mobile/) ? 2 : 1,\r\n                        elementSize: new Size_1.Size(400, 40),\r\n                        elements: [new Button_1.ButtonObject(\"guid\", {\r\n                                darwTextSingle: {\r\n                                    type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                                    sortName: \"UI\",\r\n                                    text: \"～スクロール有～\",\r\n                                    fontColor: Color_1.Color.GetColor(\"white\"),\r\n                                    textAlign: \"center\",\r\n                                },\r\n                                transform: {\r\n                                    type: Transform_1.TransformComponent,\r\n                                },\r\n                                ui: {\r\n                                    type: Ui_1.UiComponent,\r\n                                    focusLineWidth: 0,\r\n                                    hoverLineWidth: 0,\r\n                                }\r\n                            })],\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    },\r\n                    stageListCreater: {\r\n                        type: StageListCreater_1.StageListCreaterComponent,\r\n                        stageInfoDisplayObjName: \"stageInfoDisplay\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0.5, 0),\r\n                        position: new Point_1.Point2d(400, 0),\r\n                        size: new Size_1.Size(500, 500),\r\n                        absolute: true,\r\n                    }\r\n                })\r\n            ]);\r\n        }\r\n    }\r\n    exports.SelectScene = SelectScene;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SelectScene.js.map\n\n//# sourceURL=webpack:///./JavaScript/Scene/SelectScene.js?");

/***/ }),

/***/ "./JavaScript/Scene/SettingScene.js":
/*!******************************************!*\
  !*** ./JavaScript/Scene/SettingScene.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Component/Debuger */ \"./JavaScript/Component/Debuger.js\"), __webpack_require__(/*! ../Component/SettingListCreater */ \"./JavaScript/Component/SettingListCreater.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/Game/Component/ScrollBox */ \"./JavaScript/GameBase/Game/Component/ScrollBox.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Camera */ \"./JavaScript/GameBase/Game/Object/Camera.js\"), __webpack_require__(/*! ../GameBase/Game/Scene/GameSceneBase */ \"./JavaScript/GameBase/Game/Scene/GameSceneBase.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../GameBase/System/SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ../Object/Debuger */ \"./JavaScript/Object/Debuger.js\"), __webpack_require__(/*! ../Object/SettingList */ \"./JavaScript/Object/SettingList.js\"), __webpack_require__(/*! ../Other/SaveData */ \"./JavaScript/Other/SaveData.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Debuger_1, SettingListCreater_1, Color_1, ImageBase_1, Point_1, Size_1, Camera_1, Draw_1, DrawTextSingleline_1, ScrollBox_1, Transform_1, Ui_1, Button_1, Camera_2, GameSceneBase_1, GlobalData_1, SceneManager_1, Debuger_2, SettingList_1, SaveData_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.SettingScene = void 0;\r\n    class SettingScene extends GameSceneBase_1.GameSceneBase {\r\n        constructor() {\r\n            super();\r\n            this.name = \"Setting\";\r\n            this.AddObjects([\r\n                new Debuger_2.DebugerObject(\"debuger\", {\r\n                    debuger: {\r\n                        type: Debuger_1.DebugerComponent,\r\n                        displayElement: document.getElementById(\"debugDisplay\"),\r\n                    }\r\n                }),\r\n                new Camera_2.CameraObject(\"camera\", {\r\n                    camera: {\r\n                        type: Camera_1.CameraComponent,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(800, 500),\r\n                        position: new Point_1.Point2d(0, 0),\r\n                    },\r\n                }),\r\n                new Button_1.ButtonObject(\"backSceneButton\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(120, 40),\r\n                        absolute: true,\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"UI\",\r\n                        text: \"X\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        textAlign: \"center\",\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                        clickEvent: (self) => {\r\n                            SceneManager_1.SceneManager.instance.RemoveScene(1);\r\n                        }\r\n                    }\r\n                }),\r\n                new SettingList_1.SettingList(\"SettingList\", {\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        sortName: \"UI\",\r\n                        image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                    },\r\n                    scrollBox: {\r\n                        type: ScrollBox_1.ScrollBoxComponent,\r\n                        margin: new Size_1.Size(20, 40),\r\n                        elementSize: new Size_1.Size(300, 40),\r\n                        elementInterval: 20,\r\n                        elements: [new Button_1.ButtonObject(\"guid\", {\r\n                                darwTextSingle: {\r\n                                    type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                                    sortName: \"UI\",\r\n                                    text: \"～スクロール有/キー入力で設定(BackSpaceで削除)～\",\r\n                                    fontColor: Color_1.Color.GetColor(\"white\"),\r\n                                    textAlign: \"center\",\r\n                                },\r\n                                transform: {\r\n                                    type: Transform_1.TransformComponent,\r\n                                },\r\n                                ui: {\r\n                                    type: Ui_1.UiComponent,\r\n                                    focusLineWidth: 0,\r\n                                    hoverLineWidth: 0,\r\n                                }\r\n                            })],\r\n                        scrollStep: navigator.userAgent.match(/iPhone|Android.+Mobile/) ? 2 : 1,\r\n                    },\r\n                    settingListCreater: {\r\n                        type: SettingListCreater_1.SettingListCreaterComponent,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(500, 500),\r\n                        anchor: new Point_1.Point2d(0.5, 0),\r\n                        position: new Point_1.Point2d(400, 0),\r\n                        absolute: true,\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    }\r\n                }),\r\n                new Button_1.ButtonObject(\"SaveButton\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(120, 40),\r\n                        anchor: new Point_1.Point2d(1, 0),\r\n                        position: new Point_1.Point2d(800, 0),\r\n                        absolute: true,\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"UI\",\r\n                        text: \"セーブ\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        backGroundColor: new Color_1.Color(0, 0, 0, 0),\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        textAlign: \"center\",\r\n                        lineHeight: \"center\",\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: (self) => {\r\n                            SaveData_1.SaveData.instance.Save();\r\n                            alert(\"セーブデータをブラウザに保存しました...\");\r\n                        },\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    },\r\n                }),\r\n                new Button_1.ButtonObject(\"ResetButton\", {\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(120, 40),\r\n                        anchor: new Point_1.Point2d(1, 0),\r\n                        position: new Point_1.Point2d(800, 40),\r\n                        absolute: true\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"UI\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        backGroundColor: new Color_1.Color(0, 0, 0, 0),\r\n                        text: \"リセット\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        textAlign: \"center\",\r\n                    },\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: (self) => {\r\n                            const answer = window.confirm(\"セーブデータを消去しますか?\");\r\n                            if (answer == true) {\r\n                                SaveData_1.SaveData.instance.Reset();\r\n                                alert(\"削除しました\");\r\n                            }\r\n                        },\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    }\r\n                })\r\n            ]);\r\n        }\r\n    }\r\n    exports.SettingScene = SettingScene;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=SettingScene.js.map\n\n//# sourceURL=webpack:///./JavaScript/Scene/SettingScene.js?");

/***/ }),

/***/ "./JavaScript/Scene/TitleScene.js":
/*!****************************************!*\
  !*** ./JavaScript/Scene/TitleScene.js ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../GameBase/Class/Point */ \"./JavaScript/GameBase/Class/Point.js\"), __webpack_require__(/*! ../GameBase/Class/Size */ \"./JavaScript/GameBase/Class/Size.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Camera */ \"./JavaScript/GameBase/Game/Component/Camera.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Transform */ \"./JavaScript/GameBase/Game/Component/Transform.js\"), __webpack_require__(/*! ../GameBase/Game/Scene/GameSceneBase */ \"./JavaScript/GameBase/Game/Scene/GameSceneBase.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Camera */ \"./JavaScript/GameBase/Game/Object/Camera.js\"), __webpack_require__(/*! ../Object/Debuger */ \"./JavaScript/Object/Debuger.js\"), __webpack_require__(/*! ../Component/Debuger */ \"./JavaScript/Component/Debuger.js\"), __webpack_require__(/*! ../GameBase/Game/Object/Button */ \"./JavaScript/GameBase/Game/Object/Button.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Ui */ \"./JavaScript/GameBase/Game/Component/Ui.js\"), __webpack_require__(/*! ../GameBase/Game/Component/DrawTextSingleline */ \"./JavaScript/GameBase/Game/Component/DrawTextSingleline.js\"), __webpack_require__(/*! ../GameBase/System/SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ./SelectScene */ \"./JavaScript/Scene/SelectScene.js\"), __webpack_require__(/*! ./SettingScene */ \"./JavaScript/Scene/SettingScene.js\"), __webpack_require__(/*! ../GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ../GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ../GameBase/Class/Color */ \"./JavaScript/GameBase/Class/Color.js\"), __webpack_require__(/*! ../GameBase/Game/Object/ImageDisplay */ \"./JavaScript/GameBase/Game/Object/ImageDisplay.js\"), __webpack_require__(/*! ../GameBase/Game/Component/Draw */ \"./JavaScript/GameBase/Game/Component/Draw.js\"), __webpack_require__(/*! ../GameBase/Game/Object/TextSingleline */ \"./JavaScript/GameBase/Game/Object/TextSingleline.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Point_1, Size_1, Camera_1, Transform_1, GameSceneBase_1, Camera_2, Debuger_1, Debuger_2, Button_1, Ui_1, DrawTextSingleline_1, SceneManager_1, SelectScene_1, SettingScene_1, ImageBase_1, GlobalData_1, Color_1, ImageDisplay_1, Draw_1, TextSingleline_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.TitleScene = void 0;\r\n    class TitleScene extends GameSceneBase_1.GameSceneBase {\r\n        constructor() {\r\n            super();\r\n            this.name = \"Title\";\r\n            this.AddObjects([\r\n                new Debuger_1.DebugerObject(\"debuger\", {\r\n                    debuger: {\r\n                        type: Debuger_2.DebugerComponent,\r\n                        displayElement: document.getElementById(\"debugDisplay\"),\r\n                    }\r\n                }),\r\n                new Camera_2.CameraObject(\"camera\", {\r\n                    camera: {\r\n                        type: Camera_1.CameraComponent,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        position: new Point_1.Point2d(0, 0),\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        size: new Size_1.Size(800, 500),\r\n                    }\r\n                }),\r\n                new Button_1.ButtonObject(\"startButton\", {\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: (self) => {\r\n                            SceneManager_1.SceneManager.instance.AddScene(new SelectScene_1.SelectScene());\r\n                        },\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        absolute: true,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(50, 100),\r\n                        size: new Size_1.Size(120, 60),\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"UI\",\r\n                        text: \"Start!!!\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        textAlign: \"center\",\r\n                    }\r\n                }),\r\n                new Button_1.ButtonObject(\"subButton\", {\r\n                    ui: {\r\n                        type: Ui_1.UiComponent,\r\n                        clickEvent: (self) => {\r\n                            SceneManager_1.SceneManager.instance.AddScene(new SettingScene_1.SettingScene());\r\n                        },\r\n                        focusLineWidth: 0,\r\n                        hoverLineWidth: 0,\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        absolute: true,\r\n                        anchor: new Point_1.Point2d(0, 0),\r\n                        position: new Point_1.Point2d(50, 170),\r\n                        size: new Size_1.Size(120, 60),\r\n                    },\r\n                    darwTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"UI\",\r\n                        text: \"設定\",\r\n                        backgroundImage: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/uiBorder.png\", { up: 20, down: 20, left: 20, right: 20 }),\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        textAlign: \"center\",\r\n                    }\r\n                }),\r\n                new ImageDisplay_1.ImageDisplayObject(\"titleLogo\", {\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/smashSlide_Title.png\"),\r\n                        sortName: \"background\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(384, 192),\r\n                        anchor: new Point_1.Point2d(1, 0),\r\n                        position: new Point_1.Point2d(775, 25),\r\n                    }\r\n                }),\r\n                new ImageDisplay_1.ImageDisplayObject(\"logo\", {\r\n                    draw: {\r\n                        type: Draw_1.DrawComponent,\r\n                        image: new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"fa_Logo.png\"),\r\n                        sortName: \"background\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(128, 128),\r\n                        anchor: new Point_1.Point2d(0, 1),\r\n                        position: new Point_1.Point2d(20, 480),\r\n                    }\r\n                }),\r\n                new TextSingleline_1.TextSinglelineObject(\"version\", {\r\n                    drawTextSingle: {\r\n                        type: DrawTextSingleline_1.DrawTextSinglelineComponent,\r\n                        sortName: \"background\",\r\n                        text: \"ver:1.03\",\r\n                        textAlign: \"right\",\r\n                        fontColor: Color_1.Color.GetColor(\"white\"),\r\n                        lineHeight: \"bottom\",\r\n                    },\r\n                    transform: {\r\n                        type: Transform_1.TransformComponent,\r\n                        size: new Size_1.Size(200, 50),\r\n                        anchor: new Point_1.Point2d(1, 1),\r\n                        position: new Point_1.Point2d(800, 500)\r\n                    }\r\n                })\r\n            ]);\r\n        }\r\n    }\r\n    exports.TitleScene = TitleScene;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=TitleScene.js.map\n\n//# sourceURL=webpack:///./JavaScript/Scene/TitleScene.js?");

/***/ }),

/***/ "./JavaScript/main.js":
/*!****************************!*\
  !*** ./JavaScript/main.js ***!
  \****************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./GameBase/Class/ImageBase */ \"./JavaScript/GameBase/Class/ImageBase.js\"), __webpack_require__(/*! ./GameBase/System/GlobalData */ \"./JavaScript/GameBase/System/GlobalData.js\"), __webpack_require__(/*! ./GameBase/System/InputManager */ \"./JavaScript/GameBase/System/InputManager.js\"), __webpack_require__(/*! ./GameBase/System/LoopManager */ \"./JavaScript/GameBase/System/LoopManager.js\"), __webpack_require__(/*! ./GameBase/System/SceneManager */ \"./JavaScript/GameBase/System/SceneManager.js\"), __webpack_require__(/*! ./Other/DebugFlag */ \"./JavaScript/Other/DebugFlag.js\"), __webpack_require__(/*! ./Other/SaveData */ \"./JavaScript/Other/SaveData.js\"), __webpack_require__(/*! ./Scene/TitleScene */ \"./JavaScript/Scene/TitleScene.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ImageBase_1, GlobalData_1, InputManager_1, LoopManager_1, SceneManager_1, DebugFlag_1, SaveData_1, TitleScene_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    //InputManagerの設定\r\n    InputManager_1.InputManager.instance.upKey = [\"w\", \"ArrowUp\"];\r\n    InputManager_1.InputManager.instance.downKey = [\"s\", \"ArrowDown\"];\r\n    InputManager_1.InputManager.instance.leftKey = [\"a\", \"ArrowLeft\"];\r\n    InputManager_1.InputManager.instance.rightKey = [\"d\", \"ArrowRight\"];\r\n    InputManager_1.InputManager.instance.okKey = [\" \", \"Enter\"];\r\n    InputManager_1.InputManager.instance.canselKey = [\"Backspace\"];\r\n    InputManager_1.InputManager.instance.activeKey = [\" \"];\r\n    InputManager_1.InputManager.instance.subBtn1 = [\"q\", \"Q\"];\r\n    InputManager_1.InputManager.instance.subBtn2 = [\"e\", \"E\"];\r\n    InputManager_1.InputManager.instance.subBtn3 = [\"Shift\"];\r\n    InputManager_1.InputManager.instance.subBtn4 = [\"Control\"];\r\n    InputManager_1.InputManager.instance.subBtn5 = [\"1\"];\r\n    InputManager_1.InputManager.instance.axisAcceleration = 5;\r\n    InputManager_1.InputManager.instance.axisFriction = 5;\r\n    //プレイヤー画像の読み込み\r\n    new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_work1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_work2.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_up_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_work1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_work2.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_down_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_work1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_work2.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_left_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_work1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_stand.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_work2.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/chara_right_stand.png\"),\r\n        //タイル・ガイド画像\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/noMoveTile.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/moveTile.bmp\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/wall.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidWork.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidSkill.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowStraight.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowStraight.png\", { up: 0, down: 0, left: 0, right: 0 }, 180),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowStraight.png\", { up: 0, down: 0, left: 0, right: 0, }, 270),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowStraight.png\", { up: 0, down: 0, left: 0, right: 0 }, 90),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowCurve.png\", { up: 0, down: 0, left: 0, right: 0 }, 270),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowCurve.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowCurve.png\", { up: 0, down: 0, left: 0, right: 0 }, 180),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/guidArrowCurve.png\", { up: 0, down: 0, left: 0, right: 0 }, 90),\r\n        //その他\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/breakEffect1.png\"),\r\n        new ImageBase_1.ImageBase(GlobalData_1.GlobalData.instance.imageSorceURL + \"crashSlide/breakEffect2.png\"),\r\n        //ゲーム基礎設定\r\n        (0, DebugFlag_1.debugFlagEvent)();\r\n    const fpsDisplay = document.getElementById(\"fpsDisplay\");\r\n    SaveData_1.SaveData.instance.Load();\r\n    InputManager_1.InputManager.instance.setInputEvent();\r\n    LoopManager_1.LoopManager.instance.SetUp(60, fpsDisplay);\r\n    GlobalData_1.GlobalData.instance.SetCanvas(\"mainCanvas\");\r\n    SceneManager_1.SceneManager.instance.AddScene(new TitleScene_1.TitleScene());\r\n    LoopManager_1.LoopManager.instance.StartLoop();\r\n    if (navigator.userAgent.match(/iPhone|Android.+Mobile/)) {\r\n        GlobalData_1.GlobalData.instance.mainCanvas.style.width = \"100%\";\r\n        GlobalData_1.GlobalData.instance.mainCanvas.style.height = \"100%\";\r\n        GlobalData_1.GlobalData.instance.mainCanvas.style.zIndex = \"100\";\r\n        GlobalData_1.GlobalData.instance.mainCanvas.style.position = \"absolute\";\r\n        GlobalData_1.GlobalData.instance.mainCanvas.style.top = \"0px\";\r\n    }\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n//# sourceMappingURL=main.js.map\n\n//# sourceURL=webpack:///./JavaScript/main.js?");

/***/ }),

/***/ "./Image/NoImg.bmp":
/*!*************************!*\
  !*** ./Image/NoImg.bmp ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"./Image/NoImg.bmp\");\n\n//# sourceURL=webpack:///./Image/NoImg.bmp?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./JavaScript/main.js");
/******/ 	
/******/ })()
;